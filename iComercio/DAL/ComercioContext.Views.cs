//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(iComercio.DAL.ComercioContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets83746b650f9566dd80e83931b4657e9bdef272d529c6b9e1ab4eda67b1bee369))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.5.0")]
    internal sealed class ViewsForBaseEntitySets83746b650f9566dd80e83931b4657e9bdef272d529c6b9e1ab4eda67b1bee369 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "83746b650f9566dd80e83931b4657e9bdef272d529c6b9e1ab4eda67b1bee369"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Autorizacion")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Comercio")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Persona")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.Localidad")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.Pais")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.Provincia")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.TipoDocumento")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.Empresa")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.CuentaBancaria")
            {
                return GetView8();
            }

            if (extentName == "CodeFirstDatabase.Banco")
            {
                return GetView9();
            }

            if (extentName == "CodeFirstDatabase.Chequera")
            {
                return GetView10();
            }

            if (extentName == "CodeFirstDatabase.Cheque")
            {
                return GetView11();
            }

            if (extentName == "CodeFirstDatabase.Estado")
            {
                return GetView12();
            }

            if (extentName == "CodeFirstDatabase.TipoEstado")
            {
                return GetView13();
            }

            if (extentName == "CodeFirstDatabase.TipoCheque")
            {
                return GetView14();
            }

            if (extentName == "CodeFirstDatabase.ClaseCuentaBancaria")
            {
                return GetView15();
            }

            if (extentName == "CodeFirstDatabase.Moneda")
            {
                return GetView16();
            }

            if (extentName == "CodeFirstDatabase.Proveedor")
            {
                return GetView17();
            }

            if (extentName == "CodeFirstDatabase.ConceptoGastosProveedor")
            {
                return GetView18();
            }

            if (extentName == "CodeFirstDatabase.ConceptoGastos")
            {
                return GetView19();
            }

            if (extentName == "CodeFirstDatabase.ProveedorSucursal")
            {
                return GetView20();
            }

            if (extentName == "CodeFirstDatabase.SucursalBanco")
            {
                return GetView21();
            }

            if (extentName == "CodeFirstDatabase.TipoCuentaBancaria")
            {
                return GetView22();
            }

            if (extentName == "CodeFirstDatabase.TipoComercio")
            {
                return GetView23();
            }

            if (extentName == "CodeFirstDatabase.AvisoDePago")
            {
                return GetView24();
            }

            if (extentName == "CodeFirstDatabase.Credito")
            {
                return GetView25();
            }

            if (extentName == "CodeFirstDatabase.Cliente")
            {
                return GetView26();
            }

            if (extentName == "CodeFirstDatabase.CuentaBancariaCliente")
            {
                return GetView27();
            }

            if (extentName == "CodeFirstDatabase.Domicilio")
            {
                return GetView28();
            }

            if (extentName == "CodeFirstDatabase.ClaseDato")
            {
                return GetView29();
            }

            if (extentName == "CodeFirstDatabase.Usuario")
            {
                return GetView30();
            }

            if (extentName == "CodeFirstDatabase.Perfil")
            {
                return GetView31();
            }

            if (extentName == "CodeFirstDatabase.Permiso")
            {
                return GetView32();
            }

            if (extentName == "CodeFirstDatabase.Mail")
            {
                return GetView33();
            }

            if (extentName == "CodeFirstDatabase.Nota")
            {
                return GetView34();
            }

            if (extentName == "CodeFirstDatabase.Profesion")
            {
                return GetView35();
            }

            if (extentName == "CodeFirstDatabase.Refinanciacion")
            {
                return GetView36();
            }

            if (extentName == "CodeFirstDatabase.RefinanciacionCuota")
            {
                return GetView37();
            }

            if (extentName == "CodeFirstDatabase.RefinanciacionCobranza")
            {
                return GetView38();
            }

            if (extentName == "CodeFirstDatabase.TipoPago")
            {
                return GetView39();
            }

            if (extentName == "CodeFirstDatabase.Sexo")
            {
                return GetView40();
            }

            if (extentName == "CodeFirstDatabase.Telefono")
            {
                return GetView41();
            }

            if (extentName == "CodeFirstDatabase.TipoComoConocio")
            {
                return GetView42();
            }

            if (extentName == "CodeFirstDatabase.Cobranza")
            {
                return GetView43();
            }

            if (extentName == "CodeFirstDatabase.Cuota")
            {
                return GetView44();
            }

            if (extentName == "CodeFirstDatabase.TipoCuota")
            {
                return GetView45();
            }

            if (extentName == "CodeFirstDatabase.NotasCD")
            {
                return GetView46();
            }

            if (extentName == "CodeFirstDatabase.TipoBonificacion")
            {
                return GetView47();
            }

            if (extentName == "CodeFirstDatabase.CreditoAval")
            {
                return GetView48();
            }

            if (extentName == "CodeFirstDatabase.TipoAval")
            {
                return GetView49();
            }

            if (extentName == "CodeFirstDatabase.Cargo")
            {
                return GetView50();
            }

            if (extentName == "CodeFirstDatabase.ClaseMovimiento")
            {
                return GetView51();
            }

            if (extentName == "CodeFirstDatabase.ConceptoFondos")
            {
                return GetView52();
            }

            if (extentName == "CodeFirstDatabase.MedioDePago")
            {
                return GetView53();
            }

            if (extentName == "CodeFirstDatabase.Departamento")
            {
                return GetView54();
            }

            if (extentName == "CodeFirstDatabase.ConceptoGastosDepartamento")
            {
                return GetView55();
            }

            if (extentName == "CodeFirstDatabase.CreditoAnulado")
            {
                return GetView56();
            }

            if (extentName == "CodeFirstDatabase.TipoAnulacion")
            {
                return GetView57();
            }

            if (extentName == "CodeFirstDatabase.CuentaCorriente")
            {
                return GetView58();
            }

            if (extentName == "CodeFirstDatabase.Gasto")
            {
                return GetView59();
            }

            if (extentName == "CodeFirstDatabase.SolicitudFondo")
            {
                return GetView60();
            }

            if (extentName == "CodeFirstDatabase.Empleado")
            {
                return GetView61();
            }

            if (extentName == "CodeFirstDatabase.TipoEmpleado")
            {
                return GetView62();
            }

            if (extentName == "CodeFirstDatabase.SolicitudFondoConceptoGastosProveedor")
            {
                return GetView63();
            }

            if (extentName == "CodeFirstDatabase.TipoSolicitud")
            {
                return GetView64();
            }

            if (extentName == "CodeFirstDatabase.TransferenciasDepositos")
            {
                return GetView65();
            }

            if (extentName == "CodeFirstDatabase.TipoTransferenciaDeposito")
            {
                return GetView66();
            }

            if (extentName == "CodeFirstDatabase.Pago")
            {
                return GetView67();
            }

            if (extentName == "CodeFirstDatabase.CapDetalle")
            {
                return GetView68();
            }

            if (extentName == "CodeFirstDatabase.Cap")
            {
                return GetView69();
            }

            if (extentName == "CodeFirstDatabase.FFDetalle")
            {
                return GetView70();
            }

            if (extentName == "CodeFirstDatabase.FF")
            {
                return GetView71();
            }

            if (extentName == "CodeFirstDatabase.Recibo")
            {
                return GetView72();
            }

            if (extentName == "CodeFirstDatabase.TipoMovimiento")
            {
                return GetView73();
            }

            if (extentName == "CodeFirstDatabase.EstadoTransmision")
            {
                return GetView74();
            }

            if (extentName == "CodeFirstDatabase.Operacion")
            {
                return GetView75();
            }

            if (extentName == "CodeFirstDatabase.OrdenDePago")
            {
                return GetView76();
            }

            if (extentName == "CodeFirstDatabase.TipoRetencionPlan")
            {
                return GetView77();
            }

            if (extentName == "CodeFirstDatabase.Transmision")
            {
                return GetView78();
            }

            if (extentName == "CodeFirstDatabase.PlanesTipo")
            {
                return GetView79();
            }

            if (extentName == "CodeFirstDatabase.PlanesBonif")
            {
                return GetView80();
            }

            if (extentName == "CodeFirstDatabase.PlanesDetalle")
            {
                return GetView81();
            }

            if (extentName == "CodeFirstDatabase.PlanesVenci")
            {
                return GetView82();
            }

            if (extentName == "CodeFirstDatabase.PerfilPermiso")
            {
                return GetView83();
            }

            if (extentName == "CodeFirstDatabase.UsuarioPerfil")
            {
                return GetView84();
            }

            if (extentName == "ComercioContext.Autorizaciones")
            {
                return GetView85();
            }

            if (extentName == "ComercioContext.Comercios")
            {
                return GetView86();
            }

            if (extentName == "ComercioContext.Comercio_Contacto1")
            {
                return GetView87();
            }

            if (extentName == "ComercioContext.Comercio_Contacto2")
            {
                return GetView88();
            }

            if (extentName == "ComercioContext.Comercio_Titular1")
            {
                return GetView89();
            }

            if (extentName == "ComercioContext.Comercio_Titular2")
            {
                return GetView90();
            }

            if (extentName == "ComercioContext.Personas")
            {
                return GetView91();
            }

            if (extentName == "ComercioContext.Persona_TiposDocumento")
            {
                return GetView92();
            }

            if (extentName == "ComercioContext.Localidades")
            {
                return GetView93();
            }

            if (extentName == "ComercioContext.Paises")
            {
                return GetView94();
            }

            if (extentName == "ComercioContext.Provincias")
            {
                return GetView95();
            }

            if (extentName == "ComercioContext.TiposDocumento")
            {
                return GetView96();
            }

            if (extentName == "ComercioContext.Empresas")
            {
                return GetView97();
            }

            if (extentName == "ComercioContext.CuentasBancarias")
            {
                return GetView98();
            }

            if (extentName == "ComercioContext.CuentaBancaria_Proveedor")
            {
                return GetView99();
            }

            if (extentName == "ComercioContext.CuentaBancaria_ProveedorSucursal")
            {
                return GetView100();
            }

            if (extentName == "ComercioContext.Bancos")
            {
                return GetView101();
            }

            if (extentName == "ComercioContext.Chequera")
            {
                return GetView102();
            }

            if (extentName == "ComercioContext.Cheques")
            {
                return GetView103();
            }

            if (extentName == "ComercioContext.Estados")
            {
                return GetView104();
            }

            if (extentName == "ComercioContext.TiposEstados")
            {
                return GetView105();
            }

            if (extentName == "ComercioContext.TiposCheques")
            {
                return GetView106();
            }

            if (extentName == "ComercioContext.ClaseCuentasBancarias")
            {
                return GetView107();
            }

            if (extentName == "ComercioContext.Monedas")
            {
                return GetView108();
            }

            if (extentName == "ComercioContext.Proveedores")
            {
                return GetView109();
            }

            if (extentName == "ComercioContext.ConceptoGastoProveedores")
            {
                return GetView110();
            }

            if (extentName == "ComercioContext.ConceptoGastos")
            {
                return GetView111();
            }

            if (extentName == "ComercioContext.ProveedoresSucursales")
            {
                return GetView112();
            }

            if (extentName == "ComercioContext.SucursalesBancos")
            {
                return GetView113();
            }

            if (extentName == "ComercioContext.TiposCuentasBancarias")
            {
                return GetView114();
            }

            if (extentName == "ComercioContext.TiposComercios")
            {
                return GetView115();
            }

            if (extentName == "ComercioContext.AvisoDePago")
            {
                return GetView116();
            }

            if (extentName == "ComercioContext.Creditos")
            {
                return GetView117();
            }

            if (extentName == "ComercioContext.Clientes")
            {
                return GetView118();
            }

            if (extentName == "ComercioContext.CuentaBancariaCliente")
            {
                return GetView119();
            }

            if (extentName == "ComercioContext.Domicilios")
            {
                return GetView120();
            }

            if (extentName == "ComercioContext.ClasesDato")
            {
                return GetView121();
            }

            if (extentName == "ComercioContext.Usuarios")
            {
                return GetView122();
            }

            if (extentName == "ComercioContext.Perfiles")
            {
                return GetView123();
            }

            if (extentName == "ComercioContext.Permisos")
            {
                return GetView124();
            }

            if (extentName == "ComercioContext.Mails")
            {
                return GetView125();
            }

            if (extentName == "ComercioContext.Nota")
            {
                return GetView126();
            }

            if (extentName == "ComercioContext.Profesiones")
            {
                return GetView127();
            }

            if (extentName == "ComercioContext.Refinanciaciones")
            {
                return GetView128();
            }

            if (extentName == "ComercioContext.RefinanciacionCuotas")
            {
                return GetView129();
            }

            if (extentName == "ComercioContext.RefinanciacionCobranzas")
            {
                return GetView130();
            }

            if (extentName == "ComercioContext.TipoPago")
            {
                return GetView131();
            }

            if (extentName == "ComercioContext.Sexos")
            {
                return GetView132();
            }

            if (extentName == "ComercioContext.Telefono")
            {
                return GetView133();
            }

            if (extentName == "ComercioContext.TipoComoConocio")
            {
                return GetView134();
            }

            if (extentName == "ComercioContext.Cobranzas")
            {
                return GetView135();
            }

            if (extentName == "ComercioContext.Cuotas")
            {
                return GetView136();
            }

            if (extentName == "ComercioContext.TipoCuota")
            {
                return GetView137();
            }

            if (extentName == "ComercioContext.NotasCD")
            {
                return GetView138();
            }

            if (extentName == "ComercioContext.TipoBonificacion")
            {
                return GetView139();
            }

            if (extentName == "ComercioContext.CreditoAvals")
            {
                return GetView140();
            }

            if (extentName == "ComercioContext.TipoAval")
            {
                return GetView141();
            }

            if (extentName == "ComercioContext.Cargos")
            {
                return GetView142();
            }

            if (extentName == "ComercioContext.ClasesMovimientos")
            {
                return GetView143();
            }

            if (extentName == "ComercioContext.ConceptoFondos")
            {
                return GetView144();
            }

            if (extentName == "ComercioContext.MediosDePagos")
            {
                return GetView145();
            }

            if (extentName == "ComercioContext.Departamentos")
            {
                return GetView146();
            }

            if (extentName == "ComercioContext.ConceptoFondos_RequiereValidacionDe")
            {
                return GetView147();
            }

            if (extentName == "ComercioContext.ConceptoGastosDepartamentos")
            {
                return GetView148();
            }

            if (extentName == "ComercioContext.CreditoAnulado")
            {
                return GetView149();
            }

            if (extentName == "ComercioContext.TipoAnulacion")
            {
                return GetView150();
            }

            if (extentName == "ComercioContext.CuentaCorriente")
            {
                return GetView151();
            }

            if (extentName == "ComercioContext.Gastoes")
            {
                return GetView152();
            }

            if (extentName == "ComercioContext.SolicitudFondos")
            {
                return GetView153();
            }

            if (extentName == "ComercioContext.Empleados")
            {
                return GetView154();
            }

            if (extentName == "ComercioContext.TiposEmpleados")
            {
                return GetView155();
            }

            if (extentName == "ComercioContext.SolicitudFondoConceptoGastosProveedors")
            {
                return GetView156();
            }

            if (extentName == "ComercioContext.TiposSolicitud")
            {
                return GetView157();
            }

            if (extentName == "ComercioContext.TransferenciasDepositos")
            {
                return GetView158();
            }

            if (extentName == "ComercioContext.TransferenciasDepositos_ComercioEmpresa")
            {
                return GetView159();
            }

            if (extentName == "ComercioContext.TransferenciasDepositos_EmpleadoRegistrador")
            {
                return GetView160();
            }

            if (extentName == "ComercioContext.TipoTransferenciaDeposito")
            {
                return GetView161();
            }

            if (extentName == "ComercioContext.Pagoes")
            {
                return GetView162();
            }

            if (extentName == "ComercioContext.CapDetalles")
            {
                return GetView163();
            }

            if (extentName == "ComercioContext.Caps")
            {
                return GetView164();
            }

            if (extentName == "ComercioContext.FFDetalles")
            {
                return GetView165();
            }

            if (extentName == "ComercioContext.FFs")
            {
                return GetView166();
            }

            if (extentName == "ComercioContext.Recibo")
            {
                return GetView167();
            }

            if (extentName == "ComercioContext.TiposMovimientos")
            {
                return GetView168();
            }

            if (extentName == "ComercioContext.EstadoTransmisiones")
            {
                return GetView169();
            }

            if (extentName == "ComercioContext.Operaciones")
            {
                return GetView170();
            }

            if (extentName == "ComercioContext.OrdenesDePago")
            {
                return GetView171();
            }

            if (extentName == "ComercioContext.TipoRetencionPlan")
            {
                return GetView172();
            }

            if (extentName == "ComercioContext.Transmisiones")
            {
                return GetView173();
            }

            if (extentName == "ComercioContext.PlanesTipoes")
            {
                return GetView174();
            }

            if (extentName == "ComercioContext.PlanesBonifs")
            {
                return GetView175();
            }

            if (extentName == "ComercioContext.PlanesDetalles")
            {
                return GetView176();
            }

            if (extentName == "ComercioContext.PlanesVencis")
            {
                return GetView177();
            }

            if (extentName == "ComercioContext.Perfil_Permisos")
            {
                return GetView178();
            }

            if (extentName == "ComercioContext.Usuario_Perfiles")
            {
                return GetView179();
            }

            if (extentName == "CodeFirstDatabase.CuentaCorrienteCorte")
            {
                return GetView180();
            }

            if (extentName == "ComercioContext.CorteCuentaCorriente")
            {
                return GetView181();
            }

            if (extentName == "CodeFirstDatabase.Log")
            {
                return GetView182();
            }

            if (extentName == "ComercioContext.Logs")
            {
                return GetView183();
            }

            if (extentName == "CodeFirstDatabase.TipoImagen")
            {
                return GetView184();
            }

            if (extentName == "ComercioContext.TipoImagen")
            {
                return GetView185();
            }

            if (extentName == "CodeFirstDatabase.TipoImpresion")
            {
                return GetView186();
            }

            if (extentName == "ComercioContext.TipoImpresion")
            {
                return GetView187();
            }

            if (extentName == "CodeFirstDatabase.PlanesParam")
            {
                return GetView188();
            }

            if (extentName == "ComercioContext.PlanesParams")
            {
                return GetView189();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Autorizacion.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Autorizacion
        [CodeFirstDatabaseSchema.Autorizacion](T1.Autorizacion_EmpresaID, T1.Autorizacion_ComercioID, T1.Autorizacion_AutorizacionID, T1.Autorizacion_SolicitudFondoID, T1.Autorizacion_EstadoID, T1.Autorizacion_Motivo, T1.Autorizacion_Fecha, T1.Autorizacion_PersonaID, T1.Autorizacion_EmpresaNombre, T1.Autorizacion_ConceptoFondosNombre, T1.Autorizacion_TipoSolicitudNombre, T1.Autorizacion_ComercioNombreNum, T1.Autorizacion_OrdenDePagoID, T1.Autorizacion_SolicitudFondoFechaPago, T1.Autorizacion_ChequeNumCheque, T1.Autorizacion_CuentaBancaria, T1.Autorizacion_CuentaContable, T1.Autorizacion_Importe, T1.Autorizacion_Observaciones, T1.Autorizacion_NumCajaImpCont)
    FROM (
        SELECT 
            T.EmpresaID AS Autorizacion_EmpresaID, 
            T.ComercioID AS Autorizacion_ComercioID, 
            T.AutorizacionID AS Autorizacion_AutorizacionID, 
            T.SolicitudFondoID AS Autorizacion_SolicitudFondoID, 
            T.EstadoID AS Autorizacion_EstadoID, 
            T.Motivo AS Autorizacion_Motivo, 
            T.Fecha AS Autorizacion_Fecha, 
            T.PersonaID AS Autorizacion_PersonaID, 
            T.EmpresaNombre AS Autorizacion_EmpresaNombre, 
            T.ConceptoFondosNombre AS Autorizacion_ConceptoFondosNombre, 
            T.TipoSolicitudNombre AS Autorizacion_TipoSolicitudNombre, 
            T.ComercioNombreNum AS Autorizacion_ComercioNombreNum, 
            T.OrdenDePagoID AS Autorizacion_OrdenDePagoID, 
            T.SolicitudFondoFechaPago AS Autorizacion_SolicitudFondoFechaPago, 
            T.ChequeNumCheque AS Autorizacion_ChequeNumCheque, 
            T.CuentaBancaria AS Autorizacion_CuentaBancaria, 
            T.CuentaContable AS Autorizacion_CuentaContable, 
            T.Importe AS Autorizacion_Importe, 
            T.Observaciones AS Autorizacion_Observaciones, 
            T.NumCajaImpCont AS Autorizacion_NumCajaImpCont, 
            True AS _from0
        FROM ComercioContext.Autorizaciones AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Comercio.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Comercio
        [CodeFirstDatabaseSchema.Comercio](T6.Comercio_EmpresaID, T6.Comercio_ComercioID, T6.Comercio_Nombre, T6.Comercio_Descripcion, T6.Comercio_Domicilio, T6.Comercio_Barrio, T6.Comercio_TipoComercioID, T6.Comercio_LocalidadID, T6.Comercio_ProvinciaID, T6.Comercio_PaisId, T6.Comercio_Telefono1, T6.Comercio_Telefono2, T6.Comercio_Recorrido, T6.Comercio_Cuit, T6.Comercio_Mail1, T6.Comercio_Mail2, T6.Comercio_CodPromo, T6.Comercio_PorPromo, T6.Comercio_PagaBanco, T6.Comercio_Venci, T6.Comercio_Corte, T6.Comercio_Habilitado, T6.Comercio_Por30, T6.Comercio_Por30M, T6.Comercio_Clave, T6.Comercio_Compu, T6.Comercio_Fanta, T6.Comercio_Categoria, T6.Comercio_Tolerancia, T6.Comercio_NumCredito, T6.Comercio_NumCliente, T6.Comercio_NumRendi, T6.Comercio_FechaIngreso, T6.Comercio_FechaPRendi, T6.Comercio_Contacto1ID, T6.Comercio_Contacto2ID, T6.Comercio_Titular1ID, T6.Comercio_Titular2ID, T6.Comercio_Rubro, T6.Comercio_CanLoc, T6.Comercio_CanPer, T6.Comercio_CanVid, T6.Comercio_CtaDep, T6.Comercio_ForPag, T6.Comercio_OrdCheq, T6.Comercio_PerFinan, T6.Comercio_LlevaGar, T6.Comercio_Notas, T6.Comercio_Cuenta, T6.Comercio_CredPri, T6.Comercio_CredSeg, T6.Comercio_Consolid, T6.Comercio_Trab, T6.Comercio_Refinancia, T6.Comercio_IntRef, T6.Comercio_IntAde, T6.Comercio_IntArr, T6.Comercio_CantCuoArr, T6.Comercio_PorSueldo, T6.Comercio_Llp, T6.Comercio_Pm, T6.Comercio_ImpCi, T6.Comercio_FechaCi, T6.Comercio_ImpCiVta, T6.Comercio_CiVtaFecha, T6.Comercio_Principal, T6.Comercio_PuedeCobrar, T6.Comercio_Actualiza, T6.Comercio_ToleranciaBoni, T6.[Comercio.Contacto1_PersonaID], T6.[Comercio.Contacto2_PersonaID], T6.[Comercio.Titular1_PersonaID], T6.[Comercio.Titular2_PersonaID])
    FROM (
        SELECT T1.Comercio_EmpresaID, T1.Comercio_ComercioID, T1.Comercio_Nombre, T1.Comercio_Descripcion, T1.Comercio_Domicilio, T1.Comercio_Barrio, T1.Comercio_TipoComercioID, T1.Comercio_LocalidadID, T1.Comercio_ProvinciaID, T1.Comercio_PaisId, T1.Comercio_Telefono1, T1.Comercio_Telefono2, T1.Comercio_Recorrido, T1.Comercio_Cuit, T1.Comercio_Mail1, T1.Comercio_Mail2, T1.Comercio_CodPromo, T1.Comercio_PorPromo, T1.Comercio_PagaBanco, T1.Comercio_Venci, T1.Comercio_Corte, T1.Comercio_Habilitado, T1.Comercio_Por30, T1.Comercio_Por30M, T1.Comercio_Clave, T1.Comercio_Compu, T1.Comercio_Fanta, T1.Comercio_Categoria, T1.Comercio_Tolerancia, T1.Comercio_NumCredito, T1.Comercio_NumCliente, T1.Comercio_NumRendi, T1.Comercio_FechaIngreso, T1.Comercio_FechaPRendi, T1.Comercio_Contacto1ID, T1.Comercio_Contacto2ID, T1.Comercio_Titular1ID, T1.Comercio_Titular2ID, T1.Comercio_Rubro, T1.Comercio_CanLoc, T1.Comercio_CanPer, T1.Comercio_CanVid, T1.Comercio_CtaDep, T1.Comercio_ForPag, T1.Comercio_OrdCheq, T1.Comercio_PerFinan, T1.Comercio_LlevaGar, T1.Comercio_Notas, T1.Comercio_Cuenta, T1.Comercio_CredPri, T1.Comercio_CredSeg, T1.Comercio_Consolid, T1.Comercio_Trab, T1.Comercio_Refinancia, T1.Comercio_IntRef, T1.Comercio_IntAde, T1.Comercio_IntArr, T1.Comercio_CantCuoArr, T1.Comercio_PorSueldo, T1.Comercio_Llp, T1.Comercio_Pm, T1.Comercio_ImpCi, T1.Comercio_FechaCi, T1.Comercio_ImpCiVta, T1.Comercio_CiVtaFecha, T1.Comercio_Principal, T1.Comercio_PuedeCobrar, T1.Comercio_Actualiza, T1.Comercio_ToleranciaBoni, T2.[Comercio.Contacto1_PersonaID], T5.[Comercio.Contacto2_PersonaID], T4.[Comercio.Titular1_PersonaID], T3.[Comercio.Titular2_PersonaID], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T5._from2 AND T5._from2 IS NOT NULL) AS _from2, (T4._from3 AND T4._from3 IS NOT NULL) AS _from3, (T3._from4 AND T3._from4 IS NOT NULL) AS _from4
        FROM  (
            SELECT 
                T.EmpresaID AS Comercio_EmpresaID, 
                T.ComercioID AS Comercio_ComercioID, 
                T.Nombre AS Comercio_Nombre, 
                T.Descripcion AS Comercio_Descripcion, 
                T.Domicilio AS Comercio_Domicilio, 
                T.Barrio AS Comercio_Barrio, 
                T.TipoComercioID AS Comercio_TipoComercioID, 
                T.LocalidadID AS Comercio_LocalidadID, 
                T.ProvinciaID AS Comercio_ProvinciaID, 
                T.PaisId AS Comercio_PaisId, 
                T.Telefono1 AS Comercio_Telefono1, 
                T.Telefono2 AS Comercio_Telefono2, 
                T.Recorrido AS Comercio_Recorrido, 
                T.Cuit AS Comercio_Cuit, 
                T.Mail1 AS Comercio_Mail1, 
                T.Mail2 AS Comercio_Mail2, 
                T.CodPromo AS Comercio_CodPromo, 
                T.PorPromo AS Comercio_PorPromo, 
                T.PagaBanco AS Comercio_PagaBanco, 
                T.Venci AS Comercio_Venci, 
                T.Corte AS Comercio_Corte, 
                T.Habilitado AS Comercio_Habilitado, 
                T.Por30 AS Comercio_Por30, 
                T.Por30M AS Comercio_Por30M, 
                T.Clave AS Comercio_Clave, 
                T.Compu AS Comercio_Compu, 
                T.Fanta AS Comercio_Fanta, 
                T.Categoria AS Comercio_Categoria, 
                T.Tolerancia AS Comercio_Tolerancia, 
                T.NumCredito AS Comercio_NumCredito, 
                T.NumCliente AS Comercio_NumCliente, 
                T.NumRendi AS Comercio_NumRendi, 
                T.FechaIngreso AS Comercio_FechaIngreso, 
                T.FechaPRendi AS Comercio_FechaPRendi, 
                T.Contacto1ID AS Comercio_Contacto1ID, 
                T.Contacto2ID AS Comercio_Contacto2ID, 
                T.Titular1ID AS Comercio_Titular1ID, 
                T.Titular2ID AS Comercio_Titular2ID, 
                T.Rubro AS Comercio_Rubro, 
                T.CanLoc AS Comercio_CanLoc, 
                T.CanPer AS Comercio_CanPer, 
                T.CanVid AS Comercio_CanVid, 
                T.CtaDep AS Comercio_CtaDep, 
                T.ForPag AS Comercio_ForPag, 
                T.OrdCheq AS Comercio_OrdCheq, 
                T.PerFinan AS Comercio_PerFinan, 
                T.LlevaGar AS Comercio_LlevaGar, 
                T.Notas AS Comercio_Notas, 
                T.Cuenta AS Comercio_Cuenta, 
                T.CredPri AS Comercio_CredPri, 
                T.CredSeg AS Comercio_CredSeg, 
                T.Consolid AS Comercio_Consolid, 
                T.Trab AS Comercio_Trab, 
                T.Refinancia AS Comercio_Refinancia, 
                T.IntRef AS Comercio_IntRef, 
                T.IntAde AS Comercio_IntAde, 
                T.IntArr AS Comercio_IntArr, 
                T.CantCuoArr AS Comercio_CantCuoArr, 
                T.PorSueldo AS Comercio_PorSueldo, 
                T.Llp AS Comercio_Llp, 
                T.Pm AS Comercio_Pm, 
                T.ImpCi AS Comercio_ImpCi, 
                T.FechaCi AS Comercio_FechaCi, 
                T.ImpCiVta AS Comercio_ImpCiVta, 
                T.CiVtaFecha AS Comercio_CiVtaFecha, 
                T.Principal AS Comercio_Principal, 
                T.PuedeCobrar AS Comercio_PuedeCobrar, 
                T.Actualiza AS Comercio_Actualiza, 
                T.ToleranciaBoni AS Comercio_ToleranciaBoni, 
                True AS _from0
            FROM ComercioContext.Comercios AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Comercio_Contacto1_Source).EmpresaID AS Comercio_EmpresaID, 
                Key(T.Comercio_Contacto1_Source).ComercioID AS Comercio_ComercioID, 
                Key(T.Comercio_Contacto1_Target).PersonaID AS [Comercio.Contacto1_PersonaID], 
                True AS _from1
            FROM ComercioContext.Comercio_Contacto1 AS T) AS T2
            ON T1.Comercio_EmpresaID = T2.Comercio_EmpresaID AND T1.Comercio_ComercioID = T2.Comercio_ComercioID
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Comercio_Titular2_Source).EmpresaID AS Comercio_EmpresaID, 
                Key(T.Comercio_Titular2_Source).ComercioID AS Comercio_ComercioID, 
                Key(T.Comercio_Titular2_Target).PersonaID AS [Comercio.Titular2_PersonaID], 
                True AS _from4
            FROM ComercioContext.Comercio_Titular2 AS T) AS T3
            ON T1.Comercio_EmpresaID = T3.Comercio_EmpresaID AND T1.Comercio_ComercioID = T3.Comercio_ComercioID
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Comercio_Titular1_Source).EmpresaID AS Comercio_EmpresaID, 
                Key(T.Comercio_Titular1_Source).ComercioID AS Comercio_ComercioID, 
                Key(T.Comercio_Titular1_Target).PersonaID AS [Comercio.Titular1_PersonaID], 
                True AS _from3
            FROM ComercioContext.Comercio_Titular1 AS T) AS T4
            ON T1.Comercio_EmpresaID = T4.Comercio_EmpresaID AND T1.Comercio_ComercioID = T4.Comercio_ComercioID
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Comercio_Contacto2_Source).EmpresaID AS Comercio_EmpresaID, 
                Key(T.Comercio_Contacto2_Source).ComercioID AS Comercio_ComercioID, 
                Key(T.Comercio_Contacto2_Target).PersonaID AS [Comercio.Contacto2_PersonaID], 
                True AS _from2
            FROM ComercioContext.Comercio_Contacto2 AS T) AS T5
            ON T1.Comercio_EmpresaID = T5.Comercio_EmpresaID AND T1.Comercio_ComercioID = T5.Comercio_ComercioID
    ) AS T6");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Persona.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Persona
        [CodeFirstDatabaseSchema.Persona](T3.Persona_PersonaID, T3.Persona_Nombre, T3.Persona_Apellido, T3.Persona_Documento, T3.Persona_Domicilio, T3.Persona_Fotografia, T3.Persona_LocalidadID, T3.Persona_ProvinciaID, T3.Persona_PaisID, T3.Persona_Telefono1, T3.Persona_Telefono2, T3.Persona_Mail1, T3.Persona_Mail2, T3.Persona_Cel, T3.Persona_Edad, T3.Persona_FechaNacimiento, T3.Persona_TiposDocumentoID, T3.[Persona.TiposDocumento_TipoDocumentoID])
    FROM (
        SELECT T1.Persona_PersonaID, T1.Persona_Nombre, T1.Persona_Apellido, T1.Persona_Documento, T1.Persona_Domicilio, T1.Persona_Fotografia, T1.Persona_LocalidadID, T1.Persona_ProvinciaID, T1.Persona_PaisID, T1.Persona_Telefono1, T1.Persona_Telefono2, T1.Persona_Mail1, T1.Persona_Mail2, T1.Persona_Cel, T1.Persona_Edad, T1.Persona_FechaNacimiento, T1.Persona_TiposDocumentoID, T2.[Persona.TiposDocumento_TipoDocumentoID], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.PersonaID AS Persona_PersonaID, 
                T.Nombre AS Persona_Nombre, 
                T.Apellido AS Persona_Apellido, 
                T.Documento AS Persona_Documento, 
                T.Domicilio AS Persona_Domicilio, 
                T.Fotografia AS Persona_Fotografia, 
                T.LocalidadID AS Persona_LocalidadID, 
                T.ProvinciaID AS Persona_ProvinciaID, 
                T.PaisID AS Persona_PaisID, 
                T.Telefono1 AS Persona_Telefono1, 
                T.Telefono2 AS Persona_Telefono2, 
                T.Mail1 AS Persona_Mail1, 
                T.Mail2 AS Persona_Mail2, 
                T.Cel AS Persona_Cel, 
                T.Edad AS Persona_Edad, 
                T.FechaNacimiento AS Persona_FechaNacimiento, 
                T.TiposDocumentoID AS Persona_TiposDocumentoID, 
                True AS _from0
            FROM ComercioContext.Personas AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Persona_TiposDocumento_Source).PersonaID AS Persona_PersonaID, 
                Key(T.Persona_TiposDocumento_Target).TipoDocumentoID AS [Persona.TiposDocumento_TipoDocumentoID], 
                True AS _from1
            FROM ComercioContext.Persona_TiposDocumento AS T) AS T2
            ON T1.Persona_PersonaID = T2.Persona_PersonaID
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Localidad.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Localidad
        [CodeFirstDatabaseSchema.Localidad](T1.Localidad_PaisId, T1.Localidad_ProvinciaID, T1.Localidad_LocalidadID, T1.Localidad_Nombre, T1.Localidad_Descripcion, T1.Localidad_CodPostal, T1.Localidad_CodTel, T1.Localidad_X, T1.Localidad_Y)
    FROM (
        SELECT 
            T.PaisId AS Localidad_PaisId, 
            T.ProvinciaID AS Localidad_ProvinciaID, 
            T.LocalidadID AS Localidad_LocalidadID, 
            T.Nombre AS Localidad_Nombre, 
            T.Descripcion AS Localidad_Descripcion, 
            T.CodPostal AS Localidad_CodPostal, 
            T.CodTel AS Localidad_CodTel, 
            T.X AS Localidad_X, 
            T.Y AS Localidad_Y, 
            True AS _from0
        FROM ComercioContext.Localidades AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Pais.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Pais
        [CodeFirstDatabaseSchema.Pais](T1.Pais_PaisID, T1.Pais_Nombre, T1.Pais_Descripcion, T1.Pais_CodIsoNumerico, T1.Pais_CodIso2, T1.Pais_CodIso3, T1.Pais_DirImaBandera, T1.Pais_CodTel, T1.Pais_X, T1.Pais_Y)
    FROM (
        SELECT 
            T.PaisID AS Pais_PaisID, 
            T.Nombre AS Pais_Nombre, 
            T.Descripcion AS Pais_Descripcion, 
            T.CodIsoNumerico AS Pais_CodIsoNumerico, 
            T.CodIso2 AS Pais_CodIso2, 
            T.CodIso3 AS Pais_CodIso3, 
            T.DirImaBandera AS Pais_DirImaBandera, 
            T.CodTel AS Pais_CodTel, 
            T.X AS Pais_X, 
            T.Y AS Pais_Y, 
            True AS _from0
        FROM ComercioContext.Paises AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Provincia.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Provincia
        [CodeFirstDatabaseSchema.Provincia](T1.Provincia_PaisId, T1.Provincia_ProvinciaID, T1.Provincia_Nombre, T1.Provincia_Descripcion, T1.Provincia_CodIso, T1.Provincia_DirImaEscudo, T1.Provincia_CodTel, T1.Provincia_X, T1.Provincia_Y)
    FROM (
        SELECT 
            T.PaisId AS Provincia_PaisId, 
            T.ProvinciaID AS Provincia_ProvinciaID, 
            T.Nombre AS Provincia_Nombre, 
            T.Descripcion AS Provincia_Descripcion, 
            T.CodIso AS Provincia_CodIso, 
            T.DirImaEscudo AS Provincia_DirImaEscudo, 
            T.CodTel AS Provincia_CodTel, 
            T.X AS Provincia_X, 
            T.Y AS Provincia_Y, 
            True AS _from0
        FROM ComercioContext.Provincias AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TipoDocumento.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoDocumento
        [CodeFirstDatabaseSchema.TipoDocumento](T1.TipoDocumento_TipoDocumentoID, T1.TipoDocumento_Nombre, T1.TipoDocumento_Descripcion)
    FROM (
        SELECT 
            T.TipoDocumentoID AS TipoDocumento_TipoDocumentoID, 
            T.Nombre AS TipoDocumento_Nombre, 
            T.Descripcion AS TipoDocumento_Descripcion, 
            True AS _from0
        FROM ComercioContext.TiposDocumento AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Empresa.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Empresa
        [CodeFirstDatabaseSchema.Empresa](T1.Empresa_EmpresaID, T1.Empresa_Nombre, T1.Empresa_Descripcion, T1.Empresa_NombreBase, T1.Empresa_Mail, T1.Empresa_MailCont, T1.Empresa_MailNotificaciones, T1.Empresa_MailNotificacionesCont, T1.Empresa_ServidorCorreo, T1.Empresa_EmpresaDiminutivo, T1.Empresa_Cuit, T1.Empresa_IIBB, T1.Empresa_IA, T1.Empresa_Domicilio, T1.Empresa_Localidad, T1.Empresa_Provincia, T1.Empresa_CP, T1.Empresa_Telefono1, T1.Empresa_Telefono2, T1.Empresa_Telefono3, T1.Empresa_Telefonos)
    FROM (
        SELECT 
            T.EmpresaID AS Empresa_EmpresaID, 
            T.Nombre AS Empresa_Nombre, 
            T.Descripcion AS Empresa_Descripcion, 
            T.NombreBase AS Empresa_NombreBase, 
            T.Mail AS Empresa_Mail, 
            T.MailCont AS Empresa_MailCont, 
            T.MailNotificaciones AS Empresa_MailNotificaciones, 
            T.MailNotificacionesCont AS Empresa_MailNotificacionesCont, 
            T.ServidorCorreo AS Empresa_ServidorCorreo, 
            T.EmpresaDiminutivo AS Empresa_EmpresaDiminutivo, 
            T.Cuit AS Empresa_Cuit, 
            T.IIBB AS Empresa_IIBB, 
            T.IA AS Empresa_IA, 
            T.Domicilio AS Empresa_Domicilio, 
            T.Localidad AS Empresa_Localidad, 
            T.Provincia AS Empresa_Provincia, 
            T.CP AS Empresa_CP, 
            T.Telefono1 AS Empresa_Telefono1, 
            T.Telefono2 AS Empresa_Telefono2, 
            T.Telefono3 AS Empresa_Telefono3, 
            T.Telefonos AS Empresa_Telefonos, 
            True AS _from0
        FROM ComercioContext.Empresas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.CuentaBancaria.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CuentaBancaria
        [CodeFirstDatabaseSchema.CuentaBancaria](T4.CuentaBancaria_EmpresaID, T4.CuentaBancaria_CuentaBancariaID, T4.CuentaBancaria_NumCuenta, T4.CuentaBancaria_Cbu, T4.CuentaBancaria_Descripcion, T4.CuentaBancaria_Notas, T4.CuentaBancaria_FechaAlta, T4.CuentaBancaria_ComercioID, T4.CuentaBancaria_ClaseCuentaBancariaID, T4.CuentaBancaria_TipoCuentaBancariaID, T4.CuentaBancaria_SucursalBancoID, T4.CuentaBancaria_BancoID, T4.CuentaBancaria_MonedaID, T4.CuentaBancaria_EmiteCheque, T4.CuentaBancaria_CuentaContable, T4.CuentaBancaria_EstadoID, T4.CuentaBancaria_PersonaID, T4.[CuentaBancaria.prov_id], T4.[CuentaBancaria.provsuc_id], T4.CuentaBancaria_DebitoDirecto, T4.CuentaBancaria_orden, T4.[CuentaBancaria.Proveedor_ProveedorID], T4.[CuentaBancaria.ProveedorSucursal_ProveedorSucursalID])
    FROM (
        SELECT T1.CuentaBancaria_EmpresaID, T1.CuentaBancaria_CuentaBancariaID, T1.CuentaBancaria_NumCuenta, T1.CuentaBancaria_Cbu, T1.CuentaBancaria_Descripcion, T1.CuentaBancaria_Notas, T1.CuentaBancaria_FechaAlta, T1.CuentaBancaria_ComercioID, T1.CuentaBancaria_ClaseCuentaBancariaID, T1.CuentaBancaria_TipoCuentaBancariaID, T1.CuentaBancaria_SucursalBancoID, T1.CuentaBancaria_BancoID, T1.CuentaBancaria_MonedaID, T1.CuentaBancaria_EmiteCheque, T1.CuentaBancaria_CuentaContable, T1.CuentaBancaria_EstadoID, T1.CuentaBancaria_PersonaID, T1.[CuentaBancaria.prov_id], T1.[CuentaBancaria.provsuc_id], T1.CuentaBancaria_DebitoDirecto, T1.CuentaBancaria_orden, T2.[CuentaBancaria.Proveedor_ProveedorID], T3.[CuentaBancaria.ProveedorSucursal_ProveedorSucursalID], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2
        FROM  (
            SELECT 
                T.EmpresaID AS CuentaBancaria_EmpresaID, 
                T.CuentaBancariaID AS CuentaBancaria_CuentaBancariaID, 
                T.NumCuenta AS CuentaBancaria_NumCuenta, 
                T.Cbu AS CuentaBancaria_Cbu, 
                T.Descripcion AS CuentaBancaria_Descripcion, 
                T.Notas AS CuentaBancaria_Notas, 
                T.FechaAlta AS CuentaBancaria_FechaAlta, 
                T.ComercioID AS CuentaBancaria_ComercioID, 
                T.ClaseCuentaBancariaID AS CuentaBancaria_ClaseCuentaBancariaID, 
                T.TipoCuentaBancariaID AS CuentaBancaria_TipoCuentaBancariaID, 
                T.SucursalBancoID AS CuentaBancaria_SucursalBancoID, 
                T.BancoID AS CuentaBancaria_BancoID, 
                T.MonedaID AS CuentaBancaria_MonedaID, 
                T.EmiteCheque AS CuentaBancaria_EmiteCheque, 
                T.CuentaContable AS CuentaBancaria_CuentaContable, 
                T.EstadoID AS CuentaBancaria_EstadoID, 
                T.PersonaID AS CuentaBancaria_PersonaID, 
                T.prov_id AS [CuentaBancaria.prov_id], 
                T.provsuc_id AS [CuentaBancaria.provsuc_id], 
                T.DebitoDirecto AS CuentaBancaria_DebitoDirecto, 
                T.orden AS CuentaBancaria_orden, 
                True AS _from0
            FROM ComercioContext.CuentasBancarias AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.CuentaBancaria_Proveedor_Source).EmpresaID AS CuentaBancaria_EmpresaID, 
                Key(T.CuentaBancaria_Proveedor_Source).CuentaBancariaID AS CuentaBancaria_CuentaBancariaID, 
                Key(T.CuentaBancaria_Proveedor_Target).ProveedorID AS [CuentaBancaria.Proveedor_ProveedorID], 
                True AS _from1
            FROM ComercioContext.CuentaBancaria_Proveedor AS T) AS T2
            ON T1.CuentaBancaria_EmpresaID = T2.CuentaBancaria_EmpresaID AND T1.CuentaBancaria_CuentaBancariaID = T2.CuentaBancaria_CuentaBancariaID
            LEFT OUTER JOIN (
            SELECT 
                Key(T.CuentaBancaria_ProveedorSucursal_Source).EmpresaID AS CuentaBancaria_EmpresaID, 
                Key(T.CuentaBancaria_ProveedorSucursal_Source).CuentaBancariaID AS CuentaBancaria_CuentaBancariaID, 
                Key(T.CuentaBancaria_ProveedorSucursal_Target).ProveedorSucursalID AS [CuentaBancaria.ProveedorSucursal_ProveedorSucursalID], 
                True AS _from2
            FROM ComercioContext.CuentaBancaria_ProveedorSucursal AS T) AS T3
            ON T1.CuentaBancaria_EmpresaID = T3.CuentaBancaria_EmpresaID AND T1.CuentaBancaria_CuentaBancariaID = T3.CuentaBancaria_CuentaBancariaID
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Banco.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Banco
        [CodeFirstDatabaseSchema.Banco](T1.Banco_BancoID, T1.Banco_Nombre, T1.Banco_Descripcion)
    FROM (
        SELECT 
            T.BancoID AS Banco_BancoID, 
            T.Nombre AS Banco_Nombre, 
            T.Descripcion AS Banco_Descripcion, 
            True AS _from0
        FROM ComercioContext.Bancos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Chequera.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Chequera
        [CodeFirstDatabaseSchema.Chequera](T1.Chequera_EmpresaID, T1.Chequera_CuentaBancariaID, T1.Chequera_ChequeraID, T1.Chequera_NumTalonario, T1.Chequera_NumDesde, T1.Chequera_NumHasta, T1.Chequera_NumProx, T1.Chequera_FechaAlta, T1.Chequera_EstadoID)
    FROM (
        SELECT 
            T.EmpresaID AS Chequera_EmpresaID, 
            T.CuentaBancariaID AS Chequera_CuentaBancariaID, 
            T.ChequeraID AS Chequera_ChequeraID, 
            T.NumTalonario AS Chequera_NumTalonario, 
            T.NumDesde AS Chequera_NumDesde, 
            T.NumHasta AS Chequera_NumHasta, 
            T.NumProx AS Chequera_NumProx, 
            T.FechaAlta AS Chequera_FechaAlta, 
            T.EstadoID AS Chequera_EstadoID, 
            True AS _from0
        FROM ComercioContext.Chequera AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Cheque.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Cheque
        [CodeFirstDatabaseSchema.Cheque](T1.Cheque_EmpresaID, T1.Cheque_CuentaBancariaID, T1.Cheque_ChequeraID, T1.Cheque_ChequeID, T1.Cheque_Monto, T1.Cheque_TipoChequeID, T1.Cheque_EstadoID)
    FROM (
        SELECT 
            T.EmpresaID AS Cheque_EmpresaID, 
            T.CuentaBancariaID AS Cheque_CuentaBancariaID, 
            T.ChequeraID AS Cheque_ChequeraID, 
            T.ChequeID AS Cheque_ChequeID, 
            T.Monto AS Cheque_Monto, 
            T.TipoChequeID AS Cheque_TipoChequeID, 
            T.EstadoID AS Cheque_EstadoID, 
            True AS _from0
        FROM ComercioContext.Cheques AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Estado.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Estado
        [CodeFirstDatabaseSchema.Estado](T1.Estado_EstadoID, T1.Estado_Nombre, T1.Estado_Descripcion, T1.Estado_TipoEstadoID, T1.[Estado.est_color])
    FROM (
        SELECT 
            T.EstadoID AS Estado_EstadoID, 
            T.Nombre AS Estado_Nombre, 
            T.Descripcion AS Estado_Descripcion, 
            T.TipoEstadoID AS Estado_TipoEstadoID, 
            T.est_color AS [Estado.est_color], 
            True AS _from0
        FROM ComercioContext.Estados AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TipoEstado.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoEstado
        [CodeFirstDatabaseSchema.TipoEstado](T1.TipoEstado_TipoEstadoID, T1.TipoEstado_Nombre, T1.TipoEstado_Descripcion)
    FROM (
        SELECT 
            T.TipoEstadoID AS TipoEstado_TipoEstadoID, 
            T.Nombre AS TipoEstado_Nombre, 
            T.Descripcion AS TipoEstado_Descripcion, 
            True AS _from0
        FROM ComercioContext.TiposEstados AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TipoCheque.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoCheque
        [CodeFirstDatabaseSchema.TipoCheque](T1.TipoCheque_TipoChequeID, T1.TipoCheque_Nombre, T1.TipoCheque_Descripcion)
    FROM (
        SELECT 
            T.TipoChequeID AS TipoCheque_TipoChequeID, 
            T.Nombre AS TipoCheque_Nombre, 
            T.Descripcion AS TipoCheque_Descripcion, 
            True AS _from0
        FROM ComercioContext.TiposCheques AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ClaseCuentaBancaria.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ClaseCuentaBancaria
        [CodeFirstDatabaseSchema.ClaseCuentaBancaria](T1.ClaseCuentaBancaria_ClaseCuentaBancariaID, T1.ClaseCuentaBancaria_Nombre, T1.ClaseCuentaBancaria_Descripcion)
    FROM (
        SELECT 
            T.ClaseCuentaBancariaID AS ClaseCuentaBancaria_ClaseCuentaBancariaID, 
            T.Nombre AS ClaseCuentaBancaria_Nombre, 
            T.Descripcion AS ClaseCuentaBancaria_Descripcion, 
            True AS _from0
        FROM ComercioContext.ClaseCuentasBancarias AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Moneda.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Moneda
        [CodeFirstDatabaseSchema.Moneda](T1.Moneda_MonedaID, T1.Moneda_Nombre, T1.Moneda_Descripcion, T1.Moneda_PaisId, T1.[Moneda.mon_simbolo])
    FROM (
        SELECT 
            T.MonedaID AS Moneda_MonedaID, 
            T.Nombre AS Moneda_Nombre, 
            T.Descripcion AS Moneda_Descripcion, 
            T.PaisId AS Moneda_PaisId, 
            T.mon_simbolo AS [Moneda.mon_simbolo], 
            True AS _from0
        FROM ComercioContext.Monedas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Proveedor.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Proveedor
        [CodeFirstDatabaseSchema.Proveedor](T1.Proveedor_ProveedorID, T1.Proveedor_ProveedorIDRemoto, T1.Proveedor_NombreFantasia, T1.Proveedor_RazonSocial, T1.Proveedor_Cuit, T1.Proveedor_IngresosBrutos, T1.Proveedor_Domicilio, T1.Proveedor_Telefono1, T1.Proveedor_Telefono2, T1.Proveedor_Descripcion, T1.Proveedor_LocalidadID, T1.Proveedor_ProvinciaID, T1.Proveedor_PaisId, T1.Proveedor_Cp, T1.Proveedor_Fax, T1.Proveedor_Mail1, T1.Proveedor_Mail2, T1.Proveedor_Mail3, T1.Proveedor_Web1, T1.Proveedor_Web2, T1.Proveedor_Tel3, T1.Proveedor_Web3, T1.Proveedor_CodigoContable, T1.Proveedor_EstadoID, T1.Proveedor_CondIva, T1.Proveedor_FechaAlta)
    FROM (
        SELECT 
            T.ProveedorID AS Proveedor_ProveedorID, 
            T.ProveedorIDRemoto AS Proveedor_ProveedorIDRemoto, 
            T.NombreFantasia AS Proveedor_NombreFantasia, 
            T.RazonSocial AS Proveedor_RazonSocial, 
            T.Cuit AS Proveedor_Cuit, 
            T.IngresosBrutos AS Proveedor_IngresosBrutos, 
            T.Domicilio AS Proveedor_Domicilio, 
            T.Telefono1 AS Proveedor_Telefono1, 
            T.Telefono2 AS Proveedor_Telefono2, 
            T.Descripcion AS Proveedor_Descripcion, 
            T.LocalidadID AS Proveedor_LocalidadID, 
            T.ProvinciaID AS Proveedor_ProvinciaID, 
            T.PaisId AS Proveedor_PaisId, 
            T.Cp AS Proveedor_Cp, 
            T.Fax AS Proveedor_Fax, 
            T.Mail1 AS Proveedor_Mail1, 
            T.Mail2 AS Proveedor_Mail2, 
            T.Mail3 AS Proveedor_Mail3, 
            T.Web1 AS Proveedor_Web1, 
            T.Web2 AS Proveedor_Web2, 
            T.Tel3 AS Proveedor_Tel3, 
            T.Web3 AS Proveedor_Web3, 
            T.CodigoContable AS Proveedor_CodigoContable, 
            T.EstadoID AS Proveedor_EstadoID, 
            T.CondIva AS Proveedor_CondIva, 
            T.FechaAlta AS Proveedor_FechaAlta, 
            True AS _from0
        FROM ComercioContext.Proveedores AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConceptoGastosProveedor.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConceptoGastosProveedor
        [CodeFirstDatabaseSchema.ConceptoGastosProveedor](T1.ConceptoGastosProveedor_ConceptoGastosProveedorID, T1.ConceptoGastosProveedor_ConceptoGastosID, T1.ConceptoGastosProveedor_ProveedorID, T1.ConceptoGastosProveedor_ProveedorSucursalID, T1.ConceptoGastosProveedor_Periodicidad, T1.ConceptoGastosProveedor_EstadoID)
    FROM (
        SELECT 
            T.ConceptoGastosProveedorID AS ConceptoGastosProveedor_ConceptoGastosProveedorID, 
            T.ConceptoGastosID AS ConceptoGastosProveedor_ConceptoGastosID, 
            T.ProveedorID AS ConceptoGastosProveedor_ProveedorID, 
            T.ProveedorSucursalID AS ConceptoGastosProveedor_ProveedorSucursalID, 
            T.Periodicidad AS ConceptoGastosProveedor_Periodicidad, 
            T.EstadoID AS ConceptoGastosProveedor_EstadoID, 
            True AS _from0
        FROM ComercioContext.ConceptoGastoProveedores AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConceptoGastos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConceptoGastos
        [CodeFirstDatabaseSchema.ConceptoGastos](T1.ConceptoGastos_ConceptoGastosID, T1.ConceptoGastos_ConceptoGastosIDRemoto, T1.ConceptoGastos_Nombre, T1.ConceptoGastos_Descripcion, T1.ConceptoGastos_EstadoID, T1.ConceptoGastos_Nivel, T1.ConceptoGastos_NivelFinal, T1.ConceptoGastos_ConceptoGastoPadreID)
    FROM (
        SELECT 
            T.ConceptoGastosID AS ConceptoGastos_ConceptoGastosID, 
            T.ConceptoGastosIDRemoto AS ConceptoGastos_ConceptoGastosIDRemoto, 
            T.Nombre AS ConceptoGastos_Nombre, 
            T.Descripcion AS ConceptoGastos_Descripcion, 
            T.EstadoID AS ConceptoGastos_EstadoID, 
            T.Nivel AS ConceptoGastos_Nivel, 
            T.NivelFinal AS ConceptoGastos_NivelFinal, 
            T.ConceptoGastoPadreID AS ConceptoGastos_ConceptoGastoPadreID, 
            True AS _from0
        FROM ComercioContext.ConceptoGastos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ProveedorSucursal.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProveedorSucursal
        [CodeFirstDatabaseSchema.ProveedorSucursal](T1.ProveedorSucursal_ProveedorSucursalID, T1.ProveedorSucursal_ProveedorID, T1.ProveedorSucursal_ProveedorSucursalIDRemoto, T1.ProveedorSucursal_Nombre, T1.ProveedorSucursal_Descripcion, T1.ProveedorSucursal_Domicilio, T1.ProveedorSucursal_LocalidadID, T1.ProveedorSucursal_ProvinciaID, T1.ProveedorSucursal_PaisID, T1.ProveedorSucursal_Telefono1, T1.ProveedorSucursal_Telefono2, T1.ProveedorSucursal_Telefono3, T1.ProveedorSucursal_Mail1, T1.ProveedorSucursal_Mail2, T1.ProveedorSucursal_Mail3, T1.ProveedorSucursal_Fax, T1.ProveedorSucursal_Web2, T1.ProveedorSucursal_Web1, T1.ProveedorSucursal_Web3, T1.ProveedorSucursal_Cp, T1.ProveedorSucursal_EstadoID)
    FROM (
        SELECT 
            T.ProveedorSucursalID AS ProveedorSucursal_ProveedorSucursalID, 
            T.ProveedorID AS ProveedorSucursal_ProveedorID, 
            T.ProveedorSucursalIDRemoto AS ProveedorSucursal_ProveedorSucursalIDRemoto, 
            T.Nombre AS ProveedorSucursal_Nombre, 
            T.Descripcion AS ProveedorSucursal_Descripcion, 
            T.Domicilio AS ProveedorSucursal_Domicilio, 
            T.LocalidadID AS ProveedorSucursal_LocalidadID, 
            T.ProvinciaID AS ProveedorSucursal_ProvinciaID, 
            T.PaisID AS ProveedorSucursal_PaisID, 
            T.Telefono1 AS ProveedorSucursal_Telefono1, 
            T.Telefono2 AS ProveedorSucursal_Telefono2, 
            T.Telefono3 AS ProveedorSucursal_Telefono3, 
            T.Mail1 AS ProveedorSucursal_Mail1, 
            T.Mail2 AS ProveedorSucursal_Mail2, 
            T.Mail3 AS ProveedorSucursal_Mail3, 
            T.Fax AS ProveedorSucursal_Fax, 
            T.Web2 AS ProveedorSucursal_Web2, 
            T.Web1 AS ProveedorSucursal_Web1, 
            T.Web3 AS ProveedorSucursal_Web3, 
            T.Cp AS ProveedorSucursal_Cp, 
            T.EstadoID AS ProveedorSucursal_EstadoID, 
            True AS _from0
        FROM ComercioContext.ProveedoresSucursales AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.SucursalBanco.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SucursalBanco
        [CodeFirstDatabaseSchema.SucursalBanco](T1.SucursalBanco_BancoID, T1.SucursalBanco_SucursalBancoID, T1.SucursalBanco_Nombre, T1.SucursalBanco_Descripcion, T1.SucursalBanco_Domicilio, T1.SucursalBanco_Numsuc, T1.SucursalBanco_LocalidadID, T1.SucursalBanco_ProvinciaID, T1.SucursalBanco_PaisId)
    FROM (
        SELECT 
            T.BancoID AS SucursalBanco_BancoID, 
            T.SucursalBancoID AS SucursalBanco_SucursalBancoID, 
            T.Nombre AS SucursalBanco_Nombre, 
            T.Descripcion AS SucursalBanco_Descripcion, 
            T.Domicilio AS SucursalBanco_Domicilio, 
            T.Numsuc AS SucursalBanco_Numsuc, 
            T.LocalidadID AS SucursalBanco_LocalidadID, 
            T.ProvinciaID AS SucursalBanco_ProvinciaID, 
            T.PaisId AS SucursalBanco_PaisId, 
            True AS _from0
        FROM ComercioContext.SucursalesBancos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TipoCuentaBancaria.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoCuentaBancaria
        [CodeFirstDatabaseSchema.TipoCuentaBancaria](T1.TipoCuentaBancaria_TipoCuentaBancariaID, T1.TipoCuentaBancaria_Nombre, T1.TipoCuentaBancaria_Descripcion)
    FROM (
        SELECT 
            T.TipoCuentaBancariaID AS TipoCuentaBancaria_TipoCuentaBancariaID, 
            T.Nombre AS TipoCuentaBancaria_Nombre, 
            T.Descripcion AS TipoCuentaBancaria_Descripcion, 
            True AS _from0
        FROM ComercioContext.TiposCuentasBancarias AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TipoComercio.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoComercio
        [CodeFirstDatabaseSchema.TipoComercio](T1.TipoComercio_TipoComercioID, T1.TipoComercio_Nombre, T1.TipoComercio_Descripcion)
    FROM (
        SELECT 
            T.TipoComercioID AS TipoComercio_TipoComercioID, 
            T.Nombre AS TipoComercio_Nombre, 
            T.Descripcion AS TipoComercio_Descripcion, 
            True AS _from0
        FROM ComercioContext.TiposComercios AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.AvisoDePago.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AvisoDePago
        [CodeFirstDatabaseSchema.AvisoDePago](T1.AvisoDePago_EmpresaID, T1.AvisoDePago_ComercioID, T1.AvisoDePago_AvisoDePagoID, T1.AvisoDePago_FechaPagoAviso, T1.AvisoDePago_Importe, T1.AvisoDePago_Retencion, T1.AvisoDePago_Comision, T1.AvisoDePago_Total, T1.AvisoDePago_Pagado, T1.AvisoDePago_FechaPagado, T1.AvisoDePago_CantSolicitudes, T1.AvisoDePago_FechaActualizacion, T1.AvisoDePago_Notas)
    FROM (
        SELECT 
            T.EmpresaID AS AvisoDePago_EmpresaID, 
            T.ComercioID AS AvisoDePago_ComercioID, 
            T.AvisoDePagoID AS AvisoDePago_AvisoDePagoID, 
            T.FechaPagoAviso AS AvisoDePago_FechaPagoAviso, 
            T.Importe AS AvisoDePago_Importe, 
            T.Retencion AS AvisoDePago_Retencion, 
            T.Comision AS AvisoDePago_Comision, 
            T.Total AS AvisoDePago_Total, 
            T.Pagado AS AvisoDePago_Pagado, 
            T.FechaPagado AS AvisoDePago_FechaPagado, 
            T.CantSolicitudes AS AvisoDePago_CantSolicitudes, 
            T.FechaActualizacion AS AvisoDePago_FechaActualizacion, 
            T.Notas AS AvisoDePago_Notas, 
            True AS _from0
        FROM ComercioContext.AvisoDePago AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Credito.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Credito
        [CodeFirstDatabaseSchema.Credito](T1.Credito_EmpresaID, T1.Credito_ComercioID, T1.Credito_CreditoID, T1.Credito_Documento, T1.Credito_TipoDocumentoID, T1.Credito_ValorNominal, T1.Credito_ValorCuota, T1.Credito_FechaSolicitud, T1.Credito_Total, T1.Credito_AdelantadaGastos, T1.Credito_Interes, T1.Credito_Gasto, T1.Credito_Comision, T1.Credito_Cancelado, T1.Credito_Garante1, T1.Credito_TipoDocumentoIDG1, T1.Credito_Garante2, T1.Credito_TipoDocumentoIDG2, T1.Credito_Garante3, T1.Credito_TipoDocumentoIDG3, T1.Credito_Adicional, T1.Credito_TipoDocumentoIDAdi, T1.Credito_Avalado, T1.Credito_usuarioAvalID, T1.Credito_UsuarioAvalAnt, T1.Credito_TipoCuotaID, T1.Credito_CantidadCuotas, T1.Credito_NroInformeContel, T1.Credito_AbogadoID, T1.Credito_FechaAbogado, T1.Credito_UsuarioID, T1.Credito_UsuarioAnt, T1.Credito_PcComer, T1.Credito_FechaComer, T1.Credito_TipoBonificacionID, T1.Credito_PorcentajeBonificacion, T1.Credito_ValorBonificacion, T1.Credito_TasaPlan, T1.Credito_IncrementoPlan, T1.Credito_GastoPlan, T1.Credito_GastoIncrementoPlan, T1.Credito_GastoFijo, T1.Credito_ComisionPlan, T1.Credito_ComisionIncrementoPlan, T1.Credito_TipoRetencionPlanID, T1.Credito_NombrePlan, T1.Credito_Puntaje, T1.Credito_DiasVenciPrimerCuota, T1.Credito_RefinanciacionID, T1.Credito_AvisoDePagoID, T1.Credito_Corte, T1.Credito_FechaAviso, T1.Credito_NumCuentaBancaria, T1.Credito_FechaDesdeDebito)
    FROM (
        SELECT 
            T.EmpresaID AS Credito_EmpresaID, 
            T.ComercioID AS Credito_ComercioID, 
            T.CreditoID AS Credito_CreditoID, 
            T.Documento AS Credito_Documento, 
            T.TipoDocumentoID AS Credito_TipoDocumentoID, 
            T.ValorNominal AS Credito_ValorNominal, 
            T.ValorCuota AS Credito_ValorCuota, 
            T.FechaSolicitud AS Credito_FechaSolicitud, 
            T.Total AS Credito_Total, 
            T.AdelantadaGastos AS Credito_AdelantadaGastos, 
            T.Interes AS Credito_Interes, 
            T.Gasto AS Credito_Gasto, 
            T.Comision AS Credito_Comision, 
            T.Cancelado AS Credito_Cancelado, 
            T.Garante1 AS Credito_Garante1, 
            T.TipoDocumentoIDG1 AS Credito_TipoDocumentoIDG1, 
            T.Garante2 AS Credito_Garante2, 
            T.TipoDocumentoIDG2 AS Credito_TipoDocumentoIDG2, 
            T.Garante3 AS Credito_Garante3, 
            T.TipoDocumentoIDG3 AS Credito_TipoDocumentoIDG3, 
            T.Adicional AS Credito_Adicional, 
            T.TipoDocumentoIDAdi AS Credito_TipoDocumentoIDAdi, 
            T.Avalado AS Credito_Avalado, 
            T.usuarioAvalID AS Credito_usuarioAvalID, 
            T.UsuarioAvalAnt AS Credito_UsuarioAvalAnt, 
            T.TipoCuotaID AS Credito_TipoCuotaID, 
            T.CantidadCuotas AS Credito_CantidadCuotas, 
            T.NroInformeContel AS Credito_NroInformeContel, 
            T.AbogadoID AS Credito_AbogadoID, 
            T.FechaAbogado AS Credito_FechaAbogado, 
            T.UsuarioID AS Credito_UsuarioID, 
            T.UsuarioAnt AS Credito_UsuarioAnt, 
            T.PcComer AS Credito_PcComer, 
            T.FechaComer AS Credito_FechaComer, 
            T.TipoBonificacionID AS Credito_TipoBonificacionID, 
            T.PorcentajeBonificacion AS Credito_PorcentajeBonificacion, 
            T.ValorBonificacion AS Credito_ValorBonificacion, 
            T.TasaPlan AS Credito_TasaPlan, 
            T.IncrementoPlan AS Credito_IncrementoPlan, 
            T.GastoPlan AS Credito_GastoPlan, 
            T.GastoIncrementoPlan AS Credito_GastoIncrementoPlan, 
            T.GastoFijo AS Credito_GastoFijo, 
            T.ComisionPlan AS Credito_ComisionPlan, 
            T.ComisionIncrementoPlan AS Credito_ComisionIncrementoPlan, 
            T.TipoRetencionPlanID AS Credito_TipoRetencionPlanID, 
            T.NombrePlan AS Credito_NombrePlan, 
            T.Puntaje AS Credito_Puntaje, 
            T.DiasVenciPrimerCuota AS Credito_DiasVenciPrimerCuota, 
            T.RefinanciacionID AS Credito_RefinanciacionID, 
            T.AvisoDePagoID AS Credito_AvisoDePagoID, 
            T.Corte AS Credito_Corte, 
            T.FechaAviso AS Credito_FechaAviso, 
            T.NumCuentaBancaria AS Credito_NumCuentaBancaria, 
            T.FechaDesdeDebito AS Credito_FechaDesdeDebito, 
            True AS _from0
        FROM ComercioContext.Creditos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Cliente.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Cliente
        [CodeFirstDatabaseSchema.Cliente](T1.Cliente_Documento, T1.Cliente_TipoDocumentoID, T1.Cliente_Nombre, T1.Cliente_Apellido, T1.Cliente_ProfesionID, T1.Cliente_EmpresaLaboral, T1.Cliente_Sueldo, T1.Cliente_Legajo, T1.Cliente_FechaNacimiento, T1.Cliente_SexoID, T1.Cliente_FechaAlta, T1.Cliente_TipoComoConocioID, T1.Cliente_Puntaje, T1.Cliente_Tarjeta, T1.Cliente_FechaAltaTarjeta, T1.Cliente_FechaVencimientoTarjeta, T1.Cliente_FechaModificacion, T1.Cliente_UsuarioModificacionID, T1.Cliente_EstadoID, T1.Cliente_Zona, T1.Cliente_Cod1, T1.Cliente_Cod2, T1.Cliente_Cuit, T1.Cliente_NombreCompleto)
    FROM (
        SELECT 
            T.Documento AS Cliente_Documento, 
            T.TipoDocumentoID AS Cliente_TipoDocumentoID, 
            T.Nombre AS Cliente_Nombre, 
            T.Apellido AS Cliente_Apellido, 
            T.ProfesionID AS Cliente_ProfesionID, 
            T.EmpresaLaboral AS Cliente_EmpresaLaboral, 
            T.Sueldo AS Cliente_Sueldo, 
            T.Legajo AS Cliente_Legajo, 
            T.FechaNacimiento AS Cliente_FechaNacimiento, 
            T.SexoID AS Cliente_SexoID, 
            T.FechaAlta AS Cliente_FechaAlta, 
            T.TipoComoConocioID AS Cliente_TipoComoConocioID, 
            T.Puntaje AS Cliente_Puntaje, 
            T.Tarjeta AS Cliente_Tarjeta, 
            T.FechaAltaTarjeta AS Cliente_FechaAltaTarjeta, 
            T.FechaVencimientoTarjeta AS Cliente_FechaVencimientoTarjeta, 
            T.FechaModificacion AS Cliente_FechaModificacion, 
            T.UsuarioModificacionID AS Cliente_UsuarioModificacionID, 
            T.EstadoID AS Cliente_EstadoID, 
            T.Zona AS Cliente_Zona, 
            T.Cod1 AS Cliente_Cod1, 
            T.Cod2 AS Cliente_Cod2, 
            T.Cuit AS Cliente_Cuit, 
            T.NombreCompleto AS Cliente_NombreCompleto, 
            True AS _from0
        FROM ComercioContext.Clientes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.CuentaBancariaCliente.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CuentaBancariaCliente
        [CodeFirstDatabaseSchema.CuentaBancariaCliente](T1.CuentaBancariaCliente_Documento, T1.CuentaBancariaCliente_TipoDocumentoID, T1.CuentaBancariaCliente_NumCuentaBancaria, T1.CuentaBancariaCliente_CBU, T1.CuentaBancariaCliente_Alias, T1.CuentaBancariaCliente_Descripcion, T1.CuentaBancariaCliente_Notas, T1.CuentaBancariaCliente_FechaAlta, T1.CuentaBancariaCliente_SucursalBancoID, T1.CuentaBancariaCliente_BancoID, T1.CuentaBancariaCliente_MonedaID, T1.CuentaBancariaCliente_EstadoID, T1.CuentaBancariaCliente_sCuentaBancaria)
    FROM (
        SELECT 
            T.Documento AS CuentaBancariaCliente_Documento, 
            T.TipoDocumentoID AS CuentaBancariaCliente_TipoDocumentoID, 
            T.NumCuentaBancaria AS CuentaBancariaCliente_NumCuentaBancaria, 
            T.CBU AS CuentaBancariaCliente_CBU, 
            T.Alias AS CuentaBancariaCliente_Alias, 
            T.Descripcion AS CuentaBancariaCliente_Descripcion, 
            T.Notas AS CuentaBancariaCliente_Notas, 
            T.FechaAlta AS CuentaBancariaCliente_FechaAlta, 
            T.SucursalBancoID AS CuentaBancariaCliente_SucursalBancoID, 
            T.BancoID AS CuentaBancariaCliente_BancoID, 
            T.MonedaID AS CuentaBancariaCliente_MonedaID, 
            T.EstadoID AS CuentaBancariaCliente_EstadoID, 
            T.sCuentaBancaria AS CuentaBancariaCliente_sCuentaBancaria, 
            True AS _from0
        FROM ComercioContext.CuentaBancariaCliente AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Domicilio.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Domicilio
        [CodeFirstDatabaseSchema.Domicilio](T1.Domicilio_DomicilioID, T1.Domicilio_Direccion, T1.Domicilio_Numero, T1.Domicilio_Piso, T1.Domicilio_Departamento, T1.Domicilio_Complemento, T1.Domicilio_NotasDomicilio, T1.Domicilio_LocalidadID, T1.Domicilio_ProvinciaID, T1.Domicilio_PaisId, T1.Domicilio_ClaseDatoID, T1.Domicilio_EstadoID, T1.Domicilio_EmpresaID, T1.Domicilio_ComercioID, T1.Domicilio_Documento, T1.Domicilio_TipoDocumentoID, T1.Domicilio_Fecha, T1.Domicilio_UsuarioID, T1.Domicilio_PcComer, T1.Domicilio_DomicilioCompleto)
    FROM (
        SELECT 
            T.DomicilioID AS Domicilio_DomicilioID, 
            T.Direccion AS Domicilio_Direccion, 
            T.Numero AS Domicilio_Numero, 
            T.Piso AS Domicilio_Piso, 
            T.Departamento AS Domicilio_Departamento, 
            T.Complemento AS Domicilio_Complemento, 
            T.NotasDomicilio AS Domicilio_NotasDomicilio, 
            T.LocalidadID AS Domicilio_LocalidadID, 
            T.ProvinciaID AS Domicilio_ProvinciaID, 
            T.PaisId AS Domicilio_PaisId, 
            T.ClaseDatoID AS Domicilio_ClaseDatoID, 
            T.EstadoID AS Domicilio_EstadoID, 
            T.EmpresaID AS Domicilio_EmpresaID, 
            T.ComercioID AS Domicilio_ComercioID, 
            T.Documento AS Domicilio_Documento, 
            T.TipoDocumentoID AS Domicilio_TipoDocumentoID, 
            T.Fecha AS Domicilio_Fecha, 
            T.UsuarioID AS Domicilio_UsuarioID, 
            T.PcComer AS Domicilio_PcComer, 
            T.DomicilioCompleto AS Domicilio_DomicilioCompleto, 
            True AS _from0
        FROM ComercioContext.Domicilios AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ClaseDato.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ClaseDato
        [CodeFirstDatabaseSchema.ClaseDato](T1.ClaseDato_ClaseDatoID, T1.ClaseDato_Nombre, T1.ClaseDato_Descripcion)
    FROM (
        SELECT 
            T.ClaseDatoID AS ClaseDato_ClaseDatoID, 
            T.Nombre AS ClaseDato_Nombre, 
            T.Descripcion AS ClaseDato_Descripcion, 
            True AS _from0
        FROM ComercioContext.ClasesDato AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Usuario.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Usuario
        [CodeFirstDatabaseSchema.Usuario](T1.Usuario_UsuarioID, T1.Usuario_usuario, T1.Usuario_nombre, T1.Usuario_apellido, T1.Usuario_pass, T1.Usuario_creacion, T1.Usuario_activo)
    FROM (
        SELECT 
            T.UsuarioID AS Usuario_UsuarioID, 
            T.usuario AS Usuario_usuario, 
            T.nombre AS Usuario_nombre, 
            T.apellido AS Usuario_apellido, 
            T.pass AS Usuario_pass, 
            T.creacion AS Usuario_creacion, 
            T.activo AS Usuario_activo, 
            True AS _from0
        FROM ComercioContext.Usuarios AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Perfil.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Perfil
        [CodeFirstDatabaseSchema.Perfil](T1.Perfil_PerfilID, T1.Perfil_nombre, T1.Perfil_descripcion, T1.Perfil_creacion, T1.Perfil_activo)
    FROM (
        SELECT 
            T.PerfilID AS Perfil_PerfilID, 
            T.nombre AS Perfil_nombre, 
            T.descripcion AS Perfil_descripcion, 
            T.creacion AS Perfil_creacion, 
            T.activo AS Perfil_activo, 
            True AS _from0
        FROM ComercioContext.Perfiles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Permiso.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Permiso
        [CodeFirstDatabaseSchema.Permiso](T1.Permiso_PermisoID, T1.Permiso_nombre, T1.Permiso_descripcion, T1.Permiso_creacion, T1.Permiso_activo)
    FROM (
        SELECT 
            T.PermisoID AS Permiso_PermisoID, 
            T.nombre AS Permiso_nombre, 
            T.descripcion AS Permiso_descripcion, 
            T.creacion AS Permiso_creacion, 
            T.activo AS Permiso_activo, 
            True AS _from0
        FROM ComercioContext.Permisos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Mail.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Mail
        [CodeFirstDatabaseSchema.Mail](T1.Mail_MailID, T1.Mail_Direccion, T1.Mail_ClaseDatoID, T1.Mail_EstadoID, T1.Mail_Documento, T1.Mail_TipoDocumentoID, T1.Mail_EmpresaID, T1.Mail_ComercioID, T1.Mail_Fecha, T1.Mail_Nota, T1.Mail_UsuarioID, T1.Mail_PcComer)
    FROM (
        SELECT 
            T.MailID AS Mail_MailID, 
            T.Direccion AS Mail_Direccion, 
            T.ClaseDatoID AS Mail_ClaseDatoID, 
            T.EstadoID AS Mail_EstadoID, 
            T.Documento AS Mail_Documento, 
            T.TipoDocumentoID AS Mail_TipoDocumentoID, 
            T.EmpresaID AS Mail_EmpresaID, 
            T.ComercioID AS Mail_ComercioID, 
            T.Fecha AS Mail_Fecha, 
            T.Nota AS Mail_Nota, 
            T.UsuarioID AS Mail_UsuarioID, 
            T.PcComer AS Mail_PcComer, 
            True AS _from0
        FROM ComercioContext.Mails AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Nota.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView34()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Nota
        [CodeFirstDatabaseSchema.Nota](T1.Nota_NotaID, T1.Nota_EmpresaID, T1.Nota_Documento, T1.Nota_TipoDocumentoID, T1.Nota_ComercioID, T1.Nota_CreditoID, T1.Nota_CuotaID, T1.Nota_CobranzaID, T1.Nota_Detalle, T1.Nota_UsuarioID, T1.Nota_Fecha)
    FROM (
        SELECT 
            T.NotaID AS Nota_NotaID, 
            T.EmpresaID AS Nota_EmpresaID, 
            T.Documento AS Nota_Documento, 
            T.TipoDocumentoID AS Nota_TipoDocumentoID, 
            T.ComercioID AS Nota_ComercioID, 
            T.CreditoID AS Nota_CreditoID, 
            T.CuotaID AS Nota_CuotaID, 
            T.CobranzaID AS Nota_CobranzaID, 
            T.Detalle AS Nota_Detalle, 
            T.UsuarioID AS Nota_UsuarioID, 
            T.Fecha AS Nota_Fecha, 
            True AS _from0
        FROM ComercioContext.Nota AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Profesion.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView35()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Profesion
        [CodeFirstDatabaseSchema.Profesion](T1.Profesion_ProfesionID, T1.Profesion_Nombre, T1.Profesion_ProfesionPadreID)
    FROM (
        SELECT 
            T.ProfesionID AS Profesion_ProfesionID, 
            T.Nombre AS Profesion_Nombre, 
            T.ProfesionPadreID AS Profesion_ProfesionPadreID, 
            True AS _from0
        FROM ComercioContext.Profesiones AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Refinanciacion.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView36()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Refinanciacion
        [CodeFirstDatabaseSchema.Refinanciacion](T1.Refinanciacion_EmpresaID, T1.Refinanciacion_ComercioID, T1.Refinanciacion_CreditoID, T1.Refinanciacion_RefinanciacionID, T1.Refinanciacion_Documento, T1.Refinanciacion_TipoDocumentoID, T1.Refinanciacion_ValorNominal, T1.Refinanciacion_ValorCuota, T1.Refinanciacion_ValorAdelanto, T1.Refinanciacion_FechaSolicitud, T1.Refinanciacion_Interes, T1.Refinanciacion_CantidadCuotas, T1.Refinanciacion_UsuarioID, T1.Refinanciacion_PcComer, T1.Refinanciacion_FechaComerAnula, T1.Refinanciacion_EstadoID, T1.Refinanciacion_FechaCreacion)
    FROM (
        SELECT 
            T.EmpresaID AS Refinanciacion_EmpresaID, 
            T.ComercioID AS Refinanciacion_ComercioID, 
            T.CreditoID AS Refinanciacion_CreditoID, 
            T.RefinanciacionID AS Refinanciacion_RefinanciacionID, 
            T.Documento AS Refinanciacion_Documento, 
            T.TipoDocumentoID AS Refinanciacion_TipoDocumentoID, 
            T.ValorNominal AS Refinanciacion_ValorNominal, 
            T.ValorCuota AS Refinanciacion_ValorCuota, 
            T.ValorAdelanto AS Refinanciacion_ValorAdelanto, 
            T.FechaSolicitud AS Refinanciacion_FechaSolicitud, 
            T.Interes AS Refinanciacion_Interes, 
            T.CantidadCuotas AS Refinanciacion_CantidadCuotas, 
            T.UsuarioID AS Refinanciacion_UsuarioID, 
            T.PcComer AS Refinanciacion_PcComer, 
            T.FechaComerAnula AS Refinanciacion_FechaComerAnula, 
            T.EstadoID AS Refinanciacion_EstadoID, 
            T.FechaCreacion AS Refinanciacion_FechaCreacion, 
            True AS _from0
        FROM ComercioContext.Refinanciaciones AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.RefinanciacionCuota.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView37()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RefinanciacionCuota
        [CodeFirstDatabaseSchema.RefinanciacionCuota](T1.RefinanciacionCuota_EmpresaID, T1.RefinanciacionCuota_ComercioID, T1.RefinanciacionCuota_CreditoID, T1.RefinanciacionCuota_RefinanciacionID, T1.RefinanciacionCuota_RefinanciacionCuotaID, T1.RefinanciacionCuota_Documento, T1.RefinanciacionCuota_TipoDocumentoID, T1.RefinanciacionCuota_CantidadCuotas, T1.RefinanciacionCuota_Importe, T1.RefinanciacionCuota_ImportePago, T1.RefinanciacionCuota_ImportePagoPunitorios, T1.RefinanciacionCuota_FechaVencimiento, T1.RefinanciacionCuota_FechaUltimoPago, T1.RefinanciacionCuota_Deuda)
    FROM (
        SELECT 
            T.EmpresaID AS RefinanciacionCuota_EmpresaID, 
            T.ComercioID AS RefinanciacionCuota_ComercioID, 
            T.CreditoID AS RefinanciacionCuota_CreditoID, 
            T.RefinanciacionID AS RefinanciacionCuota_RefinanciacionID, 
            T.RefinanciacionCuotaID AS RefinanciacionCuota_RefinanciacionCuotaID, 
            T.Documento AS RefinanciacionCuota_Documento, 
            T.TipoDocumentoID AS RefinanciacionCuota_TipoDocumentoID, 
            T.CantidadCuotas AS RefinanciacionCuota_CantidadCuotas, 
            T.Importe AS RefinanciacionCuota_Importe, 
            T.ImportePago AS RefinanciacionCuota_ImportePago, 
            T.ImportePagoPunitorios AS RefinanciacionCuota_ImportePagoPunitorios, 
            T.FechaVencimiento AS RefinanciacionCuota_FechaVencimiento, 
            T.FechaUltimoPago AS RefinanciacionCuota_FechaUltimoPago, 
            T.Deuda AS RefinanciacionCuota_Deuda, 
            True AS _from0
        FROM ComercioContext.RefinanciacionCuotas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.RefinanciacionCobranza.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView38()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RefinanciacionCobranza
        [CodeFirstDatabaseSchema.RefinanciacionCobranza](T1.RefinanciacionCobranza_EmpresaID, T1.RefinanciacionCobranza_ComercioID, T1.RefinanciacionCobranza_CreditoID, T1.RefinanciacionCobranza_RefinanciacionID, T1.RefinanciacionCobranza_RefinanciacionCuotaID, T1.RefinanciacionCobranza_RefinanciacionCobranzaID, T1.RefinanciacionCobranza_Documento, T1.RefinanciacionCobranza_TipoDocumentoID, T1.RefinanciacionCobranza_ImportePago, T1.RefinanciacionCobranza_ImportePagoPunitorios, T1.RefinanciacionCobranza_PunitoriosCalc, T1.RefinanciacionCobranza_FechaPago, T1.RefinanciacionCobranza_FechaVencimiento, T1.RefinanciacionCobranza_TipoPagoID, T1.RefinanciacionCobranza_PagoRev, T1.RefinanciacionCobranza_FechaRev, T1.RefinanciacionCobranza_RefinanciacionCobranzaIDRev, T1.RefinanciacionCobranza_GestionID)
    FROM (
        SELECT 
            T.EmpresaID AS RefinanciacionCobranza_EmpresaID, 
            T.ComercioID AS RefinanciacionCobranza_ComercioID, 
            T.CreditoID AS RefinanciacionCobranza_CreditoID, 
            T.RefinanciacionID AS RefinanciacionCobranza_RefinanciacionID, 
            T.RefinanciacionCuotaID AS RefinanciacionCobranza_RefinanciacionCuotaID, 
            T.RefinanciacionCobranzaID AS RefinanciacionCobranza_RefinanciacionCobranzaID, 
            T.Documento AS RefinanciacionCobranza_Documento, 
            T.TipoDocumentoID AS RefinanciacionCobranza_TipoDocumentoID, 
            T.ImportePago AS RefinanciacionCobranza_ImportePago, 
            T.ImportePagoPunitorios AS RefinanciacionCobranza_ImportePagoPunitorios, 
            T.PunitoriosCalc AS RefinanciacionCobranza_PunitoriosCalc, 
            T.FechaPago AS RefinanciacionCobranza_FechaPago, 
            T.FechaVencimiento AS RefinanciacionCobranza_FechaVencimiento, 
            T.TipoPagoID AS RefinanciacionCobranza_TipoPagoID, 
            T.PagoRev AS RefinanciacionCobranza_PagoRev, 
            T.FechaRev AS RefinanciacionCobranza_FechaRev, 
            T.RefinanciacionCobranzaIDRev AS RefinanciacionCobranza_RefinanciacionCobranzaIDRev, 
            T.GestionID AS RefinanciacionCobranza_GestionID, 
            True AS _from0
        FROM ComercioContext.RefinanciacionCobranzas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TipoPago.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView39()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoPago
        [CodeFirstDatabaseSchema.TipoPago](T1.TipoPago_TipoPagoID, T1.TipoPago_Nombre, T1.TipoPago_Descripcion)
    FROM (
        SELECT 
            T.TipoPagoID AS TipoPago_TipoPagoID, 
            T.Nombre AS TipoPago_Nombre, 
            T.Descripcion AS TipoPago_Descripcion, 
            True AS _from0
        FROM ComercioContext.TipoPago AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Sexo.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView40()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Sexo
        [CodeFirstDatabaseSchema.Sexo](T1.Sexo_SexoID, T1.Sexo_Nombre, T1.Sexo_Descripcion)
    FROM (
        SELECT 
            T.SexoID AS Sexo_SexoID, 
            T.Nombre AS Sexo_Nombre, 
            T.Descripcion AS Sexo_Descripcion, 
            True AS _from0
        FROM ComercioContext.Sexos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Telefono.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView41()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Telefono
        [CodeFirstDatabaseSchema.Telefono](T1.Telefono_TelefonoID, T1.Telefono_CodArea, T1.Telefono_Numero, T1.Telefono_esCelular, T1.Telefono_EstadoID, T1.Telefono_ClaseDatoID, T1.Telefono_Documento, T1.Telefono_TipoDocumentoID, T1.Telefono_EmpresaID, T1.Telefono_ComercioID, T1.Telefono_Fecha, T1.Telefono_Nota, T1.Telefono_UsuarioID, T1.Telefono_PcComer, T1.Telefono_TelefonoCompleto)
    FROM (
        SELECT 
            T.TelefonoID AS Telefono_TelefonoID, 
            T.CodArea AS Telefono_CodArea, 
            T.Numero AS Telefono_Numero, 
            T.esCelular AS Telefono_esCelular, 
            T.EstadoID AS Telefono_EstadoID, 
            T.ClaseDatoID AS Telefono_ClaseDatoID, 
            T.Documento AS Telefono_Documento, 
            T.TipoDocumentoID AS Telefono_TipoDocumentoID, 
            T.EmpresaID AS Telefono_EmpresaID, 
            T.ComercioID AS Telefono_ComercioID, 
            T.Fecha AS Telefono_Fecha, 
            T.Nota AS Telefono_Nota, 
            T.UsuarioID AS Telefono_UsuarioID, 
            T.PcComer AS Telefono_PcComer, 
            T.TelefonoCompleto AS Telefono_TelefonoCompleto, 
            True AS _from0
        FROM ComercioContext.Telefono AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TipoComoConocio.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView42()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoComoConocio
        [CodeFirstDatabaseSchema.TipoComoConocio](T1.TipoComoConocio_TipoComoConocioID, T1.TipoComoConocio_Nombre, T1.TipoComoConocio_Descripcion)
    FROM (
        SELECT 
            T.TipoComoConocioID AS TipoComoConocio_TipoComoConocioID, 
            T.Nombre AS TipoComoConocio_Nombre, 
            T.Descripcion AS TipoComoConocio_Descripcion, 
            True AS _from0
        FROM ComercioContext.TipoComoConocio AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Cobranza.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView43()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Cobranza
        [CodeFirstDatabaseSchema.Cobranza](T1.Cobranza_EmpresaID, T1.Cobranza_ComercioID, T1.Cobranza_CreditoID, T1.Cobranza_CuotaID, T1.Cobranza_CobranzaID, T1.Cobranza_Documento, T1.Cobranza_TipoDocumentoID, T1.Cobranza_ImportePago, T1.Cobranza_ImportePagoPunitorios, T1.Cobranza_Interes, T1.Cobranza_PunitoriosCalc, T1.Cobranza_FechaPago, T1.Cobranza_FechaVencimiento, T1.Cobranza_TipoPagoID, T1.Cobranza_TipoBonificacionID, T1.Cobranza_PorcentajeBonificacion, T1.Cobranza_PagoRev, T1.Cobranza_FechaRev, T1.Cobranza_CobranzaIDRev, T1.Cobranza_Motivo, T1.Cobranza_GestionEmpresaID, T1.Cobranza_GestionID, T1.Cobranza_RefinanciacionCobranzaID, T1.Cobranza_UsuarioID, T1.Cobranza_PcComer, T1.Cobranza_ImporteTotal, T1.Cobranza_ImporteCapital, T1.Cobranza_NotasBoni)
    FROM (
        SELECT 
            T.EmpresaID AS Cobranza_EmpresaID, 
            T.ComercioID AS Cobranza_ComercioID, 
            T.CreditoID AS Cobranza_CreditoID, 
            T.CuotaID AS Cobranza_CuotaID, 
            T.CobranzaID AS Cobranza_CobranzaID, 
            T.Documento AS Cobranza_Documento, 
            T.TipoDocumentoID AS Cobranza_TipoDocumentoID, 
            T.ImportePago AS Cobranza_ImportePago, 
            T.ImportePagoPunitorios AS Cobranza_ImportePagoPunitorios, 
            T.Interes AS Cobranza_Interes, 
            T.PunitoriosCalc AS Cobranza_PunitoriosCalc, 
            T.FechaPago AS Cobranza_FechaPago, 
            T.FechaVencimiento AS Cobranza_FechaVencimiento, 
            T.TipoPagoID AS Cobranza_TipoPagoID, 
            T.TipoBonificacionID AS Cobranza_TipoBonificacionID, 
            T.PorcentajeBonificacion AS Cobranza_PorcentajeBonificacion, 
            T.PagoRev AS Cobranza_PagoRev, 
            T.FechaRev AS Cobranza_FechaRev, 
            T.CobranzaIDRev AS Cobranza_CobranzaIDRev, 
            T.Motivo AS Cobranza_Motivo, 
            T.GestionEmpresaID AS Cobranza_GestionEmpresaID, 
            T.GestionID AS Cobranza_GestionID, 
            T.RefinanciacionCobranzaID AS Cobranza_RefinanciacionCobranzaID, 
            T.UsuarioID AS Cobranza_UsuarioID, 
            T.PcComer AS Cobranza_PcComer, 
            T.ImporteTotal AS Cobranza_ImporteTotal, 
            T.ImporteCapital AS Cobranza_ImporteCapital, 
            T.NotasBoni AS Cobranza_NotasBoni, 
            True AS _from0
        FROM ComercioContext.Cobranzas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Cuota.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView44()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Cuota
        [CodeFirstDatabaseSchema.Cuota](T1.Cuota_EmpresaID, T1.Cuota_ComercioID, T1.Cuota_CreditoID, T1.Cuota_CuotaID, T1.Cuota_Documento, T1.Cuota_TipoDocumentoID, T1.Cuota_Importe, T1.Cuota_Interes, T1.Cuota_ImportePago, T1.Cuota_ImportePagoPunitorios, T1.Cuota_FechaVencimiento, T1.Cuota_FechaUltimoPago, T1.Cuota_TipoCuotaID, T1.Cuota_CantidadCuotas, T1.Cuota_ValorBonificacion, T1.Cuota_Deuda)
    FROM (
        SELECT 
            T.EmpresaID AS Cuota_EmpresaID, 
            T.ComercioID AS Cuota_ComercioID, 
            T.CreditoID AS Cuota_CreditoID, 
            T.CuotaID AS Cuota_CuotaID, 
            T.Documento AS Cuota_Documento, 
            T.TipoDocumentoID AS Cuota_TipoDocumentoID, 
            T.Importe AS Cuota_Importe, 
            T.Interes AS Cuota_Interes, 
            T.ImportePago AS Cuota_ImportePago, 
            T.ImportePagoPunitorios AS Cuota_ImportePagoPunitorios, 
            T.FechaVencimiento AS Cuota_FechaVencimiento, 
            T.FechaUltimoPago AS Cuota_FechaUltimoPago, 
            T.TipoCuotaID AS Cuota_TipoCuotaID, 
            T.CantidadCuotas AS Cuota_CantidadCuotas, 
            T.ValorBonificacion AS Cuota_ValorBonificacion, 
            T.Deuda AS Cuota_Deuda, 
            True AS _from0
        FROM ComercioContext.Cuotas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TipoCuota.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView45()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoCuota
        [CodeFirstDatabaseSchema.TipoCuota](T1.TipoCuota_TipoCuotaID, T1.TipoCuota_Nombre)
    FROM (
        SELECT 
            T.TipoCuotaID AS TipoCuota_TipoCuotaID, 
            T.Nombre AS TipoCuota_Nombre, 
            True AS _from0
        FROM ComercioContext.TipoCuota AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.NotasCD.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView46()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing NotasCD
        [CodeFirstDatabaseSchema.NotasCD](T1.NotasCD_EmpresaID, T1.NotasCD_ComercioID, T1.NotasCD_CreditoID, T1.NotasCD_CuotaID, T1.NotasCD_CobranzaID, T1.NotasCD_NotaCDID, T1.NotasCD_TipoNota, T1.NotasCD_Importe, T1.NotasCD_Fecha, T1.NotasCD_Documento, T1.NotasCD_TipoDocumentoID, T1.NotasCD_Detalle, T1.NotasCD_GestionID, T1.NotasCD_UsuarioID, T1.NotasCD_PcComer, T1.NotasCD_Notas)
    FROM (
        SELECT 
            T.EmpresaID AS NotasCD_EmpresaID, 
            T.ComercioID AS NotasCD_ComercioID, 
            T.CreditoID AS NotasCD_CreditoID, 
            T.CuotaID AS NotasCD_CuotaID, 
            T.CobranzaID AS NotasCD_CobranzaID, 
            T.NotaCDID AS NotasCD_NotaCDID, 
            T.TipoNota AS NotasCD_TipoNota, 
            T.Importe AS NotasCD_Importe, 
            T.Fecha AS NotasCD_Fecha, 
            T.Documento AS NotasCD_Documento, 
            T.TipoDocumentoID AS NotasCD_TipoDocumentoID, 
            T.Detalle AS NotasCD_Detalle, 
            T.GestionID AS NotasCD_GestionID, 
            T.UsuarioID AS NotasCD_UsuarioID, 
            T.PcComer AS NotasCD_PcComer, 
            T.Notas AS NotasCD_Notas, 
            True AS _from0
        FROM ComercioContext.NotasCD AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TipoBonificacion.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView47()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoBonificacion
        [CodeFirstDatabaseSchema.TipoBonificacion](T1.TipoBonificacion_TipoBonificacionID, T1.TipoBonificacion_Nombre, T1.TipoBonificacion_Descripcion)
    FROM (
        SELECT 
            T.TipoBonificacionID AS TipoBonificacion_TipoBonificacionID, 
            T.Nombre AS TipoBonificacion_Nombre, 
            T.Descripcion AS TipoBonificacion_Descripcion, 
            True AS _from0
        FROM ComercioContext.TipoBonificacion AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.CreditoAval.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView48()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CreditoAval
        [CodeFirstDatabaseSchema.CreditoAval](T1.CreditoAval_CreditoAvalID, T1.CreditoAval_CreditoID, T1.CreditoAval_ComercioID, T1.CreditoAval_EmpresaID, T1.CreditoAval_TipoAvalID, T1.CreditoAval_UsuarioID)
    FROM (
        SELECT 
            T.CreditoAvalID AS CreditoAval_CreditoAvalID, 
            T.CreditoID AS CreditoAval_CreditoID, 
            T.ComercioID AS CreditoAval_ComercioID, 
            T.EmpresaID AS CreditoAval_EmpresaID, 
            T.TipoAvalID AS CreditoAval_TipoAvalID, 
            T.UsuarioID AS CreditoAval_UsuarioID, 
            True AS _from0
        FROM ComercioContext.CreditoAvals AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TipoAval.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView49()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoAval
        [CodeFirstDatabaseSchema.TipoAval](T1.TipoAval_TipoAvalID, T1.TipoAval_Nombre, T1.TipoAval_Descripcion)
    FROM (
        SELECT 
            T.TipoAvalID AS TipoAval_TipoAvalID, 
            T.Nombre AS TipoAval_Nombre, 
            T.Descripcion AS TipoAval_Descripcion, 
            True AS _from0
        FROM ComercioContext.TipoAval AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Cargo.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView50()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Cargo
        [CodeFirstDatabaseSchema.Cargo](T1.Cargo_CargoId, T1.Cargo_Nombre, T1.Cargo_Descripcion, T1.Cargo_SueldoBasico)
    FROM (
        SELECT 
            T.CargoId AS Cargo_CargoId, 
            T.Nombre AS Cargo_Nombre, 
            T.Descripcion AS Cargo_Descripcion, 
            T.SueldoBasico AS Cargo_SueldoBasico, 
            True AS _from0
        FROM ComercioContext.Cargos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ClaseMovimiento.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView51()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ClaseMovimiento
        [CodeFirstDatabaseSchema.ClaseMovimiento](T2.ClaseMovimiento_ClaseMovimientoID, T2.ClaseMovimiento_Nombre, T2.ClaseMovimiento_Descripcion, T2.ClaseMovimiento_Discriminator)
    FROM (
        SELECT -- Constructing Discriminator
            T1.ClaseMovimiento_ClaseMovimientoID, 
            T1.ClaseMovimiento_Nombre, 
            T1.ClaseMovimiento_Descripcion, 
            CASE
                WHEN T1._from1 THEN N'Egreso'
                ELSE N'Ingreso'
            END AS ClaseMovimiento_Discriminator
        FROM (
            SELECT 
                T.ClaseMovimientoID AS ClaseMovimiento_ClaseMovimientoID, 
                T.Nombre AS ClaseMovimiento_Nombre, 
                T.Descripcion AS ClaseMovimiento_Descripcion, 
                True AS _from0, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.Egreso]) THEN True ELSE False END AS _from1, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.Ingreso]) THEN True ELSE False END AS _from2
            FROM ComercioContext.ClasesMovimientos AS T
        ) AS T1
    ) AS T2");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConceptoFondos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView52()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConceptoFondos
        [CodeFirstDatabaseSchema.ConceptoFondos](T1.ConceptoFondos_ConceptoFondosID, T1.ConceptoFondos_Nombre, T1.ConceptoFondos_Descripcion, T1.ConceptoFondos_MedioDePagoID)
    FROM (
        SELECT 
            T.ConceptoFondosID AS ConceptoFondos_ConceptoFondosID, 
            T.Nombre AS ConceptoFondos_Nombre, 
            T.Descripcion AS ConceptoFondos_Descripcion, 
            T.MedioDePagoID AS ConceptoFondos_MedioDePagoID, 
            True AS _from0
        FROM ComercioContext.ConceptoFondos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.MedioDePago.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView53()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MedioDePago
        [CodeFirstDatabaseSchema.MedioDePago](T1.MedioDePago_MedioDePagoID, T1.MedioDePago_Nombre, T1.MedioDePago_Descripcion)
    FROM (
        SELECT 
            T.MedioDePagoID AS MedioDePago_MedioDePagoID, 
            T.Nombre AS MedioDePago_Nombre, 
            T.Descripcion AS MedioDePago_Descripcion, 
            True AS _from0
        FROM ComercioContext.MediosDePagos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Departamento.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView54()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Departamento
        [CodeFirstDatabaseSchema.Departamento](T3.Departamento_DepartamentoID, T3.Departamento_Nombre, T3.Departamento_Descripcion, T3.[Departamento.ConceptoFondos_ConceptoFondosID])
    FROM (
        SELECT T1.Departamento_DepartamentoID, T1.Departamento_Nombre, T1.Departamento_Descripcion, T2.[Departamento.ConceptoFondos_ConceptoFondosID], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.DepartamentoID AS Departamento_DepartamentoID, 
                T.Nombre AS Departamento_Nombre, 
                T.Descripcion AS Departamento_Descripcion, 
                True AS _from0
            FROM ComercioContext.Departamentos AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.ConceptoFondos_RequiereValidacionDe_Target).DepartamentoID AS Departamento_DepartamentoID, 
                Key(T.ConceptoFondos_RequiereValidacionDe_Source).ConceptoFondosID AS [Departamento.ConceptoFondos_ConceptoFondosID], 
                True AS _from1
            FROM ComercioContext.ConceptoFondos_RequiereValidacionDe AS T) AS T2
            ON T1.Departamento_DepartamentoID = T2.Departamento_DepartamentoID
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ConceptoGastosDepartamento.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView55()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConceptoGastosDepartamento
        [CodeFirstDatabaseSchema.ConceptoGastosDepartamento](T1.ConceptoGastosDepartamento_ConceptoGastosDepartamentoID, T1.ConceptoGastosDepartamento_ConceptoGastosID, T1.ConceptoGastosDepartamento_DepartamentoID, T1.ConceptoGastosDepartamento_presupuesto, T1.ConceptoGastosDepartamento_EstadoID)
    FROM (
        SELECT 
            T.ConceptoGastosDepartamentoID AS ConceptoGastosDepartamento_ConceptoGastosDepartamentoID, 
            T.ConceptoGastosID AS ConceptoGastosDepartamento_ConceptoGastosID, 
            T.DepartamentoID AS ConceptoGastosDepartamento_DepartamentoID, 
            T.presupuesto AS ConceptoGastosDepartamento_presupuesto, 
            T.EstadoID AS ConceptoGastosDepartamento_EstadoID, 
            True AS _from0
        FROM ComercioContext.ConceptoGastosDepartamentos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.CreditoAnulado.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView56()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CreditoAnulado
        [CodeFirstDatabaseSchema.CreditoAnulado](T1.CreditoAnulado_EmpresaID, T1.CreditoAnulado_ComercioID, T1.CreditoAnulado_CreditoAnuladoID, T1.CreditoAnulado_CreditoID, T1.CreditoAnulado_Documento, T1.CreditoAnulado_TipoDocumentoID, T1.CreditoAnulado_ValorNominal, T1.CreditoAnulado_ValorCuota, T1.CreditoAnulado_FechaSolicitud, T1.CreditoAnulado_Interes, T1.CreditoAnulado_Gasto, T1.CreditoAnulado_Comision, T1.CreditoAnulado_Garante1, T1.CreditoAnulado_TipoDocumentoIDG1, T1.CreditoAnulado_Garante2, T1.CreditoAnulado_TipoDocumentoIDG2, T1.CreditoAnulado_Garante3, T1.CreditoAnulado_TipoDocumentoIDG3, T1.CreditoAnulado_Adicional, T1.CreditoAnulado_TipoDocumentoIDAdi, T1.CreditoAnulado_Avalado, T1.CreditoAnulado_usuarioAvalID, T1.CreditoAnulado_TipoCuotaID, T1.CreditoAnulado_CantidadCuotas, T1.CreditoAnulado_NroInformeContel, T1.CreditoAnulado_AbogadoID, T1.CreditoAnulado_FechaAbogado, T1.CreditoAnulado_UsuarioID, T1.CreditoAnulado_PcComer, T1.CreditoAnulado_FechaComer, T1.CreditoAnulado_TipoBonificacionID, T1.CreditoAnulado_PorcentajeBonificacion, T1.CreditoAnulado_ValorBonificacion, T1.CreditoAnulado_TasaPlan, T1.CreditoAnulado_IncrementoPlan, T1.CreditoAnulado_GastoPlan, T1.CreditoAnulado_GastoIncrementoPlan, T1.CreditoAnulado_GastoFijo, T1.CreditoAnulado_ComisionPlan, T1.CreditoAnulado_ComisionIncrementoPlan, T1.CreditoAnulado_TipoRetencionPlanID, T1.CreditoAnulado_NombrePlan, T1.CreditoAnulado_Puntaje, T1.CreditoAnulado_DiasVenciPrimerCuota, T1.CreditoAnulado_RefinanciacionID, T1.CreditoAnulado_UsuarioIDAnula, T1.CreditoAnulado_PcComerAnula, T1.CreditoAnulado_FechaComercioAnula, T1.CreditoAnulado_Motivo, T1.CreditoAnulado_TipoAnulacionID, T1.CreditoAnulado_AvisoDePagoID, T1.CreditoAnulado_Corte, T1.CreditoAnulado_FechaAviso, T1.CreditoAnulado_NumCuentaBancaria, T1.CreditoAnulado_FechaDesdeDebito)
    FROM (
        SELECT 
            T.EmpresaID AS CreditoAnulado_EmpresaID, 
            T.ComercioID AS CreditoAnulado_ComercioID, 
            T.CreditoAnuladoID AS CreditoAnulado_CreditoAnuladoID, 
            T.CreditoID AS CreditoAnulado_CreditoID, 
            T.Documento AS CreditoAnulado_Documento, 
            T.TipoDocumentoID AS CreditoAnulado_TipoDocumentoID, 
            T.ValorNominal AS CreditoAnulado_ValorNominal, 
            T.ValorCuota AS CreditoAnulado_ValorCuota, 
            T.FechaSolicitud AS CreditoAnulado_FechaSolicitud, 
            T.Interes AS CreditoAnulado_Interes, 
            T.Gasto AS CreditoAnulado_Gasto, 
            T.Comision AS CreditoAnulado_Comision, 
            T.Garante1 AS CreditoAnulado_Garante1, 
            T.TipoDocumentoIDG1 AS CreditoAnulado_TipoDocumentoIDG1, 
            T.Garante2 AS CreditoAnulado_Garante2, 
            T.TipoDocumentoIDG2 AS CreditoAnulado_TipoDocumentoIDG2, 
            T.Garante3 AS CreditoAnulado_Garante3, 
            T.TipoDocumentoIDG3 AS CreditoAnulado_TipoDocumentoIDG3, 
            T.Adicional AS CreditoAnulado_Adicional, 
            T.TipoDocumentoIDAdi AS CreditoAnulado_TipoDocumentoIDAdi, 
            T.Avalado AS CreditoAnulado_Avalado, 
            T.usuarioAvalID AS CreditoAnulado_usuarioAvalID, 
            T.TipoCuotaID AS CreditoAnulado_TipoCuotaID, 
            T.CantidadCuotas AS CreditoAnulado_CantidadCuotas, 
            T.NroInformeContel AS CreditoAnulado_NroInformeContel, 
            T.AbogadoID AS CreditoAnulado_AbogadoID, 
            T.FechaAbogado AS CreditoAnulado_FechaAbogado, 
            T.UsuarioID AS CreditoAnulado_UsuarioID, 
            T.PcComer AS CreditoAnulado_PcComer, 
            T.FechaComer AS CreditoAnulado_FechaComer, 
            T.TipoBonificacionID AS CreditoAnulado_TipoBonificacionID, 
            T.PorcentajeBonificacion AS CreditoAnulado_PorcentajeBonificacion, 
            T.ValorBonificacion AS CreditoAnulado_ValorBonificacion, 
            T.TasaPlan AS CreditoAnulado_TasaPlan, 
            T.IncrementoPlan AS CreditoAnulado_IncrementoPlan, 
            T.GastoPlan AS CreditoAnulado_GastoPlan, 
            T.GastoIncrementoPlan AS CreditoAnulado_GastoIncrementoPlan, 
            T.GastoFijo AS CreditoAnulado_GastoFijo, 
            T.ComisionPlan AS CreditoAnulado_ComisionPlan, 
            T.ComisionIncrementoPlan AS CreditoAnulado_ComisionIncrementoPlan, 
            T.TipoRetencionPlanID AS CreditoAnulado_TipoRetencionPlanID, 
            T.NombrePlan AS CreditoAnulado_NombrePlan, 
            T.Puntaje AS CreditoAnulado_Puntaje, 
            T.DiasVenciPrimerCuota AS CreditoAnulado_DiasVenciPrimerCuota, 
            T.RefinanciacionID AS CreditoAnulado_RefinanciacionID, 
            T.UsuarioIDAnula AS CreditoAnulado_UsuarioIDAnula, 
            T.PcComerAnula AS CreditoAnulado_PcComerAnula, 
            T.FechaComercioAnula AS CreditoAnulado_FechaComercioAnula, 
            T.Motivo AS CreditoAnulado_Motivo, 
            T.TipoAnulacionID AS CreditoAnulado_TipoAnulacionID, 
            T.AvisoDePagoID AS CreditoAnulado_AvisoDePagoID, 
            T.Corte AS CreditoAnulado_Corte, 
            T.FechaAviso AS CreditoAnulado_FechaAviso, 
            T.NumCuentaBancaria AS CreditoAnulado_NumCuentaBancaria, 
            T.FechaDesdeDebito AS CreditoAnulado_FechaDesdeDebito, 
            True AS _from0
        FROM ComercioContext.CreditoAnulado AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TipoAnulacion.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView57()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoAnulacion
        [CodeFirstDatabaseSchema.TipoAnulacion](T1.TipoAnulacion_TipoAnulacionID, T1.TipoAnulacion_Descripcion, T1.TipoAnulacion_QueAnula)
    FROM (
        SELECT 
            T.TipoAnulacionID AS TipoAnulacion_TipoAnulacionID, 
            T.Descripcion AS TipoAnulacion_Descripcion, 
            T.QueAnula AS TipoAnulacion_QueAnula, 
            True AS _from0
        FROM ComercioContext.TipoAnulacion AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.CuentaCorriente.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView58()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CuentaCorriente
        [CodeFirstDatabaseSchema.CuentaCorriente](T1.CuentaCorriente_EmpresaID, T1.CuentaCorriente_ComercioID, T1.CuentaCorriente_CuentaCorrienteID, T1.CuentaCorriente_IDRemoto, T1.CuentaCorriente_TipoMovimientoID, T1.CuentaCorriente_Fecha, T1.CuentaCorriente_SolicitudFondoID, T1.CuentaCorriente_CreditoID, T1.CuentaCorriente_CuotaID, T1.CuentaCorriente_CobranzaID, T1.CuentaCorriente_NotaCDID, T1.CuentaCorriente_TransferenciaDepositoID, T1.CuentaCorriente_ReciboID, T1.CuentaCorriente_Importe, T1.CuentaCorriente_GestionID, T1.CuentaCorriente_GastoID, T1.CuentaCorriente_PagoID, T1.CuentaCorriente_FechaAviso, T1.CuentaCorriente_CreditoNro)
    FROM (
        SELECT 
            T.EmpresaID AS CuentaCorriente_EmpresaID, 
            T.ComercioID AS CuentaCorriente_ComercioID, 
            T.CuentaCorrienteID AS CuentaCorriente_CuentaCorrienteID, 
            T.IDRemoto AS CuentaCorriente_IDRemoto, 
            T.TipoMovimientoID AS CuentaCorriente_TipoMovimientoID, 
            T.Fecha AS CuentaCorriente_Fecha, 
            T.SolicitudFondoID AS CuentaCorriente_SolicitudFondoID, 
            T.CreditoID AS CuentaCorriente_CreditoID, 
            T.CuotaID AS CuentaCorriente_CuotaID, 
            T.CobranzaID AS CuentaCorriente_CobranzaID, 
            T.NotaCDID AS CuentaCorriente_NotaCDID, 
            T.TransferenciaDepositoID AS CuentaCorriente_TransferenciaDepositoID, 
            T.ReciboID AS CuentaCorriente_ReciboID, 
            T.Importe AS CuentaCorriente_Importe, 
            T.GestionID AS CuentaCorriente_GestionID, 
            T.GastoID AS CuentaCorriente_GastoID, 
            T.PagoID AS CuentaCorriente_PagoID, 
            T.FechaAviso AS CuentaCorriente_FechaAviso, 
            T.CreditoNro AS CuentaCorriente_CreditoNro, 
            True AS _from0
        FROM ComercioContext.CuentaCorriente AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Gasto.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView59()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Gasto
        [CodeFirstDatabaseSchema.Gasto](T1.Gasto_EmpresaID, T1.Gasto_ComercioID, T1.Gasto_GastoID, T1.Gasto_SolicitudFondoID, T1.Gasto_Activo, T1.Gasto_Importe, T1.Gasto_Descripcion, T1.Gasto_DepartamentoID, T1.Gasto_ConceptoGastoID, T1.Gasto_ConceptoGastoProveedorID, T1.Gasto_ProveedorID, T1.Gasto_ProveedorSucursalID, T1.Gasto_Fecha, T1.Gasto_Pagado, T1.Gasto_EstadoID)
    FROM (
        SELECT 
            T.EmpresaID AS Gasto_EmpresaID, 
            T.ComercioID AS Gasto_ComercioID, 
            T.GastoID AS Gasto_GastoID, 
            T.SolicitudFondoID AS Gasto_SolicitudFondoID, 
            T.Activo AS Gasto_Activo, 
            T.Importe AS Gasto_Importe, 
            T.Descripcion AS Gasto_Descripcion, 
            T.DepartamentoID AS Gasto_DepartamentoID, 
            T.ConceptoGastoID AS Gasto_ConceptoGastoID, 
            T.ConceptoGastoProveedorID AS Gasto_ConceptoGastoProveedorID, 
            T.ProveedorID AS Gasto_ProveedorID, 
            T.ProveedorSucursalID AS Gasto_ProveedorSucursalID, 
            T.Fecha AS Gasto_Fecha, 
            T.Pagado AS Gasto_Pagado, 
            T.EstadoID AS Gasto_EstadoID, 
            True AS _from0
        FROM ComercioContext.Gastoes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.SolicitudFondo.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView60()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SolicitudFondo
        [CodeFirstDatabaseSchema.SolicitudFondo](T1.SolicitudFondo_EmpresaID, T1.SolicitudFondo_ComercioID, T1.SolicitudFondo_SolicitudFondoID, T1.SolicitudFondo_SolicitudFondoIDRemoto, T1.SolicitudFondo_FechaPago, T1.SolicitudFondo_FechaPagoSF, T1.SolicitudFondo_FechaRealizacion, T1.SolicitudFondo_Importe, T1.SolicitudFondo_Motivo, T1.SolicitudFondo_LiquidacionID, T1.SolicitudFondo_FechaDispComienzo, T1.SolicitudFondo_FechaDispFinal, T1.SolicitudFondo_GeneradoPorComercioID, T1.SolicitudFondo_GeneradoPorDepartamentoID, T1.SolicitudFondo_MedioDePagoID, T1.SolicitudFondo_ConceptoFondosID, T1.SolicitudFondo_TransferenciasDepositosEmpId, T1.SolicitudFondo_TransferenciasDepositosID, T1.SolicitudFondo_ClaseCuentaBancariaID, T1.SolicitudFondo_CuentaBancariaID, T1.SolicitudFondo_NumChequera, T1.SolicitudFondo_NumCheque, T1.SolicitudFondo_EstadoID, T1.SolicitudFondo_MonedaID, T1.SolicitudFondo_OrdenDePago, T1.SolicitudFondo_TipoSolicitudID, T1.SolicitudFondo_FechaConfComercio, T1.SolicitudFondo_EmpleadoConfComercio, T1.SolicitudFondo_notas, T1.SolicitudFondo_EmpleadoSolicitanteID, T1.SolicitudFondo_EmpleadoRealizadorID, T1.SolicitudFondo_CajaID, T1.SolicitudFondo_AvisoDePagoID)
    FROM (
        SELECT 
            T.EmpresaID AS SolicitudFondo_EmpresaID, 
            T.ComercioID AS SolicitudFondo_ComercioID, 
            T.SolicitudFondoID AS SolicitudFondo_SolicitudFondoID, 
            T.SolicitudFondoIDRemoto AS SolicitudFondo_SolicitudFondoIDRemoto, 
            T.FechaPago AS SolicitudFondo_FechaPago, 
            T.FechaPagoSF AS SolicitudFondo_FechaPagoSF, 
            T.FechaRealizacion AS SolicitudFondo_FechaRealizacion, 
            T.Importe AS SolicitudFondo_Importe, 
            T.Motivo AS SolicitudFondo_Motivo, 
            T.LiquidacionID AS SolicitudFondo_LiquidacionID, 
            T.FechaDispComienzo AS SolicitudFondo_FechaDispComienzo, 
            T.FechaDispFinal AS SolicitudFondo_FechaDispFinal, 
            T.GeneradoPorComercioID AS SolicitudFondo_GeneradoPorComercioID, 
            T.GeneradoPorDepartamentoID AS SolicitudFondo_GeneradoPorDepartamentoID, 
            T.MedioDePagoID AS SolicitudFondo_MedioDePagoID, 
            T.ConceptoFondosID AS SolicitudFondo_ConceptoFondosID, 
            T.TransferenciasDepositosEmpId AS SolicitudFondo_TransferenciasDepositosEmpId, 
            T.TransferenciasDepositosID AS SolicitudFondo_TransferenciasDepositosID, 
            T.ClaseCuentaBancariaID AS SolicitudFondo_ClaseCuentaBancariaID, 
            T.CuentaBancariaID AS SolicitudFondo_CuentaBancariaID, 
            T.NumChequera AS SolicitudFondo_NumChequera, 
            T.NumCheque AS SolicitudFondo_NumCheque, 
            T.EstadoID AS SolicitudFondo_EstadoID, 
            T.MonedaID AS SolicitudFondo_MonedaID, 
            T.OrdenDePago AS SolicitudFondo_OrdenDePago, 
            T.TipoSolicitudID AS SolicitudFondo_TipoSolicitudID, 
            T.FechaConfComercio AS SolicitudFondo_FechaConfComercio, 
            T.EmpleadoConfComercio AS SolicitudFondo_EmpleadoConfComercio, 
            T.notas AS SolicitudFondo_notas, 
            T.EmpleadoSolicitanteID AS SolicitudFondo_EmpleadoSolicitanteID, 
            T.EmpleadoRealizadorID AS SolicitudFondo_EmpleadoRealizadorID, 
            T.CajaID AS SolicitudFondo_CajaID, 
            T.AvisoDePagoID AS SolicitudFondo_AvisoDePagoID, 
            True AS _from0
        FROM ComercioContext.SolicitudFondos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Empleado.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView61()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Empleado
        [CodeFirstDatabaseSchema.Empleado](T1.Empleado_EmpleadoID, T1.Empleado_Legajo, T1.Empleado_Usuarioid, T1.Empleado_Domicilio, T1.Empleado_Sueldo, T1.Empleado_Fotografia, T1.Empleado_Mail, T1.Empleado_Tel, T1.Empleado_DepartamentoID, T1.Empleado_EmpresaID, T1.Empleado_ComercioID, T1.Empleado_CargoID, T1.Empleado_EstadoId, T1.Empleado_PersonaID, T1.Empleado_TipoEmpleadoID)
    FROM (
        SELECT 
            T.EmpleadoID AS Empleado_EmpleadoID, 
            T.Legajo AS Empleado_Legajo, 
            T.Usuarioid AS Empleado_Usuarioid, 
            T.Domicilio AS Empleado_Domicilio, 
            T.Sueldo AS Empleado_Sueldo, 
            T.Fotografia AS Empleado_Fotografia, 
            T.Mail AS Empleado_Mail, 
            T.Tel AS Empleado_Tel, 
            T.DepartamentoID AS Empleado_DepartamentoID, 
            T.EmpresaID AS Empleado_EmpresaID, 
            T.ComercioID AS Empleado_ComercioID, 
            T.CargoID AS Empleado_CargoID, 
            T.EstadoId AS Empleado_EstadoId, 
            T.PersonaID AS Empleado_PersonaID, 
            T.TipoEmpleadoID AS Empleado_TipoEmpleadoID, 
            True AS _from0
        FROM ComercioContext.Empleados AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TipoEmpleado.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView62()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoEmpleado
        [CodeFirstDatabaseSchema.TipoEmpleado](T1.TipoEmpleado_TipoEmpleadoID, T1.TipoEmpleado_Nombre, T1.TipoEmpleado_Descripcion)
    FROM (
        SELECT 
            T.TipoEmpleadoID AS TipoEmpleado_TipoEmpleadoID, 
            T.Nombre AS TipoEmpleado_Nombre, 
            T.Descripcion AS TipoEmpleado_Descripcion, 
            True AS _from0
        FROM ComercioContext.TiposEmpleados AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.SolicitudFondoConceptoGastosProveedor.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView63()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SolicitudFondoConceptoGastosProveedor
        [CodeFirstDatabaseSchema.SolicitudFondoConceptoGastosProveedor](T1.SolicitudFondoConceptoGastosProveedor_EmpresaID, T1.SolicitudFondoConceptoGastosProveedor_ComercioID, T1.SolicitudFondoConceptoGastosProveedor_SolicitudFondoID, T1.SolicitudFondoConceptoGastosProveedor_ConceptoGastosProveedorID, T1.SolicitudFondoConceptoGastosProveedor_Importe, T1.SolicitudFondoConceptoGastosProveedor_Detalle, T1.SolicitudFondoConceptoGastosProveedor_sConceptoGastosProveedor)
    FROM (
        SELECT 
            T.EmpresaID AS SolicitudFondoConceptoGastosProveedor_EmpresaID, 
            T.ComercioID AS SolicitudFondoConceptoGastosProveedor_ComercioID, 
            T.SolicitudFondoID AS SolicitudFondoConceptoGastosProveedor_SolicitudFondoID, 
            T.ConceptoGastosProveedorID AS SolicitudFondoConceptoGastosProveedor_ConceptoGastosProveedorID, 
            T.Importe AS SolicitudFondoConceptoGastosProveedor_Importe, 
            T.Detalle AS SolicitudFondoConceptoGastosProveedor_Detalle, 
            T.sConceptoGastosProveedor AS SolicitudFondoConceptoGastosProveedor_sConceptoGastosProveedor, 
            True AS _from0
        FROM ComercioContext.SolicitudFondoConceptoGastosProveedors AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TipoSolicitud.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView64()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoSolicitud
        [CodeFirstDatabaseSchema.TipoSolicitud](T1.TipoSolicitud_TipoSolicitudID, T1.TipoSolicitud_Nombre, T1.TipoSolicitud_Descripcion)
    FROM (
        SELECT 
            T.TipoSolicitudID AS TipoSolicitud_TipoSolicitudID, 
            T.Nombre AS TipoSolicitud_Nombre, 
            T.Descripcion AS TipoSolicitud_Descripcion, 
            True AS _from0
        FROM ComercioContext.TiposSolicitud AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TransferenciasDepositos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView65()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TransferenciasDepositos
        [CodeFirstDatabaseSchema.TransferenciasDepositos](T4.TransferenciasDepositos_EmpresaID, T4.TransferenciasDepositos_TransferenciasDepositosID, T4.TransferenciasDepositos_TransferenciasDepositosIDRemoto, T4.TransferenciasDepositos_NumTransferencia, T4.TransferenciasDepositos_Importe, T4.TransferenciasDepositos_Fecha, T4.TransferenciasDepositos_Costo, T4.TransferenciasDepositos_Notas, T4.TransferenciasDepositos_CuentaOrigenEmpresaID, T4.TransferenciasDepositos_CuentaOrigenCbID, T4.TransferenciasDepositos_CuentaDestinoEmpresaID, T4.TransferenciasDepositos_CuentaDestinoCbID, T4.TransferenciasDepositos_ChequeEmpID, T4.TransferenciasDepositos_ChequeCbID, T4.TransferenciasDepositos_ChequeNumChequera, T4.TransferenciasDepositos_ChequeNumCheque, T4.TransferenciasDepositos_MedioDePagoID, T4.TransferenciasDepositos_MonedaID, T4.TransferenciasDepositos_EmpleadoRegistradorEmpresaID, T4.TransferenciasDepositos_EmpleadoRegistradorPersonaID, T4.TransferenciasDepositos_ComercioEmpresaID, T4.TransferenciasDepositos_ComercioID, T4.TransferenciasDepositos_PersonaId, T4.TransferenciasDepositos_ProveedorSucursalID, T4.TransferenciasDepositos_ProveedorID, T4.TransferenciasDepositos_Host, T4.TransferenciasDepositos_UsuarioID, T4.TransferenciasDepositos_TipoTransferenciaDepositoID, T4.TransferenciasDepositos_EstadoID, T4.[TransferenciasDepositos.ComercioEmpresa_EmpresaID], T4.[TransferenciasDepositos.EmpleadoRegistrador_EmpleadoID])
    FROM (
        SELECT T1.TransferenciasDepositos_EmpresaID, T1.TransferenciasDepositos_TransferenciasDepositosID, T1.TransferenciasDepositos_TransferenciasDepositosIDRemoto, T1.TransferenciasDepositos_NumTransferencia, T1.TransferenciasDepositos_Importe, T1.TransferenciasDepositos_Fecha, T1.TransferenciasDepositos_Costo, T1.TransferenciasDepositos_Notas, T1.TransferenciasDepositos_CuentaOrigenEmpresaID, T1.TransferenciasDepositos_CuentaOrigenCbID, T1.TransferenciasDepositos_CuentaDestinoEmpresaID, T1.TransferenciasDepositos_CuentaDestinoCbID, T1.TransferenciasDepositos_ChequeEmpID, T1.TransferenciasDepositos_ChequeCbID, T1.TransferenciasDepositos_ChequeNumChequera, T1.TransferenciasDepositos_ChequeNumCheque, T1.TransferenciasDepositos_MedioDePagoID, T1.TransferenciasDepositos_MonedaID, T1.TransferenciasDepositos_EmpleadoRegistradorEmpresaID, T1.TransferenciasDepositos_EmpleadoRegistradorPersonaID, T1.TransferenciasDepositos_ComercioEmpresaID, T1.TransferenciasDepositos_ComercioID, T1.TransferenciasDepositos_PersonaId, T1.TransferenciasDepositos_ProveedorSucursalID, T1.TransferenciasDepositos_ProveedorID, T1.TransferenciasDepositos_Host, T1.TransferenciasDepositos_UsuarioID, T1.TransferenciasDepositos_TipoTransferenciaDepositoID, T1.TransferenciasDepositos_EstadoID, T2.[TransferenciasDepositos.ComercioEmpresa_EmpresaID], T3.[TransferenciasDepositos.EmpleadoRegistrador_EmpleadoID], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2
        FROM  (
            SELECT 
                T.EmpresaID AS TransferenciasDepositos_EmpresaID, 
                T.TransferenciasDepositosID AS TransferenciasDepositos_TransferenciasDepositosID, 
                T.TransferenciasDepositosIDRemoto AS TransferenciasDepositos_TransferenciasDepositosIDRemoto, 
                T.NumTransferencia AS TransferenciasDepositos_NumTransferencia, 
                T.Importe AS TransferenciasDepositos_Importe, 
                T.Fecha AS TransferenciasDepositos_Fecha, 
                T.Costo AS TransferenciasDepositos_Costo, 
                T.Notas AS TransferenciasDepositos_Notas, 
                T.CuentaOrigenEmpresaID AS TransferenciasDepositos_CuentaOrigenEmpresaID, 
                T.CuentaOrigenCbID AS TransferenciasDepositos_CuentaOrigenCbID, 
                T.CuentaDestinoEmpresaID AS TransferenciasDepositos_CuentaDestinoEmpresaID, 
                T.CuentaDestinoCbID AS TransferenciasDepositos_CuentaDestinoCbID, 
                T.ChequeEmpID AS TransferenciasDepositos_ChequeEmpID, 
                T.ChequeCbID AS TransferenciasDepositos_ChequeCbID, 
                T.ChequeNumChequera AS TransferenciasDepositos_ChequeNumChequera, 
                T.ChequeNumCheque AS TransferenciasDepositos_ChequeNumCheque, 
                T.MedioDePagoID AS TransferenciasDepositos_MedioDePagoID, 
                T.MonedaID AS TransferenciasDepositos_MonedaID, 
                T.EmpleadoRegistradorEmpresaID AS TransferenciasDepositos_EmpleadoRegistradorEmpresaID, 
                T.EmpleadoRegistradorPersonaID AS TransferenciasDepositos_EmpleadoRegistradorPersonaID, 
                T.ComercioEmpresaID AS TransferenciasDepositos_ComercioEmpresaID, 
                T.ComercioID AS TransferenciasDepositos_ComercioID, 
                T.PersonaId AS TransferenciasDepositos_PersonaId, 
                T.ProveedorSucursalID AS TransferenciasDepositos_ProveedorSucursalID, 
                T.ProveedorID AS TransferenciasDepositos_ProveedorID, 
                T.Host AS TransferenciasDepositos_Host, 
                T.UsuarioID AS TransferenciasDepositos_UsuarioID, 
                T.TipoTransferenciaDepositoID AS TransferenciasDepositos_TipoTransferenciaDepositoID, 
                T.EstadoID AS TransferenciasDepositos_EstadoID, 
                True AS _from0
            FROM ComercioContext.TransferenciasDepositos AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.TransferenciasDepositos_ComercioEmpresa_Source).EmpresaID AS TransferenciasDepositos_EmpresaID, 
                Key(T.TransferenciasDepositos_ComercioEmpresa_Source).TransferenciasDepositosID AS TransferenciasDepositos_TransferenciasDepositosID, 
                Key(T.TransferenciasDepositos_ComercioEmpresa_Target).EmpresaID AS [TransferenciasDepositos.ComercioEmpresa_EmpresaID], 
                True AS _from1
            FROM ComercioContext.TransferenciasDepositos_ComercioEmpresa AS T) AS T2
            ON T1.TransferenciasDepositos_EmpresaID = T2.TransferenciasDepositos_EmpresaID AND T1.TransferenciasDepositos_TransferenciasDepositosID = T2.TransferenciasDepositos_TransferenciasDepositosID
            LEFT OUTER JOIN (
            SELECT 
                Key(T.TransferenciasDepositos_EmpleadoRegistrador_Source).EmpresaID AS TransferenciasDepositos_EmpresaID, 
                Key(T.TransferenciasDepositos_EmpleadoRegistrador_Source).TransferenciasDepositosID AS TransferenciasDepositos_TransferenciasDepositosID, 
                Key(T.TransferenciasDepositos_EmpleadoRegistrador_Target).EmpleadoID AS [TransferenciasDepositos.EmpleadoRegistrador_EmpleadoID], 
                True AS _from2
            FROM ComercioContext.TransferenciasDepositos_EmpleadoRegistrador AS T) AS T3
            ON T1.TransferenciasDepositos_EmpresaID = T3.TransferenciasDepositos_EmpresaID AND T1.TransferenciasDepositos_TransferenciasDepositosID = T3.TransferenciasDepositos_TransferenciasDepositosID
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TipoTransferenciaDeposito.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView66()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoTransferenciaDeposito
        [CodeFirstDatabaseSchema.TipoTransferenciaDeposito](T1.TipoTransferenciaDeposito_TipoTransferenciaDepositoID, T1.TipoTransferenciaDeposito_Nombre, T1.TipoTransferenciaDeposito_Descripcion)
    FROM (
        SELECT 
            T.TipoTransferenciaDepositoID AS TipoTransferenciaDeposito_TipoTransferenciaDepositoID, 
            T.Nombre AS TipoTransferenciaDeposito_Nombre, 
            T.Descripcion AS TipoTransferenciaDeposito_Descripcion, 
            True AS _from0
        FROM ComercioContext.TipoTransferenciaDeposito AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Pago.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView67()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Pago
        [CodeFirstDatabaseSchema.Pago](T1.Pago_EmpresaID, T1.Pago_ComercioID, T1.Pago_PagoID, T1.Pago_SolicitudFondoID, T1.Pago_CapID, T1.Pago_CapDetalleID, T1.Pago_FFID, T1.Pago_FFDetalleID, T1.Pago_Fecha, T1.Pago_Importe, T1.Pago_EstadoID)
    FROM (
        SELECT 
            T.EmpresaID AS Pago_EmpresaID, 
            T.ComercioID AS Pago_ComercioID, 
            T.PagoID AS Pago_PagoID, 
            T.SolicitudFondoID AS Pago_SolicitudFondoID, 
            T.CapID AS Pago_CapID, 
            T.CapDetalleID AS Pago_CapDetalleID, 
            T.FFID AS Pago_FFID, 
            T.FFDetalleID AS Pago_FFDetalleID, 
            T.Fecha AS Pago_Fecha, 
            T.Importe AS Pago_Importe, 
            T.EstadoID AS Pago_EstadoID, 
            True AS _from0
        FROM ComercioContext.Pagoes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.CapDetalle.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView68()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CapDetalle
        [CodeFirstDatabaseSchema.CapDetalle](T1.CapDetalle_EmpresaID, T1.CapDetalle_ComercioID, T1.CapDetalle_CapID, T1.CapDetalle_CapDetalleID, T1.CapDetalle_FechaVencimiento, T1.CapDetalle_Importe, T1.CapDetalle_Detalle, T1.CapDetalle_ImportePago, T1.CapDetalle_Finalizado, T1.CapDetalle_PendientePago)
    FROM (
        SELECT 
            T.EmpresaID AS CapDetalle_EmpresaID, 
            T.ComercioID AS CapDetalle_ComercioID, 
            T.CapID AS CapDetalle_CapID, 
            T.CapDetalleID AS CapDetalle_CapDetalleID, 
            T.FechaVencimiento AS CapDetalle_FechaVencimiento, 
            T.Importe AS CapDetalle_Importe, 
            T.Detalle AS CapDetalle_Detalle, 
            T.ImportePago AS CapDetalle_ImportePago, 
            T.Finalizado AS CapDetalle_Finalizado, 
            T.PendientePago AS CapDetalle_PendientePago, 
            True AS _from0
        FROM ComercioContext.CapDetalles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Cap.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView69()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Cap
        [CodeFirstDatabaseSchema.Cap](T1.Cap_EmpresaID, T1.Cap_ComercioID, T1.Cap_CapID, T1.Cap_Fecha, T1.Cap_Total, T1.Cap_Notas, T1.Cap_SolicitudFondoID, T1.Cap_Pagado, T1.Cap_Finalizado, T1.Cap_EstadoID, T1.Cap_Saldo)
    FROM (
        SELECT 
            T.EmpresaID AS Cap_EmpresaID, 
            T.ComercioID AS Cap_ComercioID, 
            T.CapID AS Cap_CapID, 
            T.Fecha AS Cap_Fecha, 
            T.Total AS Cap_Total, 
            T.Notas AS Cap_Notas, 
            T.SolicitudFondoID AS Cap_SolicitudFondoID, 
            T.Pagado AS Cap_Pagado, 
            T.Finalizado AS Cap_Finalizado, 
            T.EstadoID AS Cap_EstadoID, 
            T.Saldo AS Cap_Saldo, 
            True AS _from0
        FROM ComercioContext.Caps AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.FFDetalle.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView70()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FFDetalle
        [CodeFirstDatabaseSchema.FFDetalle](T1.FFDetalle_EmpresaID, T1.FFDetalle_ComercioID, T1.FFDetalle_FFID, T1.FFDetalle_FFDetalleID, T1.FFDetalle_Fecha, T1.FFDetalle_Importe, T1.FFDetalle_Detalle, T1.FFDetalle_ImportePago)
    FROM (
        SELECT 
            T.EmpresaID AS FFDetalle_EmpresaID, 
            T.ComercioID AS FFDetalle_ComercioID, 
            T.FFID AS FFDetalle_FFID, 
            T.FFDetalleID AS FFDetalle_FFDetalleID, 
            T.Fecha AS FFDetalle_Fecha, 
            T.Importe AS FFDetalle_Importe, 
            T.Detalle AS FFDetalle_Detalle, 
            T.ImportePago AS FFDetalle_ImportePago, 
            True AS _from0
        FROM ComercioContext.FFDetalles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.FF.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView71()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FF
        [CodeFirstDatabaseSchema.FF](T1.FF_EmpresaID, T1.FF_ComercioID, T1.FF_FFID, T1.FF_Fecha, T1.FF_PendienteReposicionSemAnt, T1.FF_Remanente, T1.FF_TotalGastos, T1.FF_MontoFF, T1.FF_Repuesto, T1.FF_Notas, T1.FF_EstadoID, T1.FF_AReponer, T1.FF_Pagado, T1.FF_SolicitudFondoID)
    FROM (
        SELECT 
            T.EmpresaID AS FF_EmpresaID, 
            T.ComercioID AS FF_ComercioID, 
            T.FFID AS FF_FFID, 
            T.Fecha AS FF_Fecha, 
            T.PendienteReposicionSemAnt AS FF_PendienteReposicionSemAnt, 
            T.Remanente AS FF_Remanente, 
            T.TotalGastos AS FF_TotalGastos, 
            T.MontoFF AS FF_MontoFF, 
            T.Repuesto AS FF_Repuesto, 
            T.Notas AS FF_Notas, 
            T.EstadoID AS FF_EstadoID, 
            T.AReponer AS FF_AReponer, 
            T.Pagado AS FF_Pagado, 
            T.SolicitudFondoID AS FF_SolicitudFondoID, 
            True AS _from0
        FROM ComercioContext.FFs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Recibo.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView72()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Recibo
        [CodeFirstDatabaseSchema.Recibo](T1.Recibo_EmpresaID, T1.Recibo_ComercioID, T1.Recibo_ReciboID, T1.Recibo_ReciboIDRemoto, T1.Recibo_Fecha, T1.Recibo_FechaIngreso, T1.Recibo_Importe, T1.Recibo_Comprobante, T1.Recibo_Notas, T1.Recibo_TipoMovimientoID, T1.Recibo_TransferenciasDepositosEmpId, T1.Recibo_TransferenciasDepositosID, T1.Recibo_SolicitudFondoID, T1.Recibo_Imputado, T1.Recibo_Migrado, T1.Recibo_Conformado, T1.Recibo_Host, T1.Recibo_UsuarioID, T1.Recibo_EstadoID, T1.Recibo_ComercioAdheridoComercioID, T1.Recibo_ComercioAdheridoEmpresaID, T1.Recibo_ReciboIDAnula, T1.Recibo_CobranzaID, T1.Recibo_CreditoID, T1.Recibo_CuotaID)
    FROM (
        SELECT 
            T.EmpresaID AS Recibo_EmpresaID, 
            T.ComercioID AS Recibo_ComercioID, 
            T.ReciboID AS Recibo_ReciboID, 
            T.ReciboIDRemoto AS Recibo_ReciboIDRemoto, 
            T.Fecha AS Recibo_Fecha, 
            T.FechaIngreso AS Recibo_FechaIngreso, 
            T.Importe AS Recibo_Importe, 
            T.Comprobante AS Recibo_Comprobante, 
            T.Notas AS Recibo_Notas, 
            T.TipoMovimientoID AS Recibo_TipoMovimientoID, 
            T.TransferenciasDepositosEmpId AS Recibo_TransferenciasDepositosEmpId, 
            T.TransferenciasDepositosID AS Recibo_TransferenciasDepositosID, 
            T.SolicitudFondoID AS Recibo_SolicitudFondoID, 
            T.Imputado AS Recibo_Imputado, 
            T.Migrado AS Recibo_Migrado, 
            T.Conformado AS Recibo_Conformado, 
            T.Host AS Recibo_Host, 
            T.UsuarioID AS Recibo_UsuarioID, 
            T.EstadoID AS Recibo_EstadoID, 
            T.ComercioAdheridoComercioID AS Recibo_ComercioAdheridoComercioID, 
            T.ComercioAdheridoEmpresaID AS Recibo_ComercioAdheridoEmpresaID, 
            T.ReciboIDAnula AS Recibo_ReciboIDAnula, 
            T.CobranzaID AS Recibo_CobranzaID, 
            T.CreditoID AS Recibo_CreditoID, 
            T.CuotaID AS Recibo_CuotaID, 
            True AS _from0
        FROM ComercioContext.Recibo AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TipoMovimiento.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView73()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoMovimiento
        [CodeFirstDatabaseSchema.TipoMovimiento](T1.TipoMovimiento_TipoMovimientoID, T1.TipoMovimiento_Nombre, T1.TipoMovimiento_Descripcion, T1.TipoMovimiento_Cod, T1.TipoMovimiento_ClaseMovimientoID, T1.TipoMovimiento_CodInter, T1.TipoMovimiento_TipoMovIDAnula)
    FROM (
        SELECT 
            T.TipoMovimientoID AS TipoMovimiento_TipoMovimientoID, 
            T.Nombre AS TipoMovimiento_Nombre, 
            T.Descripcion AS TipoMovimiento_Descripcion, 
            T.Cod AS TipoMovimiento_Cod, 
            T.ClaseMovimientoID AS TipoMovimiento_ClaseMovimientoID, 
            T.CodInter AS TipoMovimiento_CodInter, 
            T.TipoMovIDAnula AS TipoMovimiento_TipoMovIDAnula, 
            True AS _from0
        FROM ComercioContext.TiposMovimientos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.EstadoTransmision.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView74()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EstadoTransmision
        [CodeFirstDatabaseSchema.EstadoTransmision](T1.EstadoTransmision_EstadoTransmisionID, T1.EstadoTransmision_Nombre, T1.EstadoTransmision_Descripcion)
    FROM (
        SELECT 
            T.EstadoTransmisionID AS EstadoTransmision_EstadoTransmisionID, 
            T.Nombre AS EstadoTransmision_Nombre, 
            T.Descripcion AS EstadoTransmision_Descripcion, 
            True AS _from0
        FROM ComercioContext.EstadoTransmisiones AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Operacion.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView75()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Operacion
        [CodeFirstDatabaseSchema.Operacion](T2.Operacion_OperacionID, T2.Operacion_Nombre, T2.Operacion_Descripcion, T2.Operacion_Discriminator)
    FROM (
        SELECT -- Constructing Discriminator
            T1.Operacion_OperacionID, 
            T1.Operacion_Nombre, 
            T1.Operacion_Descripcion, 
            CASE
                WHEN T1._from40 THEN N'TransActualizarCap'
                WHEN T1._from41 THEN N'TransActualizarCliente'
                WHEN T1._from42 THEN N'TransActualizarCobranza'
                WHEN T1._from43 THEN N'TransActualizarComprobante'
                WHEN T1._from44 THEN N'TransActualizarConceptoGastos'
                WHEN T1._from45 THEN N'TransActualizarCredito'
                WHEN T1._from46 THEN N'TransActualizarCuota'
                WHEN T1._from47 THEN N'TransActualizarFF'
                WHEN T1._from48 THEN N'TransActualizarPago'
                WHEN T1._from49 THEN N'TransActualizarProveedor'
                WHEN T1._from50 THEN N'TransActualizarProveedorSucursal'
                WHEN T1._from51 THEN N'TransActualizarRefinanciacionCobranza'
                WHEN T1._from52 THEN N'TransActualizarRefinanciacionCuota'
                WHEN T1._from53 THEN N'TransActualizarSolicitudDeFondo'
                WHEN T1._from54 THEN N'TransAgregarCliente'
                WHEN T1._from55 THEN N'TransAgregarCobranza'
                WHEN T1._from56 THEN N'TransAgregarConceptoGastoProveedor'
                WHEN T1._from57 THEN N'TransAgregarConceptoGastos'
                WHEN T1._from58 THEN N'TransAgregarProveedor'
                WHEN T1._from59 THEN N'TransAgregarProveedorSucursal'
                WHEN T1._from1 THEN N'TransAltaArregloCancelacion'
                WHEN T1._from2 THEN N'TransAltaCap'
                WHEN T1._from3 THEN N'TransAltaCobranza'
                WHEN T1._from4 THEN N'TransAltaCobranzas'
                WHEN T1._from5 THEN N'TransAltaComprobante'
                WHEN T1._from6 THEN N'TransAltaCredito'
                WHEN T1._from7 THEN N'TransAltaFF'
                WHEN T1._from8 THEN N'TransAltaGasto'
                WHEN T1._from9 THEN N'TransAltaNotaCD'
                WHEN T1._from10 THEN N'TransAltaPago'
                WHEN T1._from11 THEN N'TransAltaPagoAnticipado'
                WHEN T1._from12 THEN N'TransAltaRecibo'
                WHEN T1._from13 THEN N'TransAltaRefinanciacion'
                WHEN T1._from14 THEN N'TransAltaRefinanciacionCobranza'
                WHEN T1._from15 THEN N'TransAltaRefinanciacionCuota'
                WHEN T1._from16 THEN N'TransAltaTransDep'
                WHEN T1._from17 THEN N'TransArchivo'
                WHEN T1._from18 THEN N'TransBajaCap'
                WHEN T1._from19 THEN N'TransBajaCobranza'
                WHEN T1._from20 THEN N'TransBajaComprobante'
                WHEN T1._from21 THEN N'TransBajaCredito'
                WHEN T1._from22 THEN N'TransBajaFF'
                WHEN T1._from23 THEN N'TransBajaGasto'
                WHEN T1._from24 THEN N'TransBajaNotaCD'
                WHEN T1._from25 THEN N'TransBajaPago'
                WHEN T1._from26 THEN N'TransBajaRecibo'
                WHEN T1._from27 THEN N'TransBajaRefinanciacion'
                WHEN T1._from28 THEN N'TransBajaRefinanciacionCobranza'
                WHEN T1._from29 THEN N'TransConfirmarSolicitudDeFondo'
                WHEN T1._from30 THEN N'TransControlDiario'
                WHEN T1._from31 THEN N'TransEliminarCliente'
                WHEN T1._from32 THEN N'TransEliminarConceptoGastoProveedor'
                WHEN T1._from33 THEN N'TransEliminarConceptoGastos'
                WHEN T1._from34 THEN N'TransEliminarProveedor'
                WHEN T1._from35 THEN N'TransEliminarProveedorSucursal'
                WHEN T1._from36 THEN N'TransEnviarSolicitudDeFondo'
                WHEN T1._from37 THEN N'TransImputacionCC'
                WHEN T1._from38 THEN N'TransInfoAct'
                ELSE N'TransPagoAnticipadoNotaCD'
            END AS Operacion_Discriminator
        FROM (
            SELECT 
                T.OperacionID AS Operacion_OperacionID, 
                T.Nombre AS Operacion_Nombre, 
                T.Descripcion AS Operacion_Descripcion, 
                True AS _from0, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAltaArregloCancelacion]) THEN True ELSE False END AS _from1, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAltaCap]) THEN True ELSE False END AS _from2, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAltaCobranza]) THEN True ELSE False END AS _from3, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAltaCobranzas]) THEN True ELSE False END AS _from4, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAltaComprobante]) THEN True ELSE False END AS _from5, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAltaCredito]) THEN True ELSE False END AS _from6, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAltaFF]) THEN True ELSE False END AS _from7, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAltaGasto]) THEN True ELSE False END AS _from8, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAltaNotaCD]) THEN True ELSE False END AS _from9, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAltaPago]) THEN True ELSE False END AS _from10, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAltaPagoAnticipado]) THEN True ELSE False END AS _from11, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAltaRecibo]) THEN True ELSE False END AS _from12, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAltaRefinanciacion]) THEN True ELSE False END AS _from13, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAltaRefinanciacionCobranza]) THEN True ELSE False END AS _from14, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAltaRefinanciacionCuota]) THEN True ELSE False END AS _from15, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAltaTransDep]) THEN True ELSE False END AS _from16, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransArchivo]) THEN True ELSE False END AS _from17, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransBajaCap]) THEN True ELSE False END AS _from18, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransBajaCobranza]) THEN True ELSE False END AS _from19, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransBajaComprobante]) THEN True ELSE False END AS _from20, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransBajaCredito]) THEN True ELSE False END AS _from21, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransBajaFF]) THEN True ELSE False END AS _from22, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransBajaGasto]) THEN True ELSE False END AS _from23, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransBajaNotaCD]) THEN True ELSE False END AS _from24, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransBajaPago]) THEN True ELSE False END AS _from25, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransBajaRecibo]) THEN True ELSE False END AS _from26, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransBajaRefinanciacion]) THEN True ELSE False END AS _from27, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransBajaRefinanciacionCobranza]) THEN True ELSE False END AS _from28, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransConfirmarSolicitudDeFondo]) THEN True ELSE False END AS _from29, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransControlDiario]) THEN True ELSE False END AS _from30, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransEliminarCliente]) THEN True ELSE False END AS _from31, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransEliminarConceptoGastoProveedor]) THEN True ELSE False END AS _from32, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransEliminarConceptoGastos]) THEN True ELSE False END AS _from33, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransEliminarProveedor]) THEN True ELSE False END AS _from34, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransEliminarProveedorSucursal]) THEN True ELSE False END AS _from35, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransEnviarSolicitudDeFondo]) THEN True ELSE False END AS _from36, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransImputacionCC]) THEN True ELSE False END AS _from37, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransInfoAct]) THEN True ELSE False END AS _from38, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransPagoAnticipadoNotaCD]) THEN True ELSE False END AS _from39, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransActualizarCap]) THEN True ELSE False END AS _from40, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransActualizarCliente]) THEN True ELSE False END AS _from41, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransActualizarCobranza]) THEN True ELSE False END AS _from42, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransActualizarComprobante]) THEN True ELSE False END AS _from43, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransActualizarConceptoGastos]) THEN True ELSE False END AS _from44, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransActualizarCredito]) THEN True ELSE False END AS _from45, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransActualizarCuota]) THEN True ELSE False END AS _from46, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransActualizarFF]) THEN True ELSE False END AS _from47, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransActualizarPago]) THEN True ELSE False END AS _from48, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransActualizarProveedor]) THEN True ELSE False END AS _from49, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransActualizarProveedorSucursal]) THEN True ELSE False END AS _from50, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransActualizarRefinanciacionCobranza]) THEN True ELSE False END AS _from51, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransActualizarRefinanciacionCuota]) THEN True ELSE False END AS _from52, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransActualizarSolicitudDeFondo]) THEN True ELSE False END AS _from53, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAgregarCliente]) THEN True ELSE False END AS _from54, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAgregarCobranza]) THEN True ELSE False END AS _from55, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAgregarConceptoGastoProveedor]) THEN True ELSE False END AS _from56, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAgregarConceptoGastos]) THEN True ELSE False END AS _from57, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAgregarProveedor]) THEN True ELSE False END AS _from58, 
                CASE WHEN T IS OF (ONLY [iComercio.DAL.TransAgregarProveedorSucursal]) THEN True ELSE False END AS _from59
            FROM ComercioContext.Operaciones AS T
        ) AS T1
    ) AS T2");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.OrdenDePago.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView76()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing OrdenDePago
        [CodeFirstDatabaseSchema.OrdenDePago](T1.OrdenDePago_OrdenDePagoID, T1.OrdenDePago_EmpresaID, T1.OrdenDePago_Fecha, T1.[OrdenDePago.fecha_pago], T1.OrdenDePago_importe, T1.OrdenDePago_EstadoID, T1.OrdenDePago_ConceptoFondosID)
    FROM (
        SELECT 
            T.OrdenDePagoID AS OrdenDePago_OrdenDePagoID, 
            T.EmpresaID AS OrdenDePago_EmpresaID, 
            T.Fecha AS OrdenDePago_Fecha, 
            T.fecha_pago AS [OrdenDePago.fecha_pago], 
            T.importe AS OrdenDePago_importe, 
            T.EstadoID AS OrdenDePago_EstadoID, 
            T.ConceptoFondosID AS OrdenDePago_ConceptoFondosID, 
            True AS _from0
        FROM ComercioContext.OrdenesDePago AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TipoRetencionPlan.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView77()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoRetencionPlan
        [CodeFirstDatabaseSchema.TipoRetencionPlan](T1.TipoRetencionPlan_TipoRetencionPlanID, T1.TipoRetencionPlan_Nombre, T1.TipoRetencionPlan_Descripcion)
    FROM (
        SELECT 
            T.TipoRetencionPlanID AS TipoRetencionPlan_TipoRetencionPlanID, 
            T.Nombre AS TipoRetencionPlan_Nombre, 
            T.Descripcion AS TipoRetencionPlan_Descripcion, 
            True AS _from0
        FROM ComercioContext.TipoRetencionPlan AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Transmision.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView78()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Transmision
        [CodeFirstDatabaseSchema.Transmision](T1.Transmision_TransmisionID, T1.Transmision_OperacionID, T1.Transmision_EstadoTransmisionID, T1.Transmision_EmpresaID, T1.Transmision_ComercioID, T1.Transmision_EntidadID, T1.Transmision_EntidadID2, T1.Transmision_EntidadID3, T1.Transmision_EntidadID4, T1.Transmision_EntidadID5, T1.Transmision_EntidadID6, T1.Transmision_EntidadID7, T1.Transmision_Fecha, T1.Transmision_RutaApi, T1.Transmision_GrupoTransmision, T1.Transmision_CantTransmisiones, T1.Transmision_UltimaTransmision)
    FROM (
        SELECT 
            T.TransmisionID AS Transmision_TransmisionID, 
            T.OperacionID AS Transmision_OperacionID, 
            T.EstadoTransmisionID AS Transmision_EstadoTransmisionID, 
            T.EmpresaID AS Transmision_EmpresaID, 
            T.ComercioID AS Transmision_ComercioID, 
            T.EntidadID AS Transmision_EntidadID, 
            T.EntidadID2 AS Transmision_EntidadID2, 
            T.EntidadID3 AS Transmision_EntidadID3, 
            T.EntidadID4 AS Transmision_EntidadID4, 
            T.EntidadID5 AS Transmision_EntidadID5, 
            T.EntidadID6 AS Transmision_EntidadID6, 
            T.EntidadID7 AS Transmision_EntidadID7, 
            T.Fecha AS Transmision_Fecha, 
            T.RutaApi AS Transmision_RutaApi, 
            T.GrupoTransmision AS Transmision_GrupoTransmision, 
            T.CantTransmisiones AS Transmision_CantTransmisiones, 
            T.UltimaTransmision AS Transmision_UltimaTransmision, 
            True AS _from0
        FROM ComercioContext.Transmisiones AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PlanesTipo.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView79()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PlanesTipo
        [CodeFirstDatabaseSchema.PlanesTipo](T1.PlanesTipo_PlanesTipoID, T1.PlanesTipo_EmpresaID, T1.PlanesTipo_ComercioID, T1.PlanesTipo_TipoAV, T1.PlanesTipo_PuntoD, T1.PlanesTipo_PuntoH, T1.PlanesTipo_Inter, T1.[PlanesTipo.Inter_Incr], T1.PlanesTipo_Gasto, T1.[PlanesTipo.Gasto_Incr], T1.PlanesTipo_GastoFijo, T1.PlanesTipo_Comis, T1.[PlanesTipo.Comis_Incr], T1.PlanesTipo_MontoMax, T1.PlanesTipo_NroORden, T1.PlanesTipo_Notas, T1.PlanesTipo_Corte, T1.PlanesTipo_TipoRetencionPlanID)
    FROM (
        SELECT 
            T.PlanesTipoID AS PlanesTipo_PlanesTipoID, 
            T.EmpresaID AS PlanesTipo_EmpresaID, 
            T.ComercioID AS PlanesTipo_ComercioID, 
            T.TipoAV AS PlanesTipo_TipoAV, 
            T.PuntoD AS PlanesTipo_PuntoD, 
            T.PuntoH AS PlanesTipo_PuntoH, 
            T.Inter AS PlanesTipo_Inter, 
            T.Inter_Incr AS [PlanesTipo.Inter_Incr], 
            T.Gasto AS PlanesTipo_Gasto, 
            T.Gasto_Incr AS [PlanesTipo.Gasto_Incr], 
            T.GastoFijo AS PlanesTipo_GastoFijo, 
            T.Comis AS PlanesTipo_Comis, 
            T.Comis_Incr AS [PlanesTipo.Comis_Incr], 
            T.MontoMax AS PlanesTipo_MontoMax, 
            T.NroORden AS PlanesTipo_NroORden, 
            T.Notas AS PlanesTipo_Notas, 
            T.Corte AS PlanesTipo_Corte, 
            T.TipoRetencionPlanID AS PlanesTipo_TipoRetencionPlanID, 
            True AS _from0
        FROM ComercioContext.PlanesTipoes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PlanesBonif.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView80()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PlanesBonif
        [CodeFirstDatabaseSchema.PlanesBonif](T1.PlanesBonif_PlanesBonifID, T1.PlanesBonif_PlanesTipoID, T1.PlanesBonif_EmpresaID, T1.PlanesBonif_ComercioID, T1.PlanesBonif_TipoBoni, T1.PlanesBonif_PorBoni, T1.[PlanesBonif.Cuotas_D], T1.[PlanesBonif.Cuotas_H], T1.PlanesBonif_TipoCuota, T1.PlanesBonif_nMora, T1.PlanesBonif_FechaAlta, T1.PlanesBonif_FechaVenci, T1.PlanesBonif_UsuarioID, T1.PlanesBonif_UsuarioPC)
    FROM (
        SELECT 
            T.PlanesBonifID AS PlanesBonif_PlanesBonifID, 
            T.PlanesTipoID AS PlanesBonif_PlanesTipoID, 
            T.EmpresaID AS PlanesBonif_EmpresaID, 
            T.ComercioID AS PlanesBonif_ComercioID, 
            T.TipoBoni AS PlanesBonif_TipoBoni, 
            T.PorBoni AS PlanesBonif_PorBoni, 
            T.Cuotas_D AS [PlanesBonif.Cuotas_D], 
            T.Cuotas_H AS [PlanesBonif.Cuotas_H], 
            T.TipoCuota AS PlanesBonif_TipoCuota, 
            T.nMora AS PlanesBonif_nMora, 
            T.FechaAlta AS PlanesBonif_FechaAlta, 
            T.FechaVenci AS PlanesBonif_FechaVenci, 
            T.UsuarioID AS PlanesBonif_UsuarioID, 
            T.UsuarioPC AS PlanesBonif_UsuarioPC, 
            True AS _from0
        FROM ComercioContext.PlanesBonifs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PlanesDetalle.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView81()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PlanesDetalle
        [CodeFirstDatabaseSchema.PlanesDetalle](T1.PlanesDetalle_PlanesDetalleID, T1.PlanesDetalle_PlanesTipoID, T1.PlanesDetalle_EmpresaID, T1.PlanesDetalle_ComercioID, T1.PlanesDetalle_TipoCuota, T1.[PlanesDetalle.Cuotas_D], T1.[PlanesDetalle.Cuotas_H], T1.PlanesDetalle_SiCreditos, T1.[PlanesDetalle.nCreditos_D], T1.[PlanesDetalle.nCreditos_H], T1.PlanesDetalle_SiCancel, T1.[PlanesDetalle.nCancel_D], T1.[PlanesDetalle.nCancel_H], T1.PlanesDetalle_SiMora, T1.[PlanesDetalle.nMora_D], T1.[PlanesDetalle.nMora_H], T1.PlanesDetalle_SiValor, T1.[PlanesDetalle.nValor_D], T1.[PlanesDetalle.nValor_H], T1.[PlanesDetalle.Monto_max], T1.PlanesDetalle_FechaAlta, T1.PlanesDetalle_FechaVenci, T1.PlanesDetalle_UsuarioID, T1.PlanesDetalle_UsuarioPC)
    FROM (
        SELECT 
            T.PlanesDetalleID AS PlanesDetalle_PlanesDetalleID, 
            T.PlanesTipoID AS PlanesDetalle_PlanesTipoID, 
            T.EmpresaID AS PlanesDetalle_EmpresaID, 
            T.ComercioID AS PlanesDetalle_ComercioID, 
            T.TipoCuota AS PlanesDetalle_TipoCuota, 
            T.Cuotas_D AS [PlanesDetalle.Cuotas_D], 
            T.Cuotas_H AS [PlanesDetalle.Cuotas_H], 
            T.SiCreditos AS PlanesDetalle_SiCreditos, 
            T.nCreditos_D AS [PlanesDetalle.nCreditos_D], 
            T.nCreditos_H AS [PlanesDetalle.nCreditos_H], 
            T.SiCancel AS PlanesDetalle_SiCancel, 
            T.nCancel_D AS [PlanesDetalle.nCancel_D], 
            T.nCancel_H AS [PlanesDetalle.nCancel_H], 
            T.SiMora AS PlanesDetalle_SiMora, 
            T.nMora_D AS [PlanesDetalle.nMora_D], 
            T.nMora_H AS [PlanesDetalle.nMora_H], 
            T.SiValor AS PlanesDetalle_SiValor, 
            T.nValor_D AS [PlanesDetalle.nValor_D], 
            T.nValor_H AS [PlanesDetalle.nValor_H], 
            T.Monto_max AS [PlanesDetalle.Monto_max], 
            T.FechaAlta AS PlanesDetalle_FechaAlta, 
            T.FechaVenci AS PlanesDetalle_FechaVenci, 
            T.UsuarioID AS PlanesDetalle_UsuarioID, 
            T.UsuarioPC AS PlanesDetalle_UsuarioPC, 
            True AS _from0
        FROM ComercioContext.PlanesDetalles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PlanesVenci.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView82()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PlanesVenci
        [CodeFirstDatabaseSchema.PlanesVenci](T1.PlanesVenci_PlanesVenciID, T1.PlanesVenci_PlanesTipoID, T1.PlanesVenci_CambiaFecha, T1.PlanesVenci_DiasPrimerCuota, T1.PlanesVenci_TipoVencimiento, T1.PlanesVenci_VenciDia, T1.PlanesVenci_VenciCorte, T1.PlanesVenci_Corte1, T1.PlanesVenci_VenDia1, T1.PlanesVenci_Corte2, T1.PlanesVenci_Vendia2, T1.PlanesVenci_Vendia3, T1.PlanesVenci_FechaAlta, T1.PlanesVenci_FechaVenci, T1.PlanesVenci_UsuarioID, T1.PlanesVenci_UsuarioPC)
    FROM (
        SELECT 
            T.PlanesVenciID AS PlanesVenci_PlanesVenciID, 
            T.PlanesTipoID AS PlanesVenci_PlanesTipoID, 
            T.CambiaFecha AS PlanesVenci_CambiaFecha, 
            T.DiasPrimerCuota AS PlanesVenci_DiasPrimerCuota, 
            T.TipoVencimiento AS PlanesVenci_TipoVencimiento, 
            T.VenciDia AS PlanesVenci_VenciDia, 
            T.VenciCorte AS PlanesVenci_VenciCorte, 
            T.Corte1 AS PlanesVenci_Corte1, 
            T.VenDia1 AS PlanesVenci_VenDia1, 
            T.Corte2 AS PlanesVenci_Corte2, 
            T.Vendia2 AS PlanesVenci_Vendia2, 
            T.Vendia3 AS PlanesVenci_Vendia3, 
            T.FechaAlta AS PlanesVenci_FechaAlta, 
            T.FechaVenci AS PlanesVenci_FechaVenci, 
            T.UsuarioID AS PlanesVenci_UsuarioID, 
            T.UsuarioPC AS PlanesVenci_UsuarioPC, 
            True AS _from0
        FROM ComercioContext.PlanesVencis AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PerfilPermiso.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView83()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PerfilPermiso
        [CodeFirstDatabaseSchema.PerfilPermiso](T1.PerfilPermiso_PerfilID, T1.PerfilPermiso_PermisoID)
    FROM (
        SELECT 
            Key(T.Perfil_Permisos_Source).PerfilID AS PerfilPermiso_PerfilID, 
            Key(T.Perfil_Permisos_Target).PermisoID AS PerfilPermiso_PermisoID, 
            True AS _from0
        FROM ComercioContext.Perfil_Permisos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UsuarioPerfil.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView84()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UsuarioPerfil
        [CodeFirstDatabaseSchema.UsuarioPerfil](T1.UsuarioPerfil_UsuarioID, T1.UsuarioPerfil_PerfilID)
    FROM (
        SELECT 
            Key(T.Usuario_Perfiles_Source).UsuarioID AS UsuarioPerfil_UsuarioID, 
            Key(T.Usuario_Perfiles_Target).PerfilID AS UsuarioPerfil_PerfilID, 
            True AS _from0
        FROM ComercioContext.Usuario_Perfiles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Autorizaciones.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView85()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Autorizaciones
        [iComercio.DAL.Autorizacion](T1.Autorizacion_EmpresaID, T1.Autorizacion_ComercioID, T1.Autorizacion_AutorizacionID, T1.Autorizacion_SolicitudFondoID, T1.Autorizacion_EstadoID, T1.Autorizacion_Motivo, T1.Autorizacion_Fecha, T1.Autorizacion_PersonaID, T1.Autorizacion_EmpresaNombre, T1.Autorizacion_ConceptoFondosNombre, T1.Autorizacion_TipoSolicitudNombre, T1.Autorizacion_ComercioNombreNum, T1.Autorizacion_OrdenDePagoID, T1.Autorizacion_SolicitudFondoFechaPago, T1.Autorizacion_ChequeNumCheque, T1.Autorizacion_CuentaBancaria, T1.Autorizacion_CuentaContable, T1.Autorizacion_Importe, T1.Autorizacion_Observaciones, T1.Autorizacion_NumCajaImpCont)
    FROM (
        SELECT 
            T.EmpresaID AS Autorizacion_EmpresaID, 
            T.ComercioID AS Autorizacion_ComercioID, 
            T.AutorizacionID AS Autorizacion_AutorizacionID, 
            T.SolicitudFondoID AS Autorizacion_SolicitudFondoID, 
            T.EstadoID AS Autorizacion_EstadoID, 
            T.Motivo AS Autorizacion_Motivo, 
            T.Fecha AS Autorizacion_Fecha, 
            T.PersonaID AS Autorizacion_PersonaID, 
            T.EmpresaNombre AS Autorizacion_EmpresaNombre, 
            T.ConceptoFondosNombre AS Autorizacion_ConceptoFondosNombre, 
            T.TipoSolicitudNombre AS Autorizacion_TipoSolicitudNombre, 
            T.ComercioNombreNum AS Autorizacion_ComercioNombreNum, 
            T.OrdenDePagoID AS Autorizacion_OrdenDePagoID, 
            T.SolicitudFondoFechaPago AS Autorizacion_SolicitudFondoFechaPago, 
            T.ChequeNumCheque AS Autorizacion_ChequeNumCheque, 
            T.CuentaBancaria AS Autorizacion_CuentaBancaria, 
            T.CuentaContable AS Autorizacion_CuentaContable, 
            T.Importe AS Autorizacion_Importe, 
            T.Observaciones AS Autorizacion_Observaciones, 
            T.NumCajaImpCont AS Autorizacion_NumCajaImpCont, 
            True AS _from0
        FROM CodeFirstDatabase.Autorizacion AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Comercios.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView86()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Comercios
        [iComercio.DAL.Comercio](T1.Comercio_EmpresaID, T1.Comercio_ComercioID, T1.Comercio_Nombre, T1.Comercio_Descripcion, T1.Comercio_Domicilio, T1.Comercio_Barrio, T1.Comercio_TipoComercioID, T1.Comercio_LocalidadID, T1.Comercio_ProvinciaID, T1.Comercio_PaisId, T1.Comercio_Telefono1, T1.Comercio_Telefono2, T1.Comercio_Recorrido, T1.Comercio_Cuit, T1.Comercio_Mail1, T1.Comercio_Mail2, T1.Comercio_CodPromo, T1.Comercio_PorPromo, T1.Comercio_PagaBanco, T1.Comercio_Venci, T1.Comercio_Corte, T1.Comercio_Habilitado, T1.Comercio_Por30, T1.Comercio_Por30M, T1.Comercio_Clave, T1.Comercio_Compu, T1.Comercio_Fanta, T1.Comercio_Categoria, T1.Comercio_Tolerancia, T1.Comercio_NumCredito, T1.Comercio_NumCliente, T1.Comercio_NumRendi, T1.Comercio_FechaIngreso, T1.Comercio_FechaPRendi, T1.Comercio_Contacto1ID, T1.Comercio_Contacto2ID, T1.Comercio_Titular1ID, T1.Comercio_Titular2ID, T1.Comercio_Rubro, T1.Comercio_CanLoc, T1.Comercio_CanPer, T1.Comercio_CanVid, T1.Comercio_CtaDep, T1.Comercio_ForPag, T1.Comercio_OrdCheq, T1.Comercio_PerFinan, T1.Comercio_LlevaGar, T1.Comercio_Notas, T1.Comercio_Cuenta, T1.Comercio_CredPri, T1.Comercio_CredSeg, T1.Comercio_Consolid, T1.Comercio_Trab, T1.Comercio_Refinancia, T1.Comercio_IntRef, T1.Comercio_IntAde, T1.Comercio_IntArr, T1.Comercio_CantCuoArr, T1.Comercio_PorSueldo, T1.Comercio_Llp, T1.Comercio_Pm, T1.Comercio_ImpCi, T1.Comercio_FechaCi, T1.Comercio_ImpCiVta, T1.Comercio_CiVtaFecha, T1.Comercio_Principal, T1.Comercio_PuedeCobrar, T1.Comercio_Actualiza, T1.Comercio_ToleranciaBoni) WITH 
        RELATIONSHIP(CREATEREF(ComercioContext.Personas, ROW(T1.[Comercio_Contacto1.Comercio_Contacto1_Target.PersonaID]),[iComercio.DAL.Persona]),[iComercio.DAL.Comercio_Contacto1],Comercio_Contacto1_Source,Comercio_Contacto1_Target) 
        RELATIONSHIP(CREATEREF(ComercioContext.Personas, ROW(T1.[Comercio_Contacto2.Comercio_Contacto2_Target.PersonaID]),[iComercio.DAL.Persona]),[iComercio.DAL.Comercio_Contacto2],Comercio_Contacto2_Source,Comercio_Contacto2_Target) 
        RELATIONSHIP(CREATEREF(ComercioContext.Personas, ROW(T1.[Comercio_Titular1.Comercio_Titular1_Target.PersonaID]),[iComercio.DAL.Persona]),[iComercio.DAL.Comercio_Titular1],Comercio_Titular1_Source,Comercio_Titular1_Target) 
        RELATIONSHIP(CREATEREF(ComercioContext.Personas, ROW(T1.[Comercio_Titular2.Comercio_Titular2_Target.PersonaID]),[iComercio.DAL.Persona]),[iComercio.DAL.Comercio_Titular2],Comercio_Titular2_Source,Comercio_Titular2_Target) 
    FROM (
        SELECT 
            T.EmpresaID AS Comercio_EmpresaID, 
            T.ComercioID AS Comercio_ComercioID, 
            T.Nombre AS Comercio_Nombre, 
            T.Descripcion AS Comercio_Descripcion, 
            T.Domicilio AS Comercio_Domicilio, 
            T.Barrio AS Comercio_Barrio, 
            T.TipoComercioID AS Comercio_TipoComercioID, 
            T.LocalidadID AS Comercio_LocalidadID, 
            T.ProvinciaID AS Comercio_ProvinciaID, 
            T.PaisId AS Comercio_PaisId, 
            T.Telefono1 AS Comercio_Telefono1, 
            T.Telefono2 AS Comercio_Telefono2, 
            T.Recorrido AS Comercio_Recorrido, 
            T.Cuit AS Comercio_Cuit, 
            T.Mail1 AS Comercio_Mail1, 
            T.Mail2 AS Comercio_Mail2, 
            T.CodPromo AS Comercio_CodPromo, 
            T.PorPromo AS Comercio_PorPromo, 
            T.PagaBanco AS Comercio_PagaBanco, 
            T.Venci AS Comercio_Venci, 
            T.Corte AS Comercio_Corte, 
            T.Habilitado AS Comercio_Habilitado, 
            T.Por30 AS Comercio_Por30, 
            T.Por30M AS Comercio_Por30M, 
            T.Clave AS Comercio_Clave, 
            T.Compu AS Comercio_Compu, 
            T.Fanta AS Comercio_Fanta, 
            T.Categoria AS Comercio_Categoria, 
            T.Tolerancia AS Comercio_Tolerancia, 
            T.NumCredito AS Comercio_NumCredito, 
            T.NumCliente AS Comercio_NumCliente, 
            T.NumRendi AS Comercio_NumRendi, 
            T.FechaIngreso AS Comercio_FechaIngreso, 
            T.FechaPRendi AS Comercio_FechaPRendi, 
            T.Contacto1ID AS Comercio_Contacto1ID, 
            T.Contacto2ID AS Comercio_Contacto2ID, 
            T.Titular1ID AS Comercio_Titular1ID, 
            T.Titular2ID AS Comercio_Titular2ID, 
            T.Rubro AS Comercio_Rubro, 
            T.CanLoc AS Comercio_CanLoc, 
            T.CanPer AS Comercio_CanPer, 
            T.CanVid AS Comercio_CanVid, 
            T.CtaDep AS Comercio_CtaDep, 
            T.ForPag AS Comercio_ForPag, 
            T.OrdCheq AS Comercio_OrdCheq, 
            T.PerFinan AS Comercio_PerFinan, 
            T.LlevaGar AS Comercio_LlevaGar, 
            T.Notas AS Comercio_Notas, 
            T.Cuenta AS Comercio_Cuenta, 
            T.CredPri AS Comercio_CredPri, 
            T.CredSeg AS Comercio_CredSeg, 
            T.Consolid AS Comercio_Consolid, 
            T.Trab AS Comercio_Trab, 
            T.Refinancia AS Comercio_Refinancia, 
            T.IntRef AS Comercio_IntRef, 
            T.IntAde AS Comercio_IntAde, 
            T.IntArr AS Comercio_IntArr, 
            T.CantCuoArr AS Comercio_CantCuoArr, 
            T.PorSueldo AS Comercio_PorSueldo, 
            T.Llp AS Comercio_Llp, 
            T.Pm AS Comercio_Pm, 
            T.ImpCi AS Comercio_ImpCi, 
            T.FechaCi AS Comercio_FechaCi, 
            T.ImpCiVta AS Comercio_ImpCiVta, 
            T.CiVtaFecha AS Comercio_CiVtaFecha, 
            T.Principal AS Comercio_Principal, 
            T.PuedeCobrar AS Comercio_PuedeCobrar, 
            T.Actualiza AS Comercio_Actualiza, 
            T.ToleranciaBoni AS Comercio_ToleranciaBoni, 
            True AS _from0, 
            T.Contacto1_PersonaID AS [Comercio_Contacto1.Comercio_Contacto1_Target.PersonaID], 
            T.Contacto2_PersonaID AS [Comercio_Contacto2.Comercio_Contacto2_Target.PersonaID], 
            T.Titular1_PersonaID AS [Comercio_Titular1.Comercio_Titular1_Target.PersonaID], 
            T.Titular2_PersonaID AS [Comercio_Titular2.Comercio_Titular2_Target.PersonaID]
        FROM CodeFirstDatabase.Comercio AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Comercio_Contacto1.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView87()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Comercio_Contacto1
        [iComercio.DAL.Comercio_Contacto1](T3.[Comercio_Contacto1.Comercio_Contacto1_Source], T3.[Comercio_Contacto1.Comercio_Contacto1_Target])
    FROM (
        SELECT -- Constructing Comercio_Contacto1_Source
            CreateRef(ComercioContext.Comercios, row(T2.[Comercio_Contacto1.Comercio_Contacto1_Source.EmpresaID], T2.[Comercio_Contacto1.Comercio_Contacto1_Source.ComercioID]), [iComercio.DAL.Comercio]) AS [Comercio_Contacto1.Comercio_Contacto1_Source], 
            T2.[Comercio_Contacto1.Comercio_Contacto1_Target]
        FROM (
            SELECT -- Constructing Comercio_Contacto1_Target
                T1.[Comercio_Contacto1.Comercio_Contacto1_Source.EmpresaID], 
                T1.[Comercio_Contacto1.Comercio_Contacto1_Source.ComercioID], 
                CreateRef(ComercioContext.Personas, row(T1.[Comercio_Contacto1.Comercio_Contacto1_Target.PersonaID]), [iComercio.DAL.Persona]) AS [Comercio_Contacto1.Comercio_Contacto1_Target]
            FROM (
                SELECT 
                    T.EmpresaID AS [Comercio_Contacto1.Comercio_Contacto1_Source.EmpresaID], 
                    T.ComercioID AS [Comercio_Contacto1.Comercio_Contacto1_Source.ComercioID], 
                    T.Contacto1_PersonaID AS [Comercio_Contacto1.Comercio_Contacto1_Target.PersonaID], 
                    True AS _from0
                FROM CodeFirstDatabase.Comercio AS T
                WHERE T.Contacto1_PersonaID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Comercio_Contacto2.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView88()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Comercio_Contacto2
        [iComercio.DAL.Comercio_Contacto2](T3.[Comercio_Contacto2.Comercio_Contacto2_Source], T3.[Comercio_Contacto2.Comercio_Contacto2_Target])
    FROM (
        SELECT -- Constructing Comercio_Contacto2_Source
            CreateRef(ComercioContext.Comercios, row(T2.[Comercio_Contacto2.Comercio_Contacto2_Source.EmpresaID], T2.[Comercio_Contacto2.Comercio_Contacto2_Source.ComercioID]), [iComercio.DAL.Comercio]) AS [Comercio_Contacto2.Comercio_Contacto2_Source], 
            T2.[Comercio_Contacto2.Comercio_Contacto2_Target]
        FROM (
            SELECT -- Constructing Comercio_Contacto2_Target
                T1.[Comercio_Contacto2.Comercio_Contacto2_Source.EmpresaID], 
                T1.[Comercio_Contacto2.Comercio_Contacto2_Source.ComercioID], 
                CreateRef(ComercioContext.Personas, row(T1.[Comercio_Contacto2.Comercio_Contacto2_Target.PersonaID]), [iComercio.DAL.Persona]) AS [Comercio_Contacto2.Comercio_Contacto2_Target]
            FROM (
                SELECT 
                    T.EmpresaID AS [Comercio_Contacto2.Comercio_Contacto2_Source.EmpresaID], 
                    T.ComercioID AS [Comercio_Contacto2.Comercio_Contacto2_Source.ComercioID], 
                    T.Contacto2_PersonaID AS [Comercio_Contacto2.Comercio_Contacto2_Target.PersonaID], 
                    True AS _from0
                FROM CodeFirstDatabase.Comercio AS T
                WHERE T.Contacto2_PersonaID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Comercio_Titular1.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView89()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Comercio_Titular1
        [iComercio.DAL.Comercio_Titular1](T3.[Comercio_Titular1.Comercio_Titular1_Source], T3.[Comercio_Titular1.Comercio_Titular1_Target])
    FROM (
        SELECT -- Constructing Comercio_Titular1_Source
            CreateRef(ComercioContext.Comercios, row(T2.[Comercio_Titular1.Comercio_Titular1_Source.EmpresaID], T2.[Comercio_Titular1.Comercio_Titular1_Source.ComercioID]), [iComercio.DAL.Comercio]) AS [Comercio_Titular1.Comercio_Titular1_Source], 
            T2.[Comercio_Titular1.Comercio_Titular1_Target]
        FROM (
            SELECT -- Constructing Comercio_Titular1_Target
                T1.[Comercio_Titular1.Comercio_Titular1_Source.EmpresaID], 
                T1.[Comercio_Titular1.Comercio_Titular1_Source.ComercioID], 
                CreateRef(ComercioContext.Personas, row(T1.[Comercio_Titular1.Comercio_Titular1_Target.PersonaID]), [iComercio.DAL.Persona]) AS [Comercio_Titular1.Comercio_Titular1_Target]
            FROM (
                SELECT 
                    T.EmpresaID AS [Comercio_Titular1.Comercio_Titular1_Source.EmpresaID], 
                    T.ComercioID AS [Comercio_Titular1.Comercio_Titular1_Source.ComercioID], 
                    T.Titular1_PersonaID AS [Comercio_Titular1.Comercio_Titular1_Target.PersonaID], 
                    True AS _from0
                FROM CodeFirstDatabase.Comercio AS T
                WHERE T.Titular1_PersonaID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Comercio_Titular2.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView90()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Comercio_Titular2
        [iComercio.DAL.Comercio_Titular2](T3.[Comercio_Titular2.Comercio_Titular2_Source], T3.[Comercio_Titular2.Comercio_Titular2_Target])
    FROM (
        SELECT -- Constructing Comercio_Titular2_Source
            CreateRef(ComercioContext.Comercios, row(T2.[Comercio_Titular2.Comercio_Titular2_Source.EmpresaID], T2.[Comercio_Titular2.Comercio_Titular2_Source.ComercioID]), [iComercio.DAL.Comercio]) AS [Comercio_Titular2.Comercio_Titular2_Source], 
            T2.[Comercio_Titular2.Comercio_Titular2_Target]
        FROM (
            SELECT -- Constructing Comercio_Titular2_Target
                T1.[Comercio_Titular2.Comercio_Titular2_Source.EmpresaID], 
                T1.[Comercio_Titular2.Comercio_Titular2_Source.ComercioID], 
                CreateRef(ComercioContext.Personas, row(T1.[Comercio_Titular2.Comercio_Titular2_Target.PersonaID]), [iComercio.DAL.Persona]) AS [Comercio_Titular2.Comercio_Titular2_Target]
            FROM (
                SELECT 
                    T.EmpresaID AS [Comercio_Titular2.Comercio_Titular2_Source.EmpresaID], 
                    T.ComercioID AS [Comercio_Titular2.Comercio_Titular2_Source.ComercioID], 
                    T.Titular2_PersonaID AS [Comercio_Titular2.Comercio_Titular2_Target.PersonaID], 
                    True AS _from0
                FROM CodeFirstDatabase.Comercio AS T
                WHERE T.Titular2_PersonaID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Personas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView91()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Personas
        [iComercio.DAL.Persona](T1.Persona_PersonaID, T1.Persona_Nombre, T1.Persona_Apellido, T1.Persona_Documento, T1.Persona_Domicilio, T1.Persona_Fotografia, T1.Persona_LocalidadID, T1.Persona_ProvinciaID, T1.Persona_PaisID, T1.Persona_Telefono1, T1.Persona_Telefono2, T1.Persona_Mail1, T1.Persona_Mail2, T1.Persona_Cel, T1.Persona_Edad, T1.Persona_FechaNacimiento, T1.Persona_TiposDocumentoID) WITH 
        RELATIONSHIP(CREATEREF(ComercioContext.TiposDocumento, ROW(T1.[Persona_TiposDocumento.Persona_TiposDocumento_Target.TipoDocumentoID]),[iComercio.DAL.TipoDocumento]),[iComercio.DAL.Persona_TiposDocumento],Persona_TiposDocumento_Source,Persona_TiposDocumento_Target) 
    FROM (
        SELECT 
            T.PersonaID AS Persona_PersonaID, 
            T.Nombre AS Persona_Nombre, 
            T.Apellido AS Persona_Apellido, 
            T.Documento AS Persona_Documento, 
            T.Domicilio AS Persona_Domicilio, 
            T.Fotografia AS Persona_Fotografia, 
            T.LocalidadID AS Persona_LocalidadID, 
            T.ProvinciaID AS Persona_ProvinciaID, 
            T.PaisID AS Persona_PaisID, 
            T.Telefono1 AS Persona_Telefono1, 
            T.Telefono2 AS Persona_Telefono2, 
            T.Mail1 AS Persona_Mail1, 
            T.Mail2 AS Persona_Mail2, 
            T.Cel AS Persona_Cel, 
            T.Edad AS Persona_Edad, 
            T.FechaNacimiento AS Persona_FechaNacimiento, 
            T.TiposDocumentoID AS Persona_TiposDocumentoID, 
            True AS _from0, 
            T.TiposDocumento_TipoDocumentoID AS [Persona_TiposDocumento.Persona_TiposDocumento_Target.TipoDocumentoID]
        FROM CodeFirstDatabase.Persona AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Persona_TiposDocumento.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView92()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Persona_TiposDocumento
        [iComercio.DAL.Persona_TiposDocumento](T3.[Persona_TiposDocumento.Persona_TiposDocumento_Source], T3.[Persona_TiposDocumento.Persona_TiposDocumento_Target])
    FROM (
        SELECT -- Constructing Persona_TiposDocumento_Source
            CreateRef(ComercioContext.Personas, row(T2.[Persona_TiposDocumento.Persona_TiposDocumento_Source.PersonaID]), [iComercio.DAL.Persona]) AS [Persona_TiposDocumento.Persona_TiposDocumento_Source], 
            T2.[Persona_TiposDocumento.Persona_TiposDocumento_Target]
        FROM (
            SELECT -- Constructing Persona_TiposDocumento_Target
                T1.[Persona_TiposDocumento.Persona_TiposDocumento_Source.PersonaID], 
                CreateRef(ComercioContext.TiposDocumento, row(T1.[Persona_TiposDocumento.Persona_TiposDocumento_Target.TipoDocumentoID]), [iComercio.DAL.TipoDocumento]) AS [Persona_TiposDocumento.Persona_TiposDocumento_Target]
            FROM (
                SELECT 
                    T.PersonaID AS [Persona_TiposDocumento.Persona_TiposDocumento_Source.PersonaID], 
                    T.TiposDocumento_TipoDocumentoID AS [Persona_TiposDocumento.Persona_TiposDocumento_Target.TipoDocumentoID], 
                    True AS _from0
                FROM CodeFirstDatabase.Persona AS T
                WHERE T.TiposDocumento_TipoDocumentoID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Localidades.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView93()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Localidades
        [iComercio.DAL.Localidad](T1.Localidad_PaisId, T1.Localidad_ProvinciaID, T1.Localidad_LocalidadID, T1.Localidad_Nombre, T1.Localidad_Descripcion, T1.Localidad_CodPostal, T1.Localidad_CodTel, T1.Localidad_X, T1.Localidad_Y)
    FROM (
        SELECT 
            T.PaisId AS Localidad_PaisId, 
            T.ProvinciaID AS Localidad_ProvinciaID, 
            T.LocalidadID AS Localidad_LocalidadID, 
            T.Nombre AS Localidad_Nombre, 
            T.Descripcion AS Localidad_Descripcion, 
            T.CodPostal AS Localidad_CodPostal, 
            T.CodTel AS Localidad_CodTel, 
            T.X AS Localidad_X, 
            T.Y AS Localidad_Y, 
            True AS _from0
        FROM CodeFirstDatabase.Localidad AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Paises.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView94()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Paises
        [iComercio.DAL.Pais](T1.Pais_PaisID, T1.Pais_Nombre, T1.Pais_Descripcion, T1.Pais_CodIsoNumerico, T1.Pais_CodIso2, T1.Pais_CodIso3, T1.Pais_DirImaBandera, T1.Pais_CodTel, T1.Pais_X, T1.Pais_Y)
    FROM (
        SELECT 
            T.PaisID AS Pais_PaisID, 
            T.Nombre AS Pais_Nombre, 
            T.Descripcion AS Pais_Descripcion, 
            T.CodIsoNumerico AS Pais_CodIsoNumerico, 
            T.CodIso2 AS Pais_CodIso2, 
            T.CodIso3 AS Pais_CodIso3, 
            T.DirImaBandera AS Pais_DirImaBandera, 
            T.CodTel AS Pais_CodTel, 
            T.X AS Pais_X, 
            T.Y AS Pais_Y, 
            True AS _from0
        FROM CodeFirstDatabase.Pais AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Provincias.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView95()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Provincias
        [iComercio.DAL.Provincia](T1.Provincia_PaisId, T1.Provincia_ProvinciaID, T1.Provincia_Nombre, T1.Provincia_Descripcion, T1.Provincia_CodIso, T1.Provincia_DirImaEscudo, T1.Provincia_CodTel, T1.Provincia_X, T1.Provincia_Y)
    FROM (
        SELECT 
            T.PaisId AS Provincia_PaisId, 
            T.ProvinciaID AS Provincia_ProvinciaID, 
            T.Nombre AS Provincia_Nombre, 
            T.Descripcion AS Provincia_Descripcion, 
            T.CodIso AS Provincia_CodIso, 
            T.DirImaEscudo AS Provincia_DirImaEscudo, 
            T.CodTel AS Provincia_CodTel, 
            T.X AS Provincia_X, 
            T.Y AS Provincia_Y, 
            True AS _from0
        FROM CodeFirstDatabase.Provincia AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TiposDocumento.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView96()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TiposDocumento
        [iComercio.DAL.TipoDocumento](T1.TipoDocumento_TipoDocumentoID, T1.TipoDocumento_Nombre, T1.TipoDocumento_Descripcion)
    FROM (
        SELECT 
            T.TipoDocumentoID AS TipoDocumento_TipoDocumentoID, 
            T.Nombre AS TipoDocumento_Nombre, 
            T.Descripcion AS TipoDocumento_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.TipoDocumento AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Empresas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView97()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Empresas
        [iComercio.DAL.Empresa](T1.Empresa_EmpresaID, T1.Empresa_Nombre, T1.Empresa_Descripcion, T1.Empresa_NombreBase, T1.Empresa_Mail, T1.Empresa_MailCont, T1.Empresa_MailNotificaciones, T1.Empresa_MailNotificacionesCont, T1.Empresa_ServidorCorreo, T1.Empresa_EmpresaDiminutivo, T1.Empresa_Cuit, T1.Empresa_IIBB, T1.Empresa_IA, T1.Empresa_Domicilio, T1.Empresa_Localidad, T1.Empresa_Provincia, T1.Empresa_CP, T1.Empresa_Telefono1, T1.Empresa_Telefono2, T1.Empresa_Telefono3, T1.Empresa_Telefonos)
    FROM (
        SELECT 
            T.EmpresaID AS Empresa_EmpresaID, 
            T.Nombre AS Empresa_Nombre, 
            T.Descripcion AS Empresa_Descripcion, 
            T.NombreBase AS Empresa_NombreBase, 
            T.Mail AS Empresa_Mail, 
            T.MailCont AS Empresa_MailCont, 
            T.MailNotificaciones AS Empresa_MailNotificaciones, 
            T.MailNotificacionesCont AS Empresa_MailNotificacionesCont, 
            T.ServidorCorreo AS Empresa_ServidorCorreo, 
            T.EmpresaDiminutivo AS Empresa_EmpresaDiminutivo, 
            T.Cuit AS Empresa_Cuit, 
            T.IIBB AS Empresa_IIBB, 
            T.IA AS Empresa_IA, 
            T.Domicilio AS Empresa_Domicilio, 
            T.Localidad AS Empresa_Localidad, 
            T.Provincia AS Empresa_Provincia, 
            T.CP AS Empresa_CP, 
            T.Telefono1 AS Empresa_Telefono1, 
            T.Telefono2 AS Empresa_Telefono2, 
            T.Telefono3 AS Empresa_Telefono3, 
            T.Telefonos AS Empresa_Telefonos, 
            True AS _from0
        FROM CodeFirstDatabase.Empresa AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.CuentasBancarias.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView98()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CuentasBancarias
        [iComercio.DAL.CuentaBancaria](T1.CuentaBancaria_EmpresaID, T1.CuentaBancaria_CuentaBancariaID, T1.CuentaBancaria_NumCuenta, T1.CuentaBancaria_Cbu, T1.CuentaBancaria_Descripcion, T1.CuentaBancaria_Notas, T1.CuentaBancaria_FechaAlta, T1.CuentaBancaria_ComercioID, T1.CuentaBancaria_ClaseCuentaBancariaID, T1.CuentaBancaria_TipoCuentaBancariaID, T1.CuentaBancaria_SucursalBancoID, T1.CuentaBancaria_BancoID, T1.CuentaBancaria_MonedaID, T1.CuentaBancaria_EmiteCheque, T1.CuentaBancaria_CuentaContable, T1.CuentaBancaria_EstadoID, T1.CuentaBancaria_PersonaID, T1.[CuentaBancaria.prov_id], T1.[CuentaBancaria.provsuc_id], T1.CuentaBancaria_DebitoDirecto, T1.CuentaBancaria_orden) WITH 
        RELATIONSHIP(CREATEREF(ComercioContext.Proveedores, ROW(T1.[CuentaBancaria_Proveedor.CuentaBancaria_Proveedor_Target.ProveedorID]),[iComercio.DAL.Proveedor]),[iComercio.DAL.CuentaBancaria_Proveedor],CuentaBancaria_Proveedor_Source,CuentaBancaria_Proveedor_Target) 
        RELATIONSHIP(CREATEREF(ComercioContext.ProveedoresSucursales, ROW(T1.[CuentaBancaria_ProveedorSucursal.CuentaBancaria_ProveedorSucursal_Target.ProveedorSucursalID]),[iComercio.DAL.ProveedorSucursal]),[iComercio.DAL.CuentaBancaria_ProveedorSucursal],CuentaBancaria_ProveedorSucursal_Source,CuentaBancaria_ProveedorSucursal_Target) 
    FROM (
        SELECT 
            T.EmpresaID AS CuentaBancaria_EmpresaID, 
            T.CuentaBancariaID AS CuentaBancaria_CuentaBancariaID, 
            T.NumCuenta AS CuentaBancaria_NumCuenta, 
            T.Cbu AS CuentaBancaria_Cbu, 
            T.Descripcion AS CuentaBancaria_Descripcion, 
            T.Notas AS CuentaBancaria_Notas, 
            T.FechaAlta AS CuentaBancaria_FechaAlta, 
            T.ComercioID AS CuentaBancaria_ComercioID, 
            T.ClaseCuentaBancariaID AS CuentaBancaria_ClaseCuentaBancariaID, 
            T.TipoCuentaBancariaID AS CuentaBancaria_TipoCuentaBancariaID, 
            T.SucursalBancoID AS CuentaBancaria_SucursalBancoID, 
            T.BancoID AS CuentaBancaria_BancoID, 
            T.MonedaID AS CuentaBancaria_MonedaID, 
            T.EmiteCheque AS CuentaBancaria_EmiteCheque, 
            T.CuentaContable AS CuentaBancaria_CuentaContable, 
            T.EstadoID AS CuentaBancaria_EstadoID, 
            T.PersonaID AS CuentaBancaria_PersonaID, 
            T.prov_id AS [CuentaBancaria.prov_id], 
            T.provsuc_id AS [CuentaBancaria.provsuc_id], 
            T.DebitoDirecto AS CuentaBancaria_DebitoDirecto, 
            T.orden AS CuentaBancaria_orden, 
            True AS _from0, 
            T.Proveedor_ProveedorID AS [CuentaBancaria_Proveedor.CuentaBancaria_Proveedor_Target.ProveedorID], 
            T.ProveedorSucursal_ProveedorSucursalID AS [CuentaBancaria_ProveedorSucursal.CuentaBancaria_ProveedorSucursal_Target.ProveedorSucursalID]
        FROM CodeFirstDatabase.CuentaBancaria AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.CuentaBancaria_Proveedor.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView99()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CuentaBancaria_Proveedor
        [iComercio.DAL.CuentaBancaria_Proveedor](T3.[CuentaBancaria_Proveedor.CuentaBancaria_Proveedor_Source], T3.[CuentaBancaria_Proveedor.CuentaBancaria_Proveedor_Target])
    FROM (
        SELECT -- Constructing CuentaBancaria_Proveedor_Source
            CreateRef(ComercioContext.CuentasBancarias, row(T2.[CuentaBancaria_Proveedor.CuentaBancaria_Proveedor_Source.EmpresaID], T2.[CuentaBancaria_Proveedor.CuentaBancaria_Proveedor_Source.CuentaBancariaID]), [iComercio.DAL.CuentaBancaria]) AS [CuentaBancaria_Proveedor.CuentaBancaria_Proveedor_Source], 
            T2.[CuentaBancaria_Proveedor.CuentaBancaria_Proveedor_Target]
        FROM (
            SELECT -- Constructing CuentaBancaria_Proveedor_Target
                T1.[CuentaBancaria_Proveedor.CuentaBancaria_Proveedor_Source.EmpresaID], 
                T1.[CuentaBancaria_Proveedor.CuentaBancaria_Proveedor_Source.CuentaBancariaID], 
                CreateRef(ComercioContext.Proveedores, row(T1.[CuentaBancaria_Proveedor.CuentaBancaria_Proveedor_Target.ProveedorID]), [iComercio.DAL.Proveedor]) AS [CuentaBancaria_Proveedor.CuentaBancaria_Proveedor_Target]
            FROM (
                SELECT 
                    T.EmpresaID AS [CuentaBancaria_Proveedor.CuentaBancaria_Proveedor_Source.EmpresaID], 
                    T.CuentaBancariaID AS [CuentaBancaria_Proveedor.CuentaBancaria_Proveedor_Source.CuentaBancariaID], 
                    T.Proveedor_ProveedorID AS [CuentaBancaria_Proveedor.CuentaBancaria_Proveedor_Target.ProveedorID], 
                    True AS _from0
                FROM CodeFirstDatabase.CuentaBancaria AS T
                WHERE T.Proveedor_ProveedorID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ComercioContext.CuentaBancaria_ProveedorSucursal.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView100()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CuentaBancaria_ProveedorSucursal
        [iComercio.DAL.CuentaBancaria_ProveedorSucursal](T3.[CuentaBancaria_ProveedorSucursal.CuentaBancaria_ProveedorSucursal_Source], T3.[CuentaBancaria_ProveedorSucursal.CuentaBancaria_ProveedorSucursal_Target])
    FROM (
        SELECT -- Constructing CuentaBancaria_ProveedorSucursal_Source
            CreateRef(ComercioContext.CuentasBancarias, row(T2.[CuentaBancaria_ProveedorSucursal.CuentaBancaria_ProveedorSucursal_Source.EmpresaID], T2.[CuentaBancaria_ProveedorSucursal.CuentaBancaria_ProveedorSucursal_Source.CuentaBancariaID]), [iComercio.DAL.CuentaBancaria]) AS [CuentaBancaria_ProveedorSucursal.CuentaBancaria_ProveedorSucursal_Source], 
            T2.[CuentaBancaria_ProveedorSucursal.CuentaBancaria_ProveedorSucursal_Target]
        FROM (
            SELECT -- Constructing CuentaBancaria_ProveedorSucursal_Target
                T1.[CuentaBancaria_ProveedorSucursal.CuentaBancaria_ProveedorSucursal_Source.EmpresaID], 
                T1.[CuentaBancaria_ProveedorSucursal.CuentaBancaria_ProveedorSucursal_Source.CuentaBancariaID], 
                CreateRef(ComercioContext.ProveedoresSucursales, row(T1.[CuentaBancaria_ProveedorSucursal.CuentaBancaria_ProveedorSucursal_Target.ProveedorSucursalID]), [iComercio.DAL.ProveedorSucursal]) AS [CuentaBancaria_ProveedorSucursal.CuentaBancaria_ProveedorSucursal_Target]
            FROM (
                SELECT 
                    T.EmpresaID AS [CuentaBancaria_ProveedorSucursal.CuentaBancaria_ProveedorSucursal_Source.EmpresaID], 
                    T.CuentaBancariaID AS [CuentaBancaria_ProveedorSucursal.CuentaBancaria_ProveedorSucursal_Source.CuentaBancariaID], 
                    T.ProveedorSucursal_ProveedorSucursalID AS [CuentaBancaria_ProveedorSucursal.CuentaBancaria_ProveedorSucursal_Target.ProveedorSucursalID], 
                    True AS _from0
                FROM CodeFirstDatabase.CuentaBancaria AS T
                WHERE T.ProveedorSucursal_ProveedorSucursalID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Bancos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView101()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Bancos
        [iComercio.DAL.Banco](T1.Banco_BancoID, T1.Banco_Nombre, T1.Banco_Descripcion)
    FROM (
        SELECT 
            T.BancoID AS Banco_BancoID, 
            T.Nombre AS Banco_Nombre, 
            T.Descripcion AS Banco_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.Banco AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Chequera.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView102()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Chequera
        [iComercio.DAL.Chequera](T1.Chequera_EmpresaID, T1.Chequera_CuentaBancariaID, T1.Chequera_ChequeraID, T1.Chequera_NumTalonario, T1.Chequera_NumDesde, T1.Chequera_NumHasta, T1.Chequera_NumProx, T1.Chequera_FechaAlta, T1.Chequera_EstadoID)
    FROM (
        SELECT 
            T.EmpresaID AS Chequera_EmpresaID, 
            T.CuentaBancariaID AS Chequera_CuentaBancariaID, 
            T.ChequeraID AS Chequera_ChequeraID, 
            T.NumTalonario AS Chequera_NumTalonario, 
            T.NumDesde AS Chequera_NumDesde, 
            T.NumHasta AS Chequera_NumHasta, 
            T.NumProx AS Chequera_NumProx, 
            T.FechaAlta AS Chequera_FechaAlta, 
            T.EstadoID AS Chequera_EstadoID, 
            True AS _from0
        FROM CodeFirstDatabase.Chequera AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Cheques.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView103()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Cheques
        [iComercio.DAL.Cheque](T1.Cheque_EmpresaID, T1.Cheque_CuentaBancariaID, T1.Cheque_ChequeraID, T1.Cheque_ChequeID, T1.Cheque_Monto, T1.Cheque_TipoChequeID, T1.Cheque_EstadoID)
    FROM (
        SELECT 
            T.EmpresaID AS Cheque_EmpresaID, 
            T.CuentaBancariaID AS Cheque_CuentaBancariaID, 
            T.ChequeraID AS Cheque_ChequeraID, 
            T.ChequeID AS Cheque_ChequeID, 
            T.Monto AS Cheque_Monto, 
            T.TipoChequeID AS Cheque_TipoChequeID, 
            T.EstadoID AS Cheque_EstadoID, 
            True AS _from0
        FROM CodeFirstDatabase.Cheque AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Estados.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView104()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Estados
        [iComercio.DAL.Estado](T1.Estado_EstadoID, T1.Estado_Nombre, T1.Estado_Descripcion, T1.Estado_TipoEstadoID, T1.[Estado.est_color])
    FROM (
        SELECT 
            T.EstadoID AS Estado_EstadoID, 
            T.Nombre AS Estado_Nombre, 
            T.Descripcion AS Estado_Descripcion, 
            T.TipoEstadoID AS Estado_TipoEstadoID, 
            T.est_color AS [Estado.est_color], 
            True AS _from0
        FROM CodeFirstDatabase.Estado AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TiposEstados.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView105()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TiposEstados
        [iComercio.DAL.TipoEstado](T1.TipoEstado_TipoEstadoID, T1.TipoEstado_Nombre, T1.TipoEstado_Descripcion)
    FROM (
        SELECT 
            T.TipoEstadoID AS TipoEstado_TipoEstadoID, 
            T.Nombre AS TipoEstado_Nombre, 
            T.Descripcion AS TipoEstado_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.TipoEstado AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TiposCheques.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView106()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TiposCheques
        [iComercio.DAL.TipoCheque](T1.TipoCheque_TipoChequeID, T1.TipoCheque_Nombre, T1.TipoCheque_Descripcion)
    FROM (
        SELECT 
            T.TipoChequeID AS TipoCheque_TipoChequeID, 
            T.Nombre AS TipoCheque_Nombre, 
            T.Descripcion AS TipoCheque_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.TipoCheque AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.ClaseCuentasBancarias.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView107()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ClaseCuentasBancarias
        [iComercio.DAL.ClaseCuentaBancaria](T1.ClaseCuentaBancaria_ClaseCuentaBancariaID, T1.ClaseCuentaBancaria_Nombre, T1.ClaseCuentaBancaria_Descripcion)
    FROM (
        SELECT 
            T.ClaseCuentaBancariaID AS ClaseCuentaBancaria_ClaseCuentaBancariaID, 
            T.Nombre AS ClaseCuentaBancaria_Nombre, 
            T.Descripcion AS ClaseCuentaBancaria_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.ClaseCuentaBancaria AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Monedas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView108()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Monedas
        [iComercio.DAL.Moneda](T1.Moneda_MonedaID, T1.Moneda_Nombre, T1.Moneda_Descripcion, T1.Moneda_PaisId, T1.[Moneda.mon_simbolo])
    FROM (
        SELECT 
            T.MonedaID AS Moneda_MonedaID, 
            T.Nombre AS Moneda_Nombre, 
            T.Descripcion AS Moneda_Descripcion, 
            T.PaisId AS Moneda_PaisId, 
            T.mon_simbolo AS [Moneda.mon_simbolo], 
            True AS _from0
        FROM CodeFirstDatabase.Moneda AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Proveedores.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView109()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Proveedores
        [iComercio.DAL.Proveedor](T1.Proveedor_ProveedorID, T1.Proveedor_ProveedorIDRemoto, T1.Proveedor_NombreFantasia, T1.Proveedor_RazonSocial, T1.Proveedor_Cuit, T1.Proveedor_IngresosBrutos, T1.Proveedor_Domicilio, T1.Proveedor_Telefono1, T1.Proveedor_Telefono2, T1.Proveedor_Descripcion, T1.Proveedor_LocalidadID, T1.Proveedor_ProvinciaID, T1.Proveedor_PaisId, T1.Proveedor_Cp, T1.Proveedor_Fax, T1.Proveedor_Mail1, T1.Proveedor_Mail2, T1.Proveedor_Mail3, T1.Proveedor_Web1, T1.Proveedor_Web2, T1.Proveedor_Tel3, T1.Proveedor_Web3, T1.Proveedor_CodigoContable, T1.Proveedor_EstadoID, T1.Proveedor_CondIva, T1.Proveedor_FechaAlta)
    FROM (
        SELECT 
            T.ProveedorID AS Proveedor_ProveedorID, 
            T.ProveedorIDRemoto AS Proveedor_ProveedorIDRemoto, 
            T.NombreFantasia AS Proveedor_NombreFantasia, 
            T.RazonSocial AS Proveedor_RazonSocial, 
            T.Cuit AS Proveedor_Cuit, 
            T.IngresosBrutos AS Proveedor_IngresosBrutos, 
            T.Domicilio AS Proveedor_Domicilio, 
            T.Telefono1 AS Proveedor_Telefono1, 
            T.Telefono2 AS Proveedor_Telefono2, 
            T.Descripcion AS Proveedor_Descripcion, 
            T.LocalidadID AS Proveedor_LocalidadID, 
            T.ProvinciaID AS Proveedor_ProvinciaID, 
            T.PaisId AS Proveedor_PaisId, 
            T.Cp AS Proveedor_Cp, 
            T.Fax AS Proveedor_Fax, 
            T.Mail1 AS Proveedor_Mail1, 
            T.Mail2 AS Proveedor_Mail2, 
            T.Mail3 AS Proveedor_Mail3, 
            T.Web1 AS Proveedor_Web1, 
            T.Web2 AS Proveedor_Web2, 
            T.Tel3 AS Proveedor_Tel3, 
            T.Web3 AS Proveedor_Web3, 
            T.CodigoContable AS Proveedor_CodigoContable, 
            T.EstadoID AS Proveedor_EstadoID, 
            T.CondIva AS Proveedor_CondIva, 
            T.FechaAlta AS Proveedor_FechaAlta, 
            True AS _from0
        FROM CodeFirstDatabase.Proveedor AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.ConceptoGastoProveedores.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView110()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConceptoGastoProveedores
        [iComercio.DAL.ConceptoGastosProveedor](T1.ConceptoGastosProveedor_ConceptoGastosProveedorID, T1.ConceptoGastosProveedor_ConceptoGastosID, T1.ConceptoGastosProveedor_ProveedorID, T1.ConceptoGastosProveedor_ProveedorSucursalID, T1.ConceptoGastosProveedor_Periodicidad, T1.ConceptoGastosProveedor_EstadoID)
    FROM (
        SELECT 
            T.ConceptoGastosProveedorID AS ConceptoGastosProveedor_ConceptoGastosProveedorID, 
            T.ConceptoGastosID AS ConceptoGastosProveedor_ConceptoGastosID, 
            T.ProveedorID AS ConceptoGastosProveedor_ProveedorID, 
            T.ProveedorSucursalID AS ConceptoGastosProveedor_ProveedorSucursalID, 
            T.Periodicidad AS ConceptoGastosProveedor_Periodicidad, 
            T.EstadoID AS ConceptoGastosProveedor_EstadoID, 
            True AS _from0
        FROM CodeFirstDatabase.ConceptoGastosProveedor AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.ConceptoGastos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView111()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConceptoGastos
        [iComercio.DAL.ConceptoGastos](T1.ConceptoGastos_ConceptoGastosID, T1.ConceptoGastos_ConceptoGastosIDRemoto, T1.ConceptoGastos_Nombre, T1.ConceptoGastos_Descripcion, T1.ConceptoGastos_EstadoID, T1.ConceptoGastos_Nivel, T1.ConceptoGastos_NivelFinal, T1.ConceptoGastos_ConceptoGastoPadreID)
    FROM (
        SELECT 
            T.ConceptoGastosID AS ConceptoGastos_ConceptoGastosID, 
            T.ConceptoGastosIDRemoto AS ConceptoGastos_ConceptoGastosIDRemoto, 
            T.Nombre AS ConceptoGastos_Nombre, 
            T.Descripcion AS ConceptoGastos_Descripcion, 
            T.EstadoID AS ConceptoGastos_EstadoID, 
            T.Nivel AS ConceptoGastos_Nivel, 
            T.NivelFinal AS ConceptoGastos_NivelFinal, 
            T.ConceptoGastoPadreID AS ConceptoGastos_ConceptoGastoPadreID, 
            True AS _from0
        FROM CodeFirstDatabase.ConceptoGastos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.ProveedoresSucursales.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView112()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProveedoresSucursales
        [iComercio.DAL.ProveedorSucursal](T1.ProveedorSucursal_ProveedorSucursalID, T1.ProveedorSucursal_ProveedorID, T1.ProveedorSucursal_ProveedorSucursalIDRemoto, T1.ProveedorSucursal_Nombre, T1.ProveedorSucursal_Descripcion, T1.ProveedorSucursal_Domicilio, T1.ProveedorSucursal_LocalidadID, T1.ProveedorSucursal_ProvinciaID, T1.ProveedorSucursal_PaisID, T1.ProveedorSucursal_Telefono1, T1.ProveedorSucursal_Telefono2, T1.ProveedorSucursal_Telefono3, T1.ProveedorSucursal_Mail1, T1.ProveedorSucursal_Mail2, T1.ProveedorSucursal_Mail3, T1.ProveedorSucursal_Fax, T1.ProveedorSucursal_Web2, T1.ProveedorSucursal_Web1, T1.ProveedorSucursal_Web3, T1.ProveedorSucursal_Cp, T1.ProveedorSucursal_EstadoID)
    FROM (
        SELECT 
            T.ProveedorSucursalID AS ProveedorSucursal_ProveedorSucursalID, 
            T.ProveedorID AS ProveedorSucursal_ProveedorID, 
            T.ProveedorSucursalIDRemoto AS ProveedorSucursal_ProveedorSucursalIDRemoto, 
            T.Nombre AS ProveedorSucursal_Nombre, 
            T.Descripcion AS ProveedorSucursal_Descripcion, 
            T.Domicilio AS ProveedorSucursal_Domicilio, 
            T.LocalidadID AS ProveedorSucursal_LocalidadID, 
            T.ProvinciaID AS ProveedorSucursal_ProvinciaID, 
            T.PaisID AS ProveedorSucursal_PaisID, 
            T.Telefono1 AS ProveedorSucursal_Telefono1, 
            T.Telefono2 AS ProveedorSucursal_Telefono2, 
            T.Telefono3 AS ProveedorSucursal_Telefono3, 
            T.Mail1 AS ProveedorSucursal_Mail1, 
            T.Mail2 AS ProveedorSucursal_Mail2, 
            T.Mail3 AS ProveedorSucursal_Mail3, 
            T.Fax AS ProveedorSucursal_Fax, 
            T.Web2 AS ProveedorSucursal_Web2, 
            T.Web1 AS ProveedorSucursal_Web1, 
            T.Web3 AS ProveedorSucursal_Web3, 
            T.Cp AS ProveedorSucursal_Cp, 
            T.EstadoID AS ProveedorSucursal_EstadoID, 
            True AS _from0
        FROM CodeFirstDatabase.ProveedorSucursal AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.SucursalesBancos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView113()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SucursalesBancos
        [iComercio.DAL.SucursalBanco](T1.SucursalBanco_BancoID, T1.SucursalBanco_SucursalBancoID, T1.SucursalBanco_Nombre, T1.SucursalBanco_Descripcion, T1.SucursalBanco_Domicilio, T1.SucursalBanco_Numsuc, T1.SucursalBanco_LocalidadID, T1.SucursalBanco_ProvinciaID, T1.SucursalBanco_PaisId)
    FROM (
        SELECT 
            T.BancoID AS SucursalBanco_BancoID, 
            T.SucursalBancoID AS SucursalBanco_SucursalBancoID, 
            T.Nombre AS SucursalBanco_Nombre, 
            T.Descripcion AS SucursalBanco_Descripcion, 
            T.Domicilio AS SucursalBanco_Domicilio, 
            T.Numsuc AS SucursalBanco_Numsuc, 
            T.LocalidadID AS SucursalBanco_LocalidadID, 
            T.ProvinciaID AS SucursalBanco_ProvinciaID, 
            T.PaisId AS SucursalBanco_PaisId, 
            True AS _from0
        FROM CodeFirstDatabase.SucursalBanco AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TiposCuentasBancarias.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView114()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TiposCuentasBancarias
        [iComercio.DAL.TipoCuentaBancaria](T1.TipoCuentaBancaria_TipoCuentaBancariaID, T1.TipoCuentaBancaria_Nombre, T1.TipoCuentaBancaria_Descripcion)
    FROM (
        SELECT 
            T.TipoCuentaBancariaID AS TipoCuentaBancaria_TipoCuentaBancariaID, 
            T.Nombre AS TipoCuentaBancaria_Nombre, 
            T.Descripcion AS TipoCuentaBancaria_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.TipoCuentaBancaria AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TiposComercios.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView115()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TiposComercios
        [iComercio.DAL.TipoComercio](T1.TipoComercio_TipoComercioID, T1.TipoComercio_Nombre, T1.TipoComercio_Descripcion)
    FROM (
        SELECT 
            T.TipoComercioID AS TipoComercio_TipoComercioID, 
            T.Nombre AS TipoComercio_Nombre, 
            T.Descripcion AS TipoComercio_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.TipoComercio AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.AvisoDePago.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView116()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AvisoDePago
        [iComercio.DAL.AvisoDePago](T1.AvisoDePago_EmpresaID, T1.AvisoDePago_ComercioID, T1.AvisoDePago_AvisoDePagoID, T1.AvisoDePago_FechaPagoAviso, T1.AvisoDePago_Importe, T1.AvisoDePago_Retencion, T1.AvisoDePago_Comision, T1.AvisoDePago_Total, T1.AvisoDePago_Pagado, T1.AvisoDePago_FechaPagado, T1.AvisoDePago_CantSolicitudes, T1.AvisoDePago_FechaActualizacion, T1.AvisoDePago_Notas)
    FROM (
        SELECT 
            T.EmpresaID AS AvisoDePago_EmpresaID, 
            T.ComercioID AS AvisoDePago_ComercioID, 
            T.AvisoDePagoID AS AvisoDePago_AvisoDePagoID, 
            T.FechaPagoAviso AS AvisoDePago_FechaPagoAviso, 
            T.Importe AS AvisoDePago_Importe, 
            T.Retencion AS AvisoDePago_Retencion, 
            T.Comision AS AvisoDePago_Comision, 
            T.Total AS AvisoDePago_Total, 
            T.Pagado AS AvisoDePago_Pagado, 
            T.FechaPagado AS AvisoDePago_FechaPagado, 
            T.CantSolicitudes AS AvisoDePago_CantSolicitudes, 
            T.FechaActualizacion AS AvisoDePago_FechaActualizacion, 
            T.Notas AS AvisoDePago_Notas, 
            True AS _from0
        FROM CodeFirstDatabase.AvisoDePago AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Creditos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView117()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Creditos
        [iComercio.DAL.Credito](T1.Credito_EmpresaID, T1.Credito_ComercioID, T1.Credito_CreditoID, T1.Credito_Documento, T1.Credito_TipoDocumentoID, T1.Credito_ValorNominal, T1.Credito_ValorCuota, T1.Credito_FechaSolicitud, T1.Credito_Total, T1.Credito_AdelantadaGastos, T1.Credito_Interes, T1.Credito_Gasto, T1.Credito_Comision, T1.Credito_Cancelado, T1.Credito_Garante1, T1.Credito_TipoDocumentoIDG1, T1.Credito_Garante2, T1.Credito_TipoDocumentoIDG2, T1.Credito_Garante3, T1.Credito_TipoDocumentoIDG3, T1.Credito_Adicional, T1.Credito_TipoDocumentoIDAdi, T1.Credito_Avalado, T1.Credito_usuarioAvalID, T1.Credito_UsuarioAvalAnt, T1.Credito_TipoCuotaID, T1.Credito_CantidadCuotas, T1.Credito_NroInformeContel, T1.Credito_AbogadoID, T1.Credito_FechaAbogado, T1.Credito_UsuarioID, T1.Credito_UsuarioAnt, T1.Credito_PcComer, T1.Credito_FechaComer, T1.Credito_TipoBonificacionID, T1.Credito_PorcentajeBonificacion, T1.Credito_ValorBonificacion, T1.Credito_TasaPlan, T1.Credito_IncrementoPlan, T1.Credito_GastoPlan, T1.Credito_GastoIncrementoPlan, T1.Credito_GastoFijo, T1.Credito_ComisionPlan, T1.Credito_ComisionIncrementoPlan, T1.Credito_TipoRetencionPlanID, T1.Credito_NombrePlan, T1.Credito_Puntaje, T1.Credito_DiasVenciPrimerCuota, T1.Credito_RefinanciacionID, T1.Credito_AvisoDePagoID, T1.Credito_Corte, T1.Credito_FechaAviso, T1.Credito_NumCuentaBancaria, T1.Credito_FechaDesdeDebito)
    FROM (
        SELECT 
            T.EmpresaID AS Credito_EmpresaID, 
            T.ComercioID AS Credito_ComercioID, 
            T.CreditoID AS Credito_CreditoID, 
            T.Documento AS Credito_Documento, 
            T.TipoDocumentoID AS Credito_TipoDocumentoID, 
            T.ValorNominal AS Credito_ValorNominal, 
            T.ValorCuota AS Credito_ValorCuota, 
            T.FechaSolicitud AS Credito_FechaSolicitud, 
            T.Total AS Credito_Total, 
            T.AdelantadaGastos AS Credito_AdelantadaGastos, 
            T.Interes AS Credito_Interes, 
            T.Gasto AS Credito_Gasto, 
            T.Comision AS Credito_Comision, 
            T.Cancelado AS Credito_Cancelado, 
            T.Garante1 AS Credito_Garante1, 
            T.TipoDocumentoIDG1 AS Credito_TipoDocumentoIDG1, 
            T.Garante2 AS Credito_Garante2, 
            T.TipoDocumentoIDG2 AS Credito_TipoDocumentoIDG2, 
            T.Garante3 AS Credito_Garante3, 
            T.TipoDocumentoIDG3 AS Credito_TipoDocumentoIDG3, 
            T.Adicional AS Credito_Adicional, 
            T.TipoDocumentoIDAdi AS Credito_TipoDocumentoIDAdi, 
            T.Avalado AS Credito_Avalado, 
            T.usuarioAvalID AS Credito_usuarioAvalID, 
            T.UsuarioAvalAnt AS Credito_UsuarioAvalAnt, 
            T.TipoCuotaID AS Credito_TipoCuotaID, 
            T.CantidadCuotas AS Credito_CantidadCuotas, 
            T.NroInformeContel AS Credito_NroInformeContel, 
            T.AbogadoID AS Credito_AbogadoID, 
            T.FechaAbogado AS Credito_FechaAbogado, 
            T.UsuarioID AS Credito_UsuarioID, 
            T.UsuarioAnt AS Credito_UsuarioAnt, 
            T.PcComer AS Credito_PcComer, 
            T.FechaComer AS Credito_FechaComer, 
            T.TipoBonificacionID AS Credito_TipoBonificacionID, 
            T.PorcentajeBonificacion AS Credito_PorcentajeBonificacion, 
            T.ValorBonificacion AS Credito_ValorBonificacion, 
            T.TasaPlan AS Credito_TasaPlan, 
            T.IncrementoPlan AS Credito_IncrementoPlan, 
            T.GastoPlan AS Credito_GastoPlan, 
            T.GastoIncrementoPlan AS Credito_GastoIncrementoPlan, 
            T.GastoFijo AS Credito_GastoFijo, 
            T.ComisionPlan AS Credito_ComisionPlan, 
            T.ComisionIncrementoPlan AS Credito_ComisionIncrementoPlan, 
            T.TipoRetencionPlanID AS Credito_TipoRetencionPlanID, 
            T.NombrePlan AS Credito_NombrePlan, 
            T.Puntaje AS Credito_Puntaje, 
            T.DiasVenciPrimerCuota AS Credito_DiasVenciPrimerCuota, 
            T.RefinanciacionID AS Credito_RefinanciacionID, 
            T.AvisoDePagoID AS Credito_AvisoDePagoID, 
            T.Corte AS Credito_Corte, 
            T.FechaAviso AS Credito_FechaAviso, 
            T.NumCuentaBancaria AS Credito_NumCuentaBancaria, 
            T.FechaDesdeDebito AS Credito_FechaDesdeDebito, 
            True AS _from0
        FROM CodeFirstDatabase.Credito AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Clientes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView118()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Clientes
        [iComercio.DAL.Cliente](T1.Cliente_Documento, T1.Cliente_TipoDocumentoID, T1.Cliente_Nombre, T1.Cliente_Apellido, T1.Cliente_ProfesionID, T1.Cliente_EmpresaLaboral, T1.Cliente_Sueldo, T1.Cliente_Legajo, T1.Cliente_FechaNacimiento, T1.Cliente_SexoID, T1.Cliente_FechaAlta, T1.Cliente_TipoComoConocioID, T1.Cliente_Puntaje, T1.Cliente_Tarjeta, T1.Cliente_FechaAltaTarjeta, T1.Cliente_FechaVencimientoTarjeta, T1.Cliente_FechaModificacion, T1.Cliente_UsuarioModificacionID, T1.Cliente_EstadoID, T1.Cliente_Zona, T1.Cliente_Cod1, T1.Cliente_Cod2, T1.Cliente_Cuit, T1.Cliente_NombreCompleto)
    FROM (
        SELECT 
            T.Documento AS Cliente_Documento, 
            T.TipoDocumentoID AS Cliente_TipoDocumentoID, 
            T.Nombre AS Cliente_Nombre, 
            T.Apellido AS Cliente_Apellido, 
            T.ProfesionID AS Cliente_ProfesionID, 
            T.EmpresaLaboral AS Cliente_EmpresaLaboral, 
            T.Sueldo AS Cliente_Sueldo, 
            T.Legajo AS Cliente_Legajo, 
            T.FechaNacimiento AS Cliente_FechaNacimiento, 
            T.SexoID AS Cliente_SexoID, 
            T.FechaAlta AS Cliente_FechaAlta, 
            T.TipoComoConocioID AS Cliente_TipoComoConocioID, 
            T.Puntaje AS Cliente_Puntaje, 
            T.Tarjeta AS Cliente_Tarjeta, 
            T.FechaAltaTarjeta AS Cliente_FechaAltaTarjeta, 
            T.FechaVencimientoTarjeta AS Cliente_FechaVencimientoTarjeta, 
            T.FechaModificacion AS Cliente_FechaModificacion, 
            T.UsuarioModificacionID AS Cliente_UsuarioModificacionID, 
            T.EstadoID AS Cliente_EstadoID, 
            T.Zona AS Cliente_Zona, 
            T.Cod1 AS Cliente_Cod1, 
            T.Cod2 AS Cliente_Cod2, 
            T.Cuit AS Cliente_Cuit, 
            T.NombreCompleto AS Cliente_NombreCompleto, 
            True AS _from0
        FROM CodeFirstDatabase.Cliente AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.CuentaBancariaCliente.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView119()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CuentaBancariaCliente
        [iComercio.DAL.CuentaBancariaCliente](T1.CuentaBancariaCliente_Documento, T1.CuentaBancariaCliente_TipoDocumentoID, T1.CuentaBancariaCliente_NumCuentaBancaria, T1.CuentaBancariaCliente_CBU, T1.CuentaBancariaCliente_Alias, T1.CuentaBancariaCliente_Descripcion, T1.CuentaBancariaCliente_Notas, T1.CuentaBancariaCliente_FechaAlta, T1.CuentaBancariaCliente_SucursalBancoID, T1.CuentaBancariaCliente_BancoID, T1.CuentaBancariaCliente_MonedaID, T1.CuentaBancariaCliente_EstadoID, T1.CuentaBancariaCliente_sCuentaBancaria)
    FROM (
        SELECT 
            T.Documento AS CuentaBancariaCliente_Documento, 
            T.TipoDocumentoID AS CuentaBancariaCliente_TipoDocumentoID, 
            T.NumCuentaBancaria AS CuentaBancariaCliente_NumCuentaBancaria, 
            T.CBU AS CuentaBancariaCliente_CBU, 
            T.Alias AS CuentaBancariaCliente_Alias, 
            T.Descripcion AS CuentaBancariaCliente_Descripcion, 
            T.Notas AS CuentaBancariaCliente_Notas, 
            T.FechaAlta AS CuentaBancariaCliente_FechaAlta, 
            T.SucursalBancoID AS CuentaBancariaCliente_SucursalBancoID, 
            T.BancoID AS CuentaBancariaCliente_BancoID, 
            T.MonedaID AS CuentaBancariaCliente_MonedaID, 
            T.EstadoID AS CuentaBancariaCliente_EstadoID, 
            T.sCuentaBancaria AS CuentaBancariaCliente_sCuentaBancaria, 
            True AS _from0
        FROM CodeFirstDatabase.CuentaBancariaCliente AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Domicilios.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView120()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Domicilios
        [iComercio.DAL.Domicilio](T1.Domicilio_DomicilioID, T1.Domicilio_Direccion, T1.Domicilio_Numero, T1.Domicilio_Piso, T1.Domicilio_Departamento, T1.Domicilio_Complemento, T1.Domicilio_NotasDomicilio, T1.Domicilio_LocalidadID, T1.Domicilio_ProvinciaID, T1.Domicilio_PaisId, T1.Domicilio_ClaseDatoID, T1.Domicilio_EstadoID, T1.Domicilio_EmpresaID, T1.Domicilio_ComercioID, T1.Domicilio_Documento, T1.Domicilio_TipoDocumentoID, T1.Domicilio_Fecha, T1.Domicilio_UsuarioID, T1.Domicilio_PcComer, T1.Domicilio_DomicilioCompleto)
    FROM (
        SELECT 
            T.DomicilioID AS Domicilio_DomicilioID, 
            T.Direccion AS Domicilio_Direccion, 
            T.Numero AS Domicilio_Numero, 
            T.Piso AS Domicilio_Piso, 
            T.Departamento AS Domicilio_Departamento, 
            T.Complemento AS Domicilio_Complemento, 
            T.NotasDomicilio AS Domicilio_NotasDomicilio, 
            T.LocalidadID AS Domicilio_LocalidadID, 
            T.ProvinciaID AS Domicilio_ProvinciaID, 
            T.PaisId AS Domicilio_PaisId, 
            T.ClaseDatoID AS Domicilio_ClaseDatoID, 
            T.EstadoID AS Domicilio_EstadoID, 
            T.EmpresaID AS Domicilio_EmpresaID, 
            T.ComercioID AS Domicilio_ComercioID, 
            T.Documento AS Domicilio_Documento, 
            T.TipoDocumentoID AS Domicilio_TipoDocumentoID, 
            T.Fecha AS Domicilio_Fecha, 
            T.UsuarioID AS Domicilio_UsuarioID, 
            T.PcComer AS Domicilio_PcComer, 
            T.DomicilioCompleto AS Domicilio_DomicilioCompleto, 
            True AS _from0
        FROM CodeFirstDatabase.Domicilio AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.ClasesDato.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView121()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ClasesDato
        [iComercio.DAL.ClaseDato](T1.ClaseDato_ClaseDatoID, T1.ClaseDato_Nombre, T1.ClaseDato_Descripcion)
    FROM (
        SELECT 
            T.ClaseDatoID AS ClaseDato_ClaseDatoID, 
            T.Nombre AS ClaseDato_Nombre, 
            T.Descripcion AS ClaseDato_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.ClaseDato AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Usuarios.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView122()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Usuarios
        [iComercio.DAL.Usuario](T1.Usuario_UsuarioID, T1.Usuario_usuario, T1.Usuario_nombre, T1.Usuario_apellido, T1.Usuario_pass, T1.Usuario_creacion, T1.Usuario_activo)
    FROM (
        SELECT 
            T.UsuarioID AS Usuario_UsuarioID, 
            T.usuario AS Usuario_usuario, 
            T.nombre AS Usuario_nombre, 
            T.apellido AS Usuario_apellido, 
            T.pass AS Usuario_pass, 
            T.creacion AS Usuario_creacion, 
            T.activo AS Usuario_activo, 
            True AS _from0
        FROM CodeFirstDatabase.Usuario AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Perfiles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView123()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Perfiles
        [iComercio.DAL.Perfil](T1.Perfil_PerfilID, T1.Perfil_nombre, T1.Perfil_descripcion, T1.Perfil_creacion, T1.Perfil_activo)
    FROM (
        SELECT 
            T.PerfilID AS Perfil_PerfilID, 
            T.nombre AS Perfil_nombre, 
            T.descripcion AS Perfil_descripcion, 
            T.creacion AS Perfil_creacion, 
            T.activo AS Perfil_activo, 
            True AS _from0
        FROM CodeFirstDatabase.Perfil AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Permisos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView124()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Permisos
        [iComercio.DAL.Permiso](T1.Permiso_PermisoID, T1.Permiso_nombre, T1.Permiso_descripcion, T1.Permiso_creacion, T1.Permiso_activo)
    FROM (
        SELECT 
            T.PermisoID AS Permiso_PermisoID, 
            T.nombre AS Permiso_nombre, 
            T.descripcion AS Permiso_descripcion, 
            T.creacion AS Permiso_creacion, 
            T.activo AS Permiso_activo, 
            True AS _from0
        FROM CodeFirstDatabase.Permiso AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Mails.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView125()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Mails
        [iComercio.DAL.Mail](T1.Mail_MailID, T1.Mail_Direccion, T1.Mail_ClaseDatoID, T1.Mail_EstadoID, T1.Mail_Documento, T1.Mail_TipoDocumentoID, T1.Mail_EmpresaID, T1.Mail_ComercioID, T1.Mail_Fecha, T1.Mail_Nota, T1.Mail_UsuarioID, T1.Mail_PcComer)
    FROM (
        SELECT 
            T.MailID AS Mail_MailID, 
            T.Direccion AS Mail_Direccion, 
            T.ClaseDatoID AS Mail_ClaseDatoID, 
            T.EstadoID AS Mail_EstadoID, 
            T.Documento AS Mail_Documento, 
            T.TipoDocumentoID AS Mail_TipoDocumentoID, 
            T.EmpresaID AS Mail_EmpresaID, 
            T.ComercioID AS Mail_ComercioID, 
            T.Fecha AS Mail_Fecha, 
            T.Nota AS Mail_Nota, 
            T.UsuarioID AS Mail_UsuarioID, 
            T.PcComer AS Mail_PcComer, 
            True AS _from0
        FROM CodeFirstDatabase.Mail AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Nota.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView126()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Nota
        [iComercio.DAL.Nota](T1.Nota_NotaID, T1.Nota_EmpresaID, T1.Nota_Documento, T1.Nota_TipoDocumentoID, T1.Nota_ComercioID, T1.Nota_CreditoID, T1.Nota_CuotaID, T1.Nota_CobranzaID, T1.Nota_Detalle, T1.Nota_UsuarioID, T1.Nota_Fecha)
    FROM (
        SELECT 
            T.NotaID AS Nota_NotaID, 
            T.EmpresaID AS Nota_EmpresaID, 
            T.Documento AS Nota_Documento, 
            T.TipoDocumentoID AS Nota_TipoDocumentoID, 
            T.ComercioID AS Nota_ComercioID, 
            T.CreditoID AS Nota_CreditoID, 
            T.CuotaID AS Nota_CuotaID, 
            T.CobranzaID AS Nota_CobranzaID, 
            T.Detalle AS Nota_Detalle, 
            T.UsuarioID AS Nota_UsuarioID, 
            T.Fecha AS Nota_Fecha, 
            True AS _from0
        FROM CodeFirstDatabase.Nota AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Profesiones.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView127()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Profesiones
        [iComercio.DAL.Profesion](T1.Profesion_ProfesionID, T1.Profesion_Nombre, T1.Profesion_ProfesionPadreID)
    FROM (
        SELECT 
            T.ProfesionID AS Profesion_ProfesionID, 
            T.Nombre AS Profesion_Nombre, 
            T.ProfesionPadreID AS Profesion_ProfesionPadreID, 
            True AS _from0
        FROM CodeFirstDatabase.Profesion AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Refinanciaciones.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView128()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Refinanciaciones
        [iComercio.DAL.Refinanciacion](T1.Refinanciacion_EmpresaID, T1.Refinanciacion_ComercioID, T1.Refinanciacion_CreditoID, T1.Refinanciacion_RefinanciacionID, T1.Refinanciacion_Documento, T1.Refinanciacion_TipoDocumentoID, T1.Refinanciacion_ValorNominal, T1.Refinanciacion_ValorCuota, T1.Refinanciacion_ValorAdelanto, T1.Refinanciacion_FechaSolicitud, T1.Refinanciacion_Interes, T1.Refinanciacion_CantidadCuotas, T1.Refinanciacion_UsuarioID, T1.Refinanciacion_PcComer, T1.Refinanciacion_FechaComerAnula, T1.Refinanciacion_EstadoID, T1.Refinanciacion_FechaCreacion)
    FROM (
        SELECT 
            T.EmpresaID AS Refinanciacion_EmpresaID, 
            T.ComercioID AS Refinanciacion_ComercioID, 
            T.CreditoID AS Refinanciacion_CreditoID, 
            T.RefinanciacionID AS Refinanciacion_RefinanciacionID, 
            T.Documento AS Refinanciacion_Documento, 
            T.TipoDocumentoID AS Refinanciacion_TipoDocumentoID, 
            T.ValorNominal AS Refinanciacion_ValorNominal, 
            T.ValorCuota AS Refinanciacion_ValorCuota, 
            T.ValorAdelanto AS Refinanciacion_ValorAdelanto, 
            T.FechaSolicitud AS Refinanciacion_FechaSolicitud, 
            T.Interes AS Refinanciacion_Interes, 
            T.CantidadCuotas AS Refinanciacion_CantidadCuotas, 
            T.UsuarioID AS Refinanciacion_UsuarioID, 
            T.PcComer AS Refinanciacion_PcComer, 
            T.FechaComerAnula AS Refinanciacion_FechaComerAnula, 
            T.EstadoID AS Refinanciacion_EstadoID, 
            T.FechaCreacion AS Refinanciacion_FechaCreacion, 
            True AS _from0
        FROM CodeFirstDatabase.Refinanciacion AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.RefinanciacionCuotas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView129()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RefinanciacionCuotas
        [iComercio.DAL.RefinanciacionCuota](T1.RefinanciacionCuota_EmpresaID, T1.RefinanciacionCuota_ComercioID, T1.RefinanciacionCuota_CreditoID, T1.RefinanciacionCuota_RefinanciacionID, T1.RefinanciacionCuota_RefinanciacionCuotaID, T1.RefinanciacionCuota_Documento, T1.RefinanciacionCuota_TipoDocumentoID, T1.RefinanciacionCuota_CantidadCuotas, T1.RefinanciacionCuota_Importe, T1.RefinanciacionCuota_ImportePago, T1.RefinanciacionCuota_ImportePagoPunitorios, T1.RefinanciacionCuota_FechaVencimiento, T1.RefinanciacionCuota_FechaUltimoPago, T1.RefinanciacionCuota_Deuda)
    FROM (
        SELECT 
            T.EmpresaID AS RefinanciacionCuota_EmpresaID, 
            T.ComercioID AS RefinanciacionCuota_ComercioID, 
            T.CreditoID AS RefinanciacionCuota_CreditoID, 
            T.RefinanciacionID AS RefinanciacionCuota_RefinanciacionID, 
            T.RefinanciacionCuotaID AS RefinanciacionCuota_RefinanciacionCuotaID, 
            T.Documento AS RefinanciacionCuota_Documento, 
            T.TipoDocumentoID AS RefinanciacionCuota_TipoDocumentoID, 
            T.CantidadCuotas AS RefinanciacionCuota_CantidadCuotas, 
            T.Importe AS RefinanciacionCuota_Importe, 
            T.ImportePago AS RefinanciacionCuota_ImportePago, 
            T.ImportePagoPunitorios AS RefinanciacionCuota_ImportePagoPunitorios, 
            T.FechaVencimiento AS RefinanciacionCuota_FechaVencimiento, 
            T.FechaUltimoPago AS RefinanciacionCuota_FechaUltimoPago, 
            T.Deuda AS RefinanciacionCuota_Deuda, 
            True AS _from0
        FROM CodeFirstDatabase.RefinanciacionCuota AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.RefinanciacionCobranzas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView130()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RefinanciacionCobranzas
        [iComercio.DAL.RefinanciacionCobranza](T1.RefinanciacionCobranza_EmpresaID, T1.RefinanciacionCobranza_ComercioID, T1.RefinanciacionCobranza_CreditoID, T1.RefinanciacionCobranza_RefinanciacionID, T1.RefinanciacionCobranza_RefinanciacionCuotaID, T1.RefinanciacionCobranza_RefinanciacionCobranzaID, T1.RefinanciacionCobranza_Documento, T1.RefinanciacionCobranza_TipoDocumentoID, T1.RefinanciacionCobranza_ImportePago, T1.RefinanciacionCobranza_ImportePagoPunitorios, T1.RefinanciacionCobranza_PunitoriosCalc, T1.RefinanciacionCobranza_FechaPago, T1.RefinanciacionCobranza_FechaVencimiento, T1.RefinanciacionCobranza_TipoPagoID, T1.RefinanciacionCobranza_PagoRev, T1.RefinanciacionCobranza_FechaRev, T1.RefinanciacionCobranza_RefinanciacionCobranzaIDRev, T1.RefinanciacionCobranza_GestionID)
    FROM (
        SELECT 
            T.EmpresaID AS RefinanciacionCobranza_EmpresaID, 
            T.ComercioID AS RefinanciacionCobranza_ComercioID, 
            T.CreditoID AS RefinanciacionCobranza_CreditoID, 
            T.RefinanciacionID AS RefinanciacionCobranza_RefinanciacionID, 
            T.RefinanciacionCuotaID AS RefinanciacionCobranza_RefinanciacionCuotaID, 
            T.RefinanciacionCobranzaID AS RefinanciacionCobranza_RefinanciacionCobranzaID, 
            T.Documento AS RefinanciacionCobranza_Documento, 
            T.TipoDocumentoID AS RefinanciacionCobranza_TipoDocumentoID, 
            T.ImportePago AS RefinanciacionCobranza_ImportePago, 
            T.ImportePagoPunitorios AS RefinanciacionCobranza_ImportePagoPunitorios, 
            T.PunitoriosCalc AS RefinanciacionCobranza_PunitoriosCalc, 
            T.FechaPago AS RefinanciacionCobranza_FechaPago, 
            T.FechaVencimiento AS RefinanciacionCobranza_FechaVencimiento, 
            T.TipoPagoID AS RefinanciacionCobranza_TipoPagoID, 
            T.PagoRev AS RefinanciacionCobranza_PagoRev, 
            T.FechaRev AS RefinanciacionCobranza_FechaRev, 
            T.RefinanciacionCobranzaIDRev AS RefinanciacionCobranza_RefinanciacionCobranzaIDRev, 
            T.GestionID AS RefinanciacionCobranza_GestionID, 
            True AS _from0
        FROM CodeFirstDatabase.RefinanciacionCobranza AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TipoPago.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView131()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoPago
        [iComercio.DAL.TipoPago](T1.TipoPago_TipoPagoID, T1.TipoPago_Nombre, T1.TipoPago_Descripcion)
    FROM (
        SELECT 
            T.TipoPagoID AS TipoPago_TipoPagoID, 
            T.Nombre AS TipoPago_Nombre, 
            T.Descripcion AS TipoPago_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.TipoPago AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Sexos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView132()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Sexos
        [iComercio.DAL.Sexo](T1.Sexo_SexoID, T1.Sexo_Nombre, T1.Sexo_Descripcion)
    FROM (
        SELECT 
            T.SexoID AS Sexo_SexoID, 
            T.Nombre AS Sexo_Nombre, 
            T.Descripcion AS Sexo_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.Sexo AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Telefono.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView133()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Telefono
        [iComercio.DAL.Telefono](T1.Telefono_TelefonoID, T1.Telefono_CodArea, T1.Telefono_Numero, T1.Telefono_esCelular, T1.Telefono_EstadoID, T1.Telefono_ClaseDatoID, T1.Telefono_Documento, T1.Telefono_TipoDocumentoID, T1.Telefono_EmpresaID, T1.Telefono_ComercioID, T1.Telefono_Fecha, T1.Telefono_Nota, T1.Telefono_UsuarioID, T1.Telefono_PcComer, T1.Telefono_TelefonoCompleto)
    FROM (
        SELECT 
            T.TelefonoID AS Telefono_TelefonoID, 
            T.CodArea AS Telefono_CodArea, 
            T.Numero AS Telefono_Numero, 
            T.esCelular AS Telefono_esCelular, 
            T.EstadoID AS Telefono_EstadoID, 
            T.ClaseDatoID AS Telefono_ClaseDatoID, 
            T.Documento AS Telefono_Documento, 
            T.TipoDocumentoID AS Telefono_TipoDocumentoID, 
            T.EmpresaID AS Telefono_EmpresaID, 
            T.ComercioID AS Telefono_ComercioID, 
            T.Fecha AS Telefono_Fecha, 
            T.Nota AS Telefono_Nota, 
            T.UsuarioID AS Telefono_UsuarioID, 
            T.PcComer AS Telefono_PcComer, 
            T.TelefonoCompleto AS Telefono_TelefonoCompleto, 
            True AS _from0
        FROM CodeFirstDatabase.Telefono AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TipoComoConocio.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView134()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoComoConocio
        [iComercio.DAL.TipoComoConocio](T1.TipoComoConocio_TipoComoConocioID, T1.TipoComoConocio_Nombre, T1.TipoComoConocio_Descripcion)
    FROM (
        SELECT 
            T.TipoComoConocioID AS TipoComoConocio_TipoComoConocioID, 
            T.Nombre AS TipoComoConocio_Nombre, 
            T.Descripcion AS TipoComoConocio_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.TipoComoConocio AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Cobranzas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView135()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Cobranzas
        [iComercio.DAL.Cobranza](T1.Cobranza_EmpresaID, T1.Cobranza_ComercioID, T1.Cobranza_CreditoID, T1.Cobranza_CuotaID, T1.Cobranza_CobranzaID, T1.Cobranza_Documento, T1.Cobranza_TipoDocumentoID, T1.Cobranza_ImportePago, T1.Cobranza_ImportePagoPunitorios, T1.Cobranza_Interes, T1.Cobranza_PunitoriosCalc, T1.Cobranza_FechaPago, T1.Cobranza_FechaVencimiento, T1.Cobranza_TipoPagoID, T1.Cobranza_TipoBonificacionID, T1.Cobranza_PorcentajeBonificacion, T1.Cobranza_PagoRev, T1.Cobranza_FechaRev, T1.Cobranza_CobranzaIDRev, T1.Cobranza_Motivo, T1.Cobranza_GestionEmpresaID, T1.Cobranza_GestionID, T1.Cobranza_RefinanciacionCobranzaID, T1.Cobranza_UsuarioID, T1.Cobranza_PcComer, T1.Cobranza_ImporteTotal, T1.Cobranza_ImporteCapital, T1.Cobranza_NotasBoni)
    FROM (
        SELECT 
            T.EmpresaID AS Cobranza_EmpresaID, 
            T.ComercioID AS Cobranza_ComercioID, 
            T.CreditoID AS Cobranza_CreditoID, 
            T.CuotaID AS Cobranza_CuotaID, 
            T.CobranzaID AS Cobranza_CobranzaID, 
            T.Documento AS Cobranza_Documento, 
            T.TipoDocumentoID AS Cobranza_TipoDocumentoID, 
            T.ImportePago AS Cobranza_ImportePago, 
            T.ImportePagoPunitorios AS Cobranza_ImportePagoPunitorios, 
            T.Interes AS Cobranza_Interes, 
            T.PunitoriosCalc AS Cobranza_PunitoriosCalc, 
            T.FechaPago AS Cobranza_FechaPago, 
            T.FechaVencimiento AS Cobranza_FechaVencimiento, 
            T.TipoPagoID AS Cobranza_TipoPagoID, 
            T.TipoBonificacionID AS Cobranza_TipoBonificacionID, 
            T.PorcentajeBonificacion AS Cobranza_PorcentajeBonificacion, 
            T.PagoRev AS Cobranza_PagoRev, 
            T.FechaRev AS Cobranza_FechaRev, 
            T.CobranzaIDRev AS Cobranza_CobranzaIDRev, 
            T.Motivo AS Cobranza_Motivo, 
            T.GestionEmpresaID AS Cobranza_GestionEmpresaID, 
            T.GestionID AS Cobranza_GestionID, 
            T.RefinanciacionCobranzaID AS Cobranza_RefinanciacionCobranzaID, 
            T.UsuarioID AS Cobranza_UsuarioID, 
            T.PcComer AS Cobranza_PcComer, 
            T.ImporteTotal AS Cobranza_ImporteTotal, 
            T.ImporteCapital AS Cobranza_ImporteCapital, 
            T.NotasBoni AS Cobranza_NotasBoni, 
            True AS _from0
        FROM CodeFirstDatabase.Cobranza AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Cuotas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView136()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Cuotas
        [iComercio.DAL.Cuota](T1.Cuota_EmpresaID, T1.Cuota_ComercioID, T1.Cuota_CreditoID, T1.Cuota_CuotaID, T1.Cuota_Documento, T1.Cuota_TipoDocumentoID, T1.Cuota_Importe, T1.Cuota_Interes, T1.Cuota_ImportePago, T1.Cuota_ImportePagoPunitorios, T1.Cuota_FechaVencimiento, T1.Cuota_FechaUltimoPago, T1.Cuota_TipoCuotaID, T1.Cuota_CantidadCuotas, T1.Cuota_ValorBonificacion, T1.Cuota_Deuda)
    FROM (
        SELECT 
            T.EmpresaID AS Cuota_EmpresaID, 
            T.ComercioID AS Cuota_ComercioID, 
            T.CreditoID AS Cuota_CreditoID, 
            T.CuotaID AS Cuota_CuotaID, 
            T.Documento AS Cuota_Documento, 
            T.TipoDocumentoID AS Cuota_TipoDocumentoID, 
            T.Importe AS Cuota_Importe, 
            T.Interes AS Cuota_Interes, 
            T.ImportePago AS Cuota_ImportePago, 
            T.ImportePagoPunitorios AS Cuota_ImportePagoPunitorios, 
            T.FechaVencimiento AS Cuota_FechaVencimiento, 
            T.FechaUltimoPago AS Cuota_FechaUltimoPago, 
            T.TipoCuotaID AS Cuota_TipoCuotaID, 
            T.CantidadCuotas AS Cuota_CantidadCuotas, 
            T.ValorBonificacion AS Cuota_ValorBonificacion, 
            T.Deuda AS Cuota_Deuda, 
            True AS _from0
        FROM CodeFirstDatabase.Cuota AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TipoCuota.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView137()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoCuota
        [iComercio.DAL.TipoCuota](T1.TipoCuota_TipoCuotaID, T1.TipoCuota_Nombre)
    FROM (
        SELECT 
            T.TipoCuotaID AS TipoCuota_TipoCuotaID, 
            T.Nombre AS TipoCuota_Nombre, 
            True AS _from0
        FROM CodeFirstDatabase.TipoCuota AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.NotasCD.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView138()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing NotasCD
        [iComercio.DAL.NotasCD](T1.NotasCD_EmpresaID, T1.NotasCD_ComercioID, T1.NotasCD_CreditoID, T1.NotasCD_CuotaID, T1.NotasCD_CobranzaID, T1.NotasCD_NotaCDID, T1.NotasCD_TipoNota, T1.NotasCD_Importe, T1.NotasCD_Fecha, T1.NotasCD_Documento, T1.NotasCD_TipoDocumentoID, T1.NotasCD_Detalle, T1.NotasCD_GestionID, T1.NotasCD_UsuarioID, T1.NotasCD_PcComer, T1.NotasCD_Notas)
    FROM (
        SELECT 
            T.EmpresaID AS NotasCD_EmpresaID, 
            T.ComercioID AS NotasCD_ComercioID, 
            T.CreditoID AS NotasCD_CreditoID, 
            T.CuotaID AS NotasCD_CuotaID, 
            T.CobranzaID AS NotasCD_CobranzaID, 
            T.NotaCDID AS NotasCD_NotaCDID, 
            T.TipoNota AS NotasCD_TipoNota, 
            T.Importe AS NotasCD_Importe, 
            T.Fecha AS NotasCD_Fecha, 
            T.Documento AS NotasCD_Documento, 
            T.TipoDocumentoID AS NotasCD_TipoDocumentoID, 
            T.Detalle AS NotasCD_Detalle, 
            T.GestionID AS NotasCD_GestionID, 
            T.UsuarioID AS NotasCD_UsuarioID, 
            T.PcComer AS NotasCD_PcComer, 
            T.Notas AS NotasCD_Notas, 
            True AS _from0
        FROM CodeFirstDatabase.NotasCD AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TipoBonificacion.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView139()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoBonificacion
        [iComercio.DAL.TipoBonificacion](T1.TipoBonificacion_TipoBonificacionID, T1.TipoBonificacion_Nombre, T1.TipoBonificacion_Descripcion)
    FROM (
        SELECT 
            T.TipoBonificacionID AS TipoBonificacion_TipoBonificacionID, 
            T.Nombre AS TipoBonificacion_Nombre, 
            T.Descripcion AS TipoBonificacion_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.TipoBonificacion AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.CreditoAvals.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView140()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CreditoAvals
        [iComercio.DAL.CreditoAval](T1.CreditoAval_CreditoAvalID, T1.CreditoAval_CreditoID, T1.CreditoAval_ComercioID, T1.CreditoAval_EmpresaID, T1.CreditoAval_TipoAvalID, T1.CreditoAval_UsuarioID)
    FROM (
        SELECT 
            T.CreditoAvalID AS CreditoAval_CreditoAvalID, 
            T.CreditoID AS CreditoAval_CreditoID, 
            T.ComercioID AS CreditoAval_ComercioID, 
            T.EmpresaID AS CreditoAval_EmpresaID, 
            T.TipoAvalID AS CreditoAval_TipoAvalID, 
            T.UsuarioID AS CreditoAval_UsuarioID, 
            True AS _from0
        FROM CodeFirstDatabase.CreditoAval AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TipoAval.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView141()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoAval
        [iComercio.DAL.TipoAval](T1.TipoAval_TipoAvalID, T1.TipoAval_Nombre, T1.TipoAval_Descripcion)
    FROM (
        SELECT 
            T.TipoAvalID AS TipoAval_TipoAvalID, 
            T.Nombre AS TipoAval_Nombre, 
            T.Descripcion AS TipoAval_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.TipoAval AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Cargos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView142()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Cargos
        [iComercio.DAL.Cargo](T1.Cargo_CargoId, T1.Cargo_Nombre, T1.Cargo_Descripcion, T1.Cargo_SueldoBasico)
    FROM (
        SELECT 
            T.CargoId AS Cargo_CargoId, 
            T.Nombre AS Cargo_Nombre, 
            T.Descripcion AS Cargo_Descripcion, 
            T.SueldoBasico AS Cargo_SueldoBasico, 
            True AS _from0
        FROM CodeFirstDatabase.Cargo AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.ClasesMovimientos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView143()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ClasesMovimientos
        CASE
            WHEN T1._from1 THEN [iComercio.DAL.Egreso](T1.ClaseMovimiento_ClaseMovimientoID, T1.ClaseMovimiento_Nombre, T1.ClaseMovimiento_Descripcion)
            ELSE [iComercio.DAL.Ingreso](T1.ClaseMovimiento_ClaseMovimientoID, T1.ClaseMovimiento_Nombre, T1.ClaseMovimiento_Descripcion)
        END
    FROM (
        SELECT 
            T.ClaseMovimientoID AS ClaseMovimiento_ClaseMovimientoID, 
            T.Nombre AS ClaseMovimiento_Nombre, 
            T.Descripcion AS ClaseMovimiento_Descripcion, 
            True AS _from0, 
            CASE WHEN T.Discriminator = N'Egreso' THEN True ELSE False END AS _from1, 
            CASE WHEN T.Discriminator = N'Ingreso' THEN True ELSE False END AS _from2
        FROM CodeFirstDatabase.ClaseMovimiento AS T
        WHERE T.Discriminator IN {N'Egreso', N'Ingreso'}
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.ConceptoFondos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView144()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConceptoFondos
        [iComercio.DAL.ConceptoFondos](T1.ConceptoFondos_ConceptoFondosID, T1.ConceptoFondos_Nombre, T1.ConceptoFondos_Descripcion, T1.ConceptoFondos_MedioDePagoID)
    FROM (
        SELECT 
            T.ConceptoFondosID AS ConceptoFondos_ConceptoFondosID, 
            T.Nombre AS ConceptoFondos_Nombre, 
            T.Descripcion AS ConceptoFondos_Descripcion, 
            T.MedioDePagoID AS ConceptoFondos_MedioDePagoID, 
            True AS _from0
        FROM CodeFirstDatabase.ConceptoFondos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.MediosDePagos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView145()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MediosDePagos
        [iComercio.DAL.MedioDePago](T1.MedioDePago_MedioDePagoID, T1.MedioDePago_Nombre, T1.MedioDePago_Descripcion)
    FROM (
        SELECT 
            T.MedioDePagoID AS MedioDePago_MedioDePagoID, 
            T.Nombre AS MedioDePago_Nombre, 
            T.Descripcion AS MedioDePago_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.MedioDePago AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Departamentos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView146()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Departamentos
        [iComercio.DAL.Departamento](T1.Departamento_DepartamentoID, T1.Departamento_Nombre, T1.Departamento_Descripcion) WITH 
        RELATIONSHIP(CREATEREF(ComercioContext.ConceptoFondos, ROW(T1.[ConceptoFondos_RequiereValidacionDe.ConceptoFondos_RequiereValidacionDe_Source.ConceptoFondosID]),[iComercio.DAL.ConceptoFondos]),[iComercio.DAL.ConceptoFondos_RequiereValidacionDe],ConceptoFondos_RequiereValidacionDe_Target,ConceptoFondos_RequiereValidacionDe_Source) 
    FROM (
        SELECT 
            T.DepartamentoID AS Departamento_DepartamentoID, 
            T.Nombre AS Departamento_Nombre, 
            T.Descripcion AS Departamento_Descripcion, 
            True AS _from0, 
            T.ConceptoFondos_ConceptoFondosID AS [ConceptoFondos_RequiereValidacionDe.ConceptoFondos_RequiereValidacionDe_Source.ConceptoFondosID]
        FROM CodeFirstDatabase.Departamento AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.ConceptoFondos_RequiereValidacionDe.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView147()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConceptoFondos_RequiereValidacionDe
        [iComercio.DAL.ConceptoFondos_RequiereValidacionDe](T3.[ConceptoFondos_RequiereValidacionDe.ConceptoFondos_RequiereValidacionDe_Source], T3.[ConceptoFondos_RequiereValidacionDe.ConceptoFondos_RequiereValidacionDe_Target])
    FROM (
        SELECT -- Constructing ConceptoFondos_RequiereValidacionDe_Source
            CreateRef(ComercioContext.ConceptoFondos, row(T2.[ConceptoFondos_RequiereValidacionDe.ConceptoFondos_RequiereValidacionDe_Source.ConceptoFondosID]), [iComercio.DAL.ConceptoFondos]) AS [ConceptoFondos_RequiereValidacionDe.ConceptoFondos_RequiereValidacionDe_Source], 
            T2.[ConceptoFondos_RequiereValidacionDe.ConceptoFondos_RequiereValidacionDe_Target]
        FROM (
            SELECT -- Constructing ConceptoFondos_RequiereValidacionDe_Target
                T1.[ConceptoFondos_RequiereValidacionDe.ConceptoFondos_RequiereValidacionDe_Source.ConceptoFondosID], 
                CreateRef(ComercioContext.Departamentos, row(T1.[ConceptoFondos_RequiereValidacionDe.ConceptoFondos_RequiereValidacionDe_Target.DepartamentoID]), [iComercio.DAL.Departamento]) AS [ConceptoFondos_RequiereValidacionDe.ConceptoFondos_RequiereValidacionDe_Target]
            FROM (
                SELECT 
                    T.ConceptoFondos_ConceptoFondosID AS [ConceptoFondos_RequiereValidacionDe.ConceptoFondos_RequiereValidacionDe_Source.ConceptoFondosID], 
                    T.DepartamentoID AS [ConceptoFondos_RequiereValidacionDe.ConceptoFondos_RequiereValidacionDe_Target.DepartamentoID], 
                    True AS _from0
                FROM CodeFirstDatabase.Departamento AS T
                WHERE T.ConceptoFondos_ConceptoFondosID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ComercioContext.ConceptoGastosDepartamentos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView148()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ConceptoGastosDepartamentos
        [iComercio.DAL.ConceptoGastosDepartamento](T1.ConceptoGastosDepartamento_ConceptoGastosDepartamentoID, T1.ConceptoGastosDepartamento_ConceptoGastosID, T1.ConceptoGastosDepartamento_DepartamentoID, T1.ConceptoGastosDepartamento_presupuesto, T1.ConceptoGastosDepartamento_EstadoID)
    FROM (
        SELECT 
            T.ConceptoGastosDepartamentoID AS ConceptoGastosDepartamento_ConceptoGastosDepartamentoID, 
            T.ConceptoGastosID AS ConceptoGastosDepartamento_ConceptoGastosID, 
            T.DepartamentoID AS ConceptoGastosDepartamento_DepartamentoID, 
            T.presupuesto AS ConceptoGastosDepartamento_presupuesto, 
            T.EstadoID AS ConceptoGastosDepartamento_EstadoID, 
            True AS _from0
        FROM CodeFirstDatabase.ConceptoGastosDepartamento AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.CreditoAnulado.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView149()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CreditoAnulado
        [iComercio.DAL.CreditoAnulado](T1.CreditoAnulado_EmpresaID, T1.CreditoAnulado_ComercioID, T1.CreditoAnulado_CreditoAnuladoID, T1.CreditoAnulado_CreditoID, T1.CreditoAnulado_Documento, T1.CreditoAnulado_TipoDocumentoID, T1.CreditoAnulado_ValorNominal, T1.CreditoAnulado_ValorCuota, T1.CreditoAnulado_FechaSolicitud, T1.CreditoAnulado_Interes, T1.CreditoAnulado_Gasto, T1.CreditoAnulado_Comision, T1.CreditoAnulado_Garante1, T1.CreditoAnulado_TipoDocumentoIDG1, T1.CreditoAnulado_Garante2, T1.CreditoAnulado_TipoDocumentoIDG2, T1.CreditoAnulado_Garante3, T1.CreditoAnulado_TipoDocumentoIDG3, T1.CreditoAnulado_Adicional, T1.CreditoAnulado_TipoDocumentoIDAdi, T1.CreditoAnulado_Avalado, T1.CreditoAnulado_usuarioAvalID, T1.CreditoAnulado_TipoCuotaID, T1.CreditoAnulado_CantidadCuotas, T1.CreditoAnulado_NroInformeContel, T1.CreditoAnulado_AbogadoID, T1.CreditoAnulado_FechaAbogado, T1.CreditoAnulado_UsuarioID, T1.CreditoAnulado_PcComer, T1.CreditoAnulado_FechaComer, T1.CreditoAnulado_TipoBonificacionID, T1.CreditoAnulado_PorcentajeBonificacion, T1.CreditoAnulado_ValorBonificacion, T1.CreditoAnulado_TasaPlan, T1.CreditoAnulado_IncrementoPlan, T1.CreditoAnulado_GastoPlan, T1.CreditoAnulado_GastoIncrementoPlan, T1.CreditoAnulado_GastoFijo, T1.CreditoAnulado_ComisionPlan, T1.CreditoAnulado_ComisionIncrementoPlan, T1.CreditoAnulado_TipoRetencionPlanID, T1.CreditoAnulado_NombrePlan, T1.CreditoAnulado_Puntaje, T1.CreditoAnulado_DiasVenciPrimerCuota, T1.CreditoAnulado_RefinanciacionID, T1.CreditoAnulado_UsuarioIDAnula, T1.CreditoAnulado_PcComerAnula, T1.CreditoAnulado_FechaComercioAnula, T1.CreditoAnulado_Motivo, T1.CreditoAnulado_TipoAnulacionID, T1.CreditoAnulado_AvisoDePagoID, T1.CreditoAnulado_Corte, T1.CreditoAnulado_FechaAviso, T1.CreditoAnulado_NumCuentaBancaria, T1.CreditoAnulado_FechaDesdeDebito)
    FROM (
        SELECT 
            T.EmpresaID AS CreditoAnulado_EmpresaID, 
            T.ComercioID AS CreditoAnulado_ComercioID, 
            T.CreditoAnuladoID AS CreditoAnulado_CreditoAnuladoID, 
            T.CreditoID AS CreditoAnulado_CreditoID, 
            T.Documento AS CreditoAnulado_Documento, 
            T.TipoDocumentoID AS CreditoAnulado_TipoDocumentoID, 
            T.ValorNominal AS CreditoAnulado_ValorNominal, 
            T.ValorCuota AS CreditoAnulado_ValorCuota, 
            T.FechaSolicitud AS CreditoAnulado_FechaSolicitud, 
            T.Interes AS CreditoAnulado_Interes, 
            T.Gasto AS CreditoAnulado_Gasto, 
            T.Comision AS CreditoAnulado_Comision, 
            T.Garante1 AS CreditoAnulado_Garante1, 
            T.TipoDocumentoIDG1 AS CreditoAnulado_TipoDocumentoIDG1, 
            T.Garante2 AS CreditoAnulado_Garante2, 
            T.TipoDocumentoIDG2 AS CreditoAnulado_TipoDocumentoIDG2, 
            T.Garante3 AS CreditoAnulado_Garante3, 
            T.TipoDocumentoIDG3 AS CreditoAnulado_TipoDocumentoIDG3, 
            T.Adicional AS CreditoAnulado_Adicional, 
            T.TipoDocumentoIDAdi AS CreditoAnulado_TipoDocumentoIDAdi, 
            T.Avalado AS CreditoAnulado_Avalado, 
            T.usuarioAvalID AS CreditoAnulado_usuarioAvalID, 
            T.TipoCuotaID AS CreditoAnulado_TipoCuotaID, 
            T.CantidadCuotas AS CreditoAnulado_CantidadCuotas, 
            T.NroInformeContel AS CreditoAnulado_NroInformeContel, 
            T.AbogadoID AS CreditoAnulado_AbogadoID, 
            T.FechaAbogado AS CreditoAnulado_FechaAbogado, 
            T.UsuarioID AS CreditoAnulado_UsuarioID, 
            T.PcComer AS CreditoAnulado_PcComer, 
            T.FechaComer AS CreditoAnulado_FechaComer, 
            T.TipoBonificacionID AS CreditoAnulado_TipoBonificacionID, 
            T.PorcentajeBonificacion AS CreditoAnulado_PorcentajeBonificacion, 
            T.ValorBonificacion AS CreditoAnulado_ValorBonificacion, 
            T.TasaPlan AS CreditoAnulado_TasaPlan, 
            T.IncrementoPlan AS CreditoAnulado_IncrementoPlan, 
            T.GastoPlan AS CreditoAnulado_GastoPlan, 
            T.GastoIncrementoPlan AS CreditoAnulado_GastoIncrementoPlan, 
            T.GastoFijo AS CreditoAnulado_GastoFijo, 
            T.ComisionPlan AS CreditoAnulado_ComisionPlan, 
            T.ComisionIncrementoPlan AS CreditoAnulado_ComisionIncrementoPlan, 
            T.TipoRetencionPlanID AS CreditoAnulado_TipoRetencionPlanID, 
            T.NombrePlan AS CreditoAnulado_NombrePlan, 
            T.Puntaje AS CreditoAnulado_Puntaje, 
            T.DiasVenciPrimerCuota AS CreditoAnulado_DiasVenciPrimerCuota, 
            T.RefinanciacionID AS CreditoAnulado_RefinanciacionID, 
            T.UsuarioIDAnula AS CreditoAnulado_UsuarioIDAnula, 
            T.PcComerAnula AS CreditoAnulado_PcComerAnula, 
            T.FechaComercioAnula AS CreditoAnulado_FechaComercioAnula, 
            T.Motivo AS CreditoAnulado_Motivo, 
            T.TipoAnulacionID AS CreditoAnulado_TipoAnulacionID, 
            T.AvisoDePagoID AS CreditoAnulado_AvisoDePagoID, 
            T.Corte AS CreditoAnulado_Corte, 
            T.FechaAviso AS CreditoAnulado_FechaAviso, 
            T.NumCuentaBancaria AS CreditoAnulado_NumCuentaBancaria, 
            T.FechaDesdeDebito AS CreditoAnulado_FechaDesdeDebito, 
            True AS _from0
        FROM CodeFirstDatabase.CreditoAnulado AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TipoAnulacion.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView150()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoAnulacion
        [iComercio.DAL.TipoAnulacion](T1.TipoAnulacion_TipoAnulacionID, T1.TipoAnulacion_Descripcion, T1.TipoAnulacion_QueAnula)
    FROM (
        SELECT 
            T.TipoAnulacionID AS TipoAnulacion_TipoAnulacionID, 
            T.Descripcion AS TipoAnulacion_Descripcion, 
            T.QueAnula AS TipoAnulacion_QueAnula, 
            True AS _from0
        FROM CodeFirstDatabase.TipoAnulacion AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.CuentaCorriente.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView151()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CuentaCorriente
        [iComercio.DAL.CuentaCorriente](T1.CuentaCorriente_EmpresaID, T1.CuentaCorriente_ComercioID, T1.CuentaCorriente_CuentaCorrienteID, T1.CuentaCorriente_IDRemoto, T1.CuentaCorriente_TipoMovimientoID, T1.CuentaCorriente_Fecha, T1.CuentaCorriente_SolicitudFondoID, T1.CuentaCorriente_CreditoID, T1.CuentaCorriente_CuotaID, T1.CuentaCorriente_CobranzaID, T1.CuentaCorriente_NotaCDID, T1.CuentaCorriente_TransferenciaDepositoID, T1.CuentaCorriente_ReciboID, T1.CuentaCorriente_Importe, T1.CuentaCorriente_GestionID, T1.CuentaCorriente_GastoID, T1.CuentaCorriente_PagoID, T1.CuentaCorriente_FechaAviso, T1.CuentaCorriente_CreditoNro)
    FROM (
        SELECT 
            T.EmpresaID AS CuentaCorriente_EmpresaID, 
            T.ComercioID AS CuentaCorriente_ComercioID, 
            T.CuentaCorrienteID AS CuentaCorriente_CuentaCorrienteID, 
            T.IDRemoto AS CuentaCorriente_IDRemoto, 
            T.TipoMovimientoID AS CuentaCorriente_TipoMovimientoID, 
            T.Fecha AS CuentaCorriente_Fecha, 
            T.SolicitudFondoID AS CuentaCorriente_SolicitudFondoID, 
            T.CreditoID AS CuentaCorriente_CreditoID, 
            T.CuotaID AS CuentaCorriente_CuotaID, 
            T.CobranzaID AS CuentaCorriente_CobranzaID, 
            T.NotaCDID AS CuentaCorriente_NotaCDID, 
            T.TransferenciaDepositoID AS CuentaCorriente_TransferenciaDepositoID, 
            T.ReciboID AS CuentaCorriente_ReciboID, 
            T.Importe AS CuentaCorriente_Importe, 
            T.GestionID AS CuentaCorriente_GestionID, 
            T.GastoID AS CuentaCorriente_GastoID, 
            T.PagoID AS CuentaCorriente_PagoID, 
            T.FechaAviso AS CuentaCorriente_FechaAviso, 
            T.CreditoNro AS CuentaCorriente_CreditoNro, 
            True AS _from0
        FROM CodeFirstDatabase.CuentaCorriente AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Gastoes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView152()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Gastoes
        [iComercio.DAL.Gasto](T1.Gasto_EmpresaID, T1.Gasto_ComercioID, T1.Gasto_GastoID, T1.Gasto_SolicitudFondoID, T1.Gasto_Activo, T1.Gasto_Importe, T1.Gasto_Descripcion, T1.Gasto_DepartamentoID, T1.Gasto_ConceptoGastoID, T1.Gasto_ConceptoGastoProveedorID, T1.Gasto_ProveedorID, T1.Gasto_ProveedorSucursalID, T1.Gasto_Fecha, T1.Gasto_Pagado, T1.Gasto_EstadoID)
    FROM (
        SELECT 
            T.EmpresaID AS Gasto_EmpresaID, 
            T.ComercioID AS Gasto_ComercioID, 
            T.GastoID AS Gasto_GastoID, 
            T.SolicitudFondoID AS Gasto_SolicitudFondoID, 
            T.Activo AS Gasto_Activo, 
            T.Importe AS Gasto_Importe, 
            T.Descripcion AS Gasto_Descripcion, 
            T.DepartamentoID AS Gasto_DepartamentoID, 
            T.ConceptoGastoID AS Gasto_ConceptoGastoID, 
            T.ConceptoGastoProveedorID AS Gasto_ConceptoGastoProveedorID, 
            T.ProveedorID AS Gasto_ProveedorID, 
            T.ProveedorSucursalID AS Gasto_ProveedorSucursalID, 
            T.Fecha AS Gasto_Fecha, 
            T.Pagado AS Gasto_Pagado, 
            T.EstadoID AS Gasto_EstadoID, 
            True AS _from0
        FROM CodeFirstDatabase.Gasto AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.SolicitudFondos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView153()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SolicitudFondos
        [iComercio.DAL.SolicitudFondo](T1.SolicitudFondo_EmpresaID, T1.SolicitudFondo_ComercioID, T1.SolicitudFondo_SolicitudFondoID, T1.SolicitudFondo_SolicitudFondoIDRemoto, T1.SolicitudFondo_FechaPago, T1.SolicitudFondo_FechaPagoSF, T1.SolicitudFondo_FechaRealizacion, T1.SolicitudFondo_Importe, T1.SolicitudFondo_Motivo, T1.SolicitudFondo_LiquidacionID, T1.SolicitudFondo_FechaDispComienzo, T1.SolicitudFondo_FechaDispFinal, T1.SolicitudFondo_GeneradoPorComercioID, T1.SolicitudFondo_GeneradoPorDepartamentoID, T1.SolicitudFondo_MedioDePagoID, T1.SolicitudFondo_ConceptoFondosID, T1.SolicitudFondo_TransferenciasDepositosEmpId, T1.SolicitudFondo_TransferenciasDepositosID, T1.SolicitudFondo_ClaseCuentaBancariaID, T1.SolicitudFondo_CuentaBancariaID, T1.SolicitudFondo_NumChequera, T1.SolicitudFondo_NumCheque, T1.SolicitudFondo_EstadoID, T1.SolicitudFondo_MonedaID, T1.SolicitudFondo_OrdenDePago, T1.SolicitudFondo_TipoSolicitudID, T1.SolicitudFondo_FechaConfComercio, T1.SolicitudFondo_EmpleadoConfComercio, T1.SolicitudFondo_notas, T1.SolicitudFondo_EmpleadoSolicitanteID, T1.SolicitudFondo_EmpleadoRealizadorID, T1.SolicitudFondo_CajaID, T1.SolicitudFondo_AvisoDePagoID)
    FROM (
        SELECT 
            T.EmpresaID AS SolicitudFondo_EmpresaID, 
            T.ComercioID AS SolicitudFondo_ComercioID, 
            T.SolicitudFondoID AS SolicitudFondo_SolicitudFondoID, 
            T.SolicitudFondoIDRemoto AS SolicitudFondo_SolicitudFondoIDRemoto, 
            T.FechaPago AS SolicitudFondo_FechaPago, 
            T.FechaPagoSF AS SolicitudFondo_FechaPagoSF, 
            T.FechaRealizacion AS SolicitudFondo_FechaRealizacion, 
            T.Importe AS SolicitudFondo_Importe, 
            T.Motivo AS SolicitudFondo_Motivo, 
            T.LiquidacionID AS SolicitudFondo_LiquidacionID, 
            T.FechaDispComienzo AS SolicitudFondo_FechaDispComienzo, 
            T.FechaDispFinal AS SolicitudFondo_FechaDispFinal, 
            T.GeneradoPorComercioID AS SolicitudFondo_GeneradoPorComercioID, 
            T.GeneradoPorDepartamentoID AS SolicitudFondo_GeneradoPorDepartamentoID, 
            T.MedioDePagoID AS SolicitudFondo_MedioDePagoID, 
            T.ConceptoFondosID AS SolicitudFondo_ConceptoFondosID, 
            T.TransferenciasDepositosEmpId AS SolicitudFondo_TransferenciasDepositosEmpId, 
            T.TransferenciasDepositosID AS SolicitudFondo_TransferenciasDepositosID, 
            T.ClaseCuentaBancariaID AS SolicitudFondo_ClaseCuentaBancariaID, 
            T.CuentaBancariaID AS SolicitudFondo_CuentaBancariaID, 
            T.NumChequera AS SolicitudFondo_NumChequera, 
            T.NumCheque AS SolicitudFondo_NumCheque, 
            T.EstadoID AS SolicitudFondo_EstadoID, 
            T.MonedaID AS SolicitudFondo_MonedaID, 
            T.OrdenDePago AS SolicitudFondo_OrdenDePago, 
            T.TipoSolicitudID AS SolicitudFondo_TipoSolicitudID, 
            T.FechaConfComercio AS SolicitudFondo_FechaConfComercio, 
            T.EmpleadoConfComercio AS SolicitudFondo_EmpleadoConfComercio, 
            T.notas AS SolicitudFondo_notas, 
            T.EmpleadoSolicitanteID AS SolicitudFondo_EmpleadoSolicitanteID, 
            T.EmpleadoRealizadorID AS SolicitudFondo_EmpleadoRealizadorID, 
            T.CajaID AS SolicitudFondo_CajaID, 
            T.AvisoDePagoID AS SolicitudFondo_AvisoDePagoID, 
            True AS _from0
        FROM CodeFirstDatabase.SolicitudFondo AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Empleados.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView154()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Empleados
        [iComercio.DAL.Empleado](T1.Empleado_EmpleadoID, T1.Empleado_Legajo, T1.Empleado_Usuarioid, T1.Empleado_Domicilio, T1.Empleado_Sueldo, T1.Empleado_Fotografia, T1.Empleado_Mail, T1.Empleado_Tel, T1.Empleado_DepartamentoID, T1.Empleado_EmpresaID, T1.Empleado_ComercioID, T1.Empleado_CargoID, T1.Empleado_EstadoId, T1.Empleado_PersonaID, T1.Empleado_TipoEmpleadoID)
    FROM (
        SELECT 
            T.EmpleadoID AS Empleado_EmpleadoID, 
            T.Legajo AS Empleado_Legajo, 
            T.Usuarioid AS Empleado_Usuarioid, 
            T.Domicilio AS Empleado_Domicilio, 
            T.Sueldo AS Empleado_Sueldo, 
            T.Fotografia AS Empleado_Fotografia, 
            T.Mail AS Empleado_Mail, 
            T.Tel AS Empleado_Tel, 
            T.DepartamentoID AS Empleado_DepartamentoID, 
            T.EmpresaID AS Empleado_EmpresaID, 
            T.ComercioID AS Empleado_ComercioID, 
            T.CargoID AS Empleado_CargoID, 
            T.EstadoId AS Empleado_EstadoId, 
            T.PersonaID AS Empleado_PersonaID, 
            T.TipoEmpleadoID AS Empleado_TipoEmpleadoID, 
            True AS _from0
        FROM CodeFirstDatabase.Empleado AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TiposEmpleados.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView155()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TiposEmpleados
        [iComercio.DAL.TipoEmpleado](T1.TipoEmpleado_TipoEmpleadoID, T1.TipoEmpleado_Nombre, T1.TipoEmpleado_Descripcion)
    FROM (
        SELECT 
            T.TipoEmpleadoID AS TipoEmpleado_TipoEmpleadoID, 
            T.Nombre AS TipoEmpleado_Nombre, 
            T.Descripcion AS TipoEmpleado_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.TipoEmpleado AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.SolicitudFondoConceptoGastosProveedors.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView156()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SolicitudFondoConceptoGastosProveedors
        [iComercio.DAL.SolicitudFondoConceptoGastosProveedor](T1.SolicitudFondoConceptoGastosProveedor_EmpresaID, T1.SolicitudFondoConceptoGastosProveedor_ComercioID, T1.SolicitudFondoConceptoGastosProveedor_SolicitudFondoID, T1.SolicitudFondoConceptoGastosProveedor_ConceptoGastosProveedorID, T1.SolicitudFondoConceptoGastosProveedor_Importe, T1.SolicitudFondoConceptoGastosProveedor_Detalle, T1.SolicitudFondoConceptoGastosProveedor_sConceptoGastosProveedor)
    FROM (
        SELECT 
            T.EmpresaID AS SolicitudFondoConceptoGastosProveedor_EmpresaID, 
            T.ComercioID AS SolicitudFondoConceptoGastosProveedor_ComercioID, 
            T.SolicitudFondoID AS SolicitudFondoConceptoGastosProveedor_SolicitudFondoID, 
            T.ConceptoGastosProveedorID AS SolicitudFondoConceptoGastosProveedor_ConceptoGastosProveedorID, 
            T.Importe AS SolicitudFondoConceptoGastosProveedor_Importe, 
            T.Detalle AS SolicitudFondoConceptoGastosProveedor_Detalle, 
            T.sConceptoGastosProveedor AS SolicitudFondoConceptoGastosProveedor_sConceptoGastosProveedor, 
            True AS _from0
        FROM CodeFirstDatabase.SolicitudFondoConceptoGastosProveedor AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TiposSolicitud.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView157()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TiposSolicitud
        [iComercio.DAL.TipoSolicitud](T1.TipoSolicitud_TipoSolicitudID, T1.TipoSolicitud_Nombre, T1.TipoSolicitud_Descripcion)
    FROM (
        SELECT 
            T.TipoSolicitudID AS TipoSolicitud_TipoSolicitudID, 
            T.Nombre AS TipoSolicitud_Nombre, 
            T.Descripcion AS TipoSolicitud_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.TipoSolicitud AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TransferenciasDepositos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView158()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TransferenciasDepositos
        [iComercio.DAL.TransferenciasDepositos](T1.TransferenciasDepositos_EmpresaID, T1.TransferenciasDepositos_TransferenciasDepositosID, T1.TransferenciasDepositos_TransferenciasDepositosIDRemoto, T1.TransferenciasDepositos_NumTransferencia, T1.TransferenciasDepositos_Importe, T1.TransferenciasDepositos_Fecha, T1.TransferenciasDepositos_Costo, T1.TransferenciasDepositos_Notas, T1.TransferenciasDepositos_CuentaOrigenEmpresaID, T1.TransferenciasDepositos_CuentaOrigenCbID, T1.TransferenciasDepositos_CuentaDestinoEmpresaID, T1.TransferenciasDepositos_CuentaDestinoCbID, T1.TransferenciasDepositos_ChequeEmpID, T1.TransferenciasDepositos_ChequeCbID, T1.TransferenciasDepositos_ChequeNumChequera, T1.TransferenciasDepositos_ChequeNumCheque, T1.TransferenciasDepositos_MedioDePagoID, T1.TransferenciasDepositos_MonedaID, T1.TransferenciasDepositos_EmpleadoRegistradorEmpresaID, T1.TransferenciasDepositos_EmpleadoRegistradorPersonaID, T1.TransferenciasDepositos_ComercioEmpresaID, T1.TransferenciasDepositos_ComercioID, T1.TransferenciasDepositos_PersonaId, T1.TransferenciasDepositos_ProveedorSucursalID, T1.TransferenciasDepositos_ProveedorID, T1.TransferenciasDepositos_Host, T1.TransferenciasDepositos_UsuarioID, T1.TransferenciasDepositos_TipoTransferenciaDepositoID, T1.TransferenciasDepositos_EstadoID) WITH 
        RELATIONSHIP(CREATEREF(ComercioContext.Empresas, ROW(T1.[TransferenciasDepositos_ComercioEmpresa.TransferenciasDepositos_ComercioEmpresa_Target.EmpresaID]),[iComercio.DAL.Empresa]),[iComercio.DAL.TransferenciasDepositos_ComercioEmpresa],TransferenciasDepositos_ComercioEmpresa_Source,TransferenciasDepositos_ComercioEmpresa_Target) 
        RELATIONSHIP(CREATEREF(ComercioContext.Empleados, ROW(T1.[TransferenciasDepositos_EmpleadoRegistrador.TransferenciasDepositos_EmpleadoRegistrador_Target.EmpleadoID]),[iComercio.DAL.Empleado]),[iComercio.DAL.TransferenciasDepositos_EmpleadoRegistrador],TransferenciasDepositos_EmpleadoRegistrador_Source,TransferenciasDepositos_EmpleadoRegistrador_Target) 
    FROM (
        SELECT 
            T.EmpresaID AS TransferenciasDepositos_EmpresaID, 
            T.TransferenciasDepositosID AS TransferenciasDepositos_TransferenciasDepositosID, 
            T.TransferenciasDepositosIDRemoto AS TransferenciasDepositos_TransferenciasDepositosIDRemoto, 
            T.NumTransferencia AS TransferenciasDepositos_NumTransferencia, 
            T.Importe AS TransferenciasDepositos_Importe, 
            T.Fecha AS TransferenciasDepositos_Fecha, 
            T.Costo AS TransferenciasDepositos_Costo, 
            T.Notas AS TransferenciasDepositos_Notas, 
            T.CuentaOrigenEmpresaID AS TransferenciasDepositos_CuentaOrigenEmpresaID, 
            T.CuentaOrigenCbID AS TransferenciasDepositos_CuentaOrigenCbID, 
            T.CuentaDestinoEmpresaID AS TransferenciasDepositos_CuentaDestinoEmpresaID, 
            T.CuentaDestinoCbID AS TransferenciasDepositos_CuentaDestinoCbID, 
            T.ChequeEmpID AS TransferenciasDepositos_ChequeEmpID, 
            T.ChequeCbID AS TransferenciasDepositos_ChequeCbID, 
            T.ChequeNumChequera AS TransferenciasDepositos_ChequeNumChequera, 
            T.ChequeNumCheque AS TransferenciasDepositos_ChequeNumCheque, 
            T.MedioDePagoID AS TransferenciasDepositos_MedioDePagoID, 
            T.MonedaID AS TransferenciasDepositos_MonedaID, 
            T.EmpleadoRegistradorEmpresaID AS TransferenciasDepositos_EmpleadoRegistradorEmpresaID, 
            T.EmpleadoRegistradorPersonaID AS TransferenciasDepositos_EmpleadoRegistradorPersonaID, 
            T.ComercioEmpresaID AS TransferenciasDepositos_ComercioEmpresaID, 
            T.ComercioID AS TransferenciasDepositos_ComercioID, 
            T.PersonaId AS TransferenciasDepositos_PersonaId, 
            T.ProveedorSucursalID AS TransferenciasDepositos_ProveedorSucursalID, 
            T.ProveedorID AS TransferenciasDepositos_ProveedorID, 
            T.Host AS TransferenciasDepositos_Host, 
            T.UsuarioID AS TransferenciasDepositos_UsuarioID, 
            T.TipoTransferenciaDepositoID AS TransferenciasDepositos_TipoTransferenciaDepositoID, 
            T.EstadoID AS TransferenciasDepositos_EstadoID, 
            True AS _from0, 
            T.ComercioEmpresa_EmpresaID AS [TransferenciasDepositos_ComercioEmpresa.TransferenciasDepositos_ComercioEmpresa_Target.EmpresaID], 
            T.EmpleadoRegistrador_EmpleadoID AS [TransferenciasDepositos_EmpleadoRegistrador.TransferenciasDepositos_EmpleadoRegistrador_Target.EmpleadoID]
        FROM CodeFirstDatabase.TransferenciasDepositos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TransferenciasDepositos_ComercioEmpresa.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView159()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TransferenciasDepositos_ComercioEmpresa
        [iComercio.DAL.TransferenciasDepositos_ComercioEmpresa](T3.[TransferenciasDepositos_ComercioEmpresa.TransferenciasDepositos_ComercioEmpresa_Source], T3.[TransferenciasDepositos_ComercioEmpresa.TransferenciasDepositos_ComercioEmpresa_Target])
    FROM (
        SELECT -- Constructing TransferenciasDepositos_ComercioEmpresa_Source
            CreateRef(ComercioContext.TransferenciasDepositos, row(T2.[TransferenciasDepositos_ComercioEmpresa.TransferenciasDepositos_ComercioEmpresa_Source.EmpresaID], T2.[TransferenciasDepositos_ComercioEmpresa.TransferenciasDepositos_ComercioEmpresa_Source.TransferenciasDepositosID]), [iComercio.DAL.TransferenciasDepositos]) AS [TransferenciasDepositos_ComercioEmpresa.TransferenciasDepositos_ComercioEmpresa_Source], 
            T2.[TransferenciasDepositos_ComercioEmpresa.TransferenciasDepositos_ComercioEmpresa_Target]
        FROM (
            SELECT -- Constructing TransferenciasDepositos_ComercioEmpresa_Target
                T1.[TransferenciasDepositos_ComercioEmpresa.TransferenciasDepositos_ComercioEmpresa_Source.EmpresaID], 
                T1.[TransferenciasDepositos_ComercioEmpresa.TransferenciasDepositos_ComercioEmpresa_Source.TransferenciasDepositosID], 
                CreateRef(ComercioContext.Empresas, row(T1.[TransferenciasDepositos_ComercioEmpresa.TransferenciasDepositos_ComercioEmpresa_Target.EmpresaID]), [iComercio.DAL.Empresa]) AS [TransferenciasDepositos_ComercioEmpresa.TransferenciasDepositos_ComercioEmpresa_Target]
            FROM (
                SELECT 
                    T.EmpresaID AS [TransferenciasDepositos_ComercioEmpresa.TransferenciasDepositos_ComercioEmpresa_Source.EmpresaID], 
                    T.TransferenciasDepositosID AS [TransferenciasDepositos_ComercioEmpresa.TransferenciasDepositos_ComercioEmpresa_Source.TransferenciasDepositosID], 
                    T.ComercioEmpresa_EmpresaID AS [TransferenciasDepositos_ComercioEmpresa.TransferenciasDepositos_ComercioEmpresa_Target.EmpresaID], 
                    True AS _from0
                FROM CodeFirstDatabase.TransferenciasDepositos AS T
                WHERE T.ComercioEmpresa_EmpresaID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TransferenciasDepositos_EmpleadoRegistrador.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView160()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TransferenciasDepositos_EmpleadoRegistrador
        [iComercio.DAL.TransferenciasDepositos_EmpleadoRegistrador](T3.[TransferenciasDepositos_EmpleadoRegistrador.TransferenciasDepositos_EmpleadoRegistrador_Source], T3.[TransferenciasDepositos_EmpleadoRegistrador.TransferenciasDepositos_EmpleadoRegistrador_Target])
    FROM (
        SELECT -- Constructing TransferenciasDepositos_EmpleadoRegistrador_Source
            CreateRef(ComercioContext.TransferenciasDepositos, row(T2.[TransferenciasDepositos_EmpleadoRegistrador.TransferenciasDepositos_EmpleadoRegistrador_Source.EmpresaID], T2.[TransferenciasDepositos_EmpleadoRegistrador.TransferenciasDepositos_EmpleadoRegistrador_Source.TransferenciasDepositosID]), [iComercio.DAL.TransferenciasDepositos]) AS [TransferenciasDepositos_EmpleadoRegistrador.TransferenciasDepositos_EmpleadoRegistrador_Source], 
            T2.[TransferenciasDepositos_EmpleadoRegistrador.TransferenciasDepositos_EmpleadoRegistrador_Target]
        FROM (
            SELECT -- Constructing TransferenciasDepositos_EmpleadoRegistrador_Target
                T1.[TransferenciasDepositos_EmpleadoRegistrador.TransferenciasDepositos_EmpleadoRegistrador_Source.EmpresaID], 
                T1.[TransferenciasDepositos_EmpleadoRegistrador.TransferenciasDepositos_EmpleadoRegistrador_Source.TransferenciasDepositosID], 
                CreateRef(ComercioContext.Empleados, row(T1.[TransferenciasDepositos_EmpleadoRegistrador.TransferenciasDepositos_EmpleadoRegistrador_Target.EmpleadoID]), [iComercio.DAL.Empleado]) AS [TransferenciasDepositos_EmpleadoRegistrador.TransferenciasDepositos_EmpleadoRegistrador_Target]
            FROM (
                SELECT 
                    T.EmpresaID AS [TransferenciasDepositos_EmpleadoRegistrador.TransferenciasDepositos_EmpleadoRegistrador_Source.EmpresaID], 
                    T.TransferenciasDepositosID AS [TransferenciasDepositos_EmpleadoRegistrador.TransferenciasDepositos_EmpleadoRegistrador_Source.TransferenciasDepositosID], 
                    T.EmpleadoRegistrador_EmpleadoID AS [TransferenciasDepositos_EmpleadoRegistrador.TransferenciasDepositos_EmpleadoRegistrador_Target.EmpleadoID], 
                    True AS _from0
                FROM CodeFirstDatabase.TransferenciasDepositos AS T
                WHERE T.EmpleadoRegistrador_EmpleadoID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TipoTransferenciaDeposito.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView161()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoTransferenciaDeposito
        [iComercio.DAL.TipoTransferenciaDeposito](T1.TipoTransferenciaDeposito_TipoTransferenciaDepositoID, T1.TipoTransferenciaDeposito_Nombre, T1.TipoTransferenciaDeposito_Descripcion)
    FROM (
        SELECT 
            T.TipoTransferenciaDepositoID AS TipoTransferenciaDeposito_TipoTransferenciaDepositoID, 
            T.Nombre AS TipoTransferenciaDeposito_Nombre, 
            T.Descripcion AS TipoTransferenciaDeposito_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.TipoTransferenciaDeposito AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Pagoes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView162()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Pagoes
        [iComercio.DAL.Pago](T1.Pago_EmpresaID, T1.Pago_ComercioID, T1.Pago_PagoID, T1.Pago_SolicitudFondoID, T1.Pago_CapID, T1.Pago_CapDetalleID, T1.Pago_FFID, T1.Pago_FFDetalleID, T1.Pago_Fecha, T1.Pago_Importe, T1.Pago_EstadoID)
    FROM (
        SELECT 
            T.EmpresaID AS Pago_EmpresaID, 
            T.ComercioID AS Pago_ComercioID, 
            T.PagoID AS Pago_PagoID, 
            T.SolicitudFondoID AS Pago_SolicitudFondoID, 
            T.CapID AS Pago_CapID, 
            T.CapDetalleID AS Pago_CapDetalleID, 
            T.FFID AS Pago_FFID, 
            T.FFDetalleID AS Pago_FFDetalleID, 
            T.Fecha AS Pago_Fecha, 
            T.Importe AS Pago_Importe, 
            T.EstadoID AS Pago_EstadoID, 
            True AS _from0
        FROM CodeFirstDatabase.Pago AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.CapDetalles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView163()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CapDetalles
        [iComercio.DAL.CapDetalle](T1.CapDetalle_EmpresaID, T1.CapDetalle_ComercioID, T1.CapDetalle_CapID, T1.CapDetalle_CapDetalleID, T1.CapDetalle_FechaVencimiento, T1.CapDetalle_Importe, T1.CapDetalle_Detalle, T1.CapDetalle_ImportePago, T1.CapDetalle_Finalizado, T1.CapDetalle_PendientePago)
    FROM (
        SELECT 
            T.EmpresaID AS CapDetalle_EmpresaID, 
            T.ComercioID AS CapDetalle_ComercioID, 
            T.CapID AS CapDetalle_CapID, 
            T.CapDetalleID AS CapDetalle_CapDetalleID, 
            T.FechaVencimiento AS CapDetalle_FechaVencimiento, 
            T.Importe AS CapDetalle_Importe, 
            T.Detalle AS CapDetalle_Detalle, 
            T.ImportePago AS CapDetalle_ImportePago, 
            T.Finalizado AS CapDetalle_Finalizado, 
            T.PendientePago AS CapDetalle_PendientePago, 
            True AS _from0
        FROM CodeFirstDatabase.CapDetalle AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Caps.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView164()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Caps
        [iComercio.DAL.Cap](T1.Cap_EmpresaID, T1.Cap_ComercioID, T1.Cap_CapID, T1.Cap_Fecha, T1.Cap_Total, T1.Cap_Notas, T1.Cap_SolicitudFondoID, T1.Cap_Pagado, T1.Cap_Finalizado, T1.Cap_EstadoID, T1.Cap_Saldo)
    FROM (
        SELECT 
            T.EmpresaID AS Cap_EmpresaID, 
            T.ComercioID AS Cap_ComercioID, 
            T.CapID AS Cap_CapID, 
            T.Fecha AS Cap_Fecha, 
            T.Total AS Cap_Total, 
            T.Notas AS Cap_Notas, 
            T.SolicitudFondoID AS Cap_SolicitudFondoID, 
            T.Pagado AS Cap_Pagado, 
            T.Finalizado AS Cap_Finalizado, 
            T.EstadoID AS Cap_EstadoID, 
            T.Saldo AS Cap_Saldo, 
            True AS _from0
        FROM CodeFirstDatabase.Cap AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.FFDetalles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView165()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FFDetalles
        [iComercio.DAL.FFDetalle](T1.FFDetalle_EmpresaID, T1.FFDetalle_ComercioID, T1.FFDetalle_FFID, T1.FFDetalle_FFDetalleID, T1.FFDetalle_Fecha, T1.FFDetalle_Importe, T1.FFDetalle_Detalle, T1.FFDetalle_ImportePago)
    FROM (
        SELECT 
            T.EmpresaID AS FFDetalle_EmpresaID, 
            T.ComercioID AS FFDetalle_ComercioID, 
            T.FFID AS FFDetalle_FFID, 
            T.FFDetalleID AS FFDetalle_FFDetalleID, 
            T.Fecha AS FFDetalle_Fecha, 
            T.Importe AS FFDetalle_Importe, 
            T.Detalle AS FFDetalle_Detalle, 
            T.ImportePago AS FFDetalle_ImportePago, 
            True AS _from0
        FROM CodeFirstDatabase.FFDetalle AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.FFs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView166()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FFs
        [iComercio.DAL.FF](T1.FF_EmpresaID, T1.FF_ComercioID, T1.FF_FFID, T1.FF_Fecha, T1.FF_PendienteReposicionSemAnt, T1.FF_Remanente, T1.FF_TotalGastos, T1.FF_MontoFF, T1.FF_Repuesto, T1.FF_Notas, T1.FF_EstadoID, T1.FF_AReponer, T1.FF_Pagado, T1.FF_SolicitudFondoID)
    FROM (
        SELECT 
            T.EmpresaID AS FF_EmpresaID, 
            T.ComercioID AS FF_ComercioID, 
            T.FFID AS FF_FFID, 
            T.Fecha AS FF_Fecha, 
            T.PendienteReposicionSemAnt AS FF_PendienteReposicionSemAnt, 
            T.Remanente AS FF_Remanente, 
            T.TotalGastos AS FF_TotalGastos, 
            T.MontoFF AS FF_MontoFF, 
            T.Repuesto AS FF_Repuesto, 
            T.Notas AS FF_Notas, 
            T.EstadoID AS FF_EstadoID, 
            T.AReponer AS FF_AReponer, 
            T.Pagado AS FF_Pagado, 
            T.SolicitudFondoID AS FF_SolicitudFondoID, 
            True AS _from0
        FROM CodeFirstDatabase.FF AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Recibo.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView167()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Recibo
        [iComercio.DAL.Recibo](T1.Recibo_EmpresaID, T1.Recibo_ComercioID, T1.Recibo_ReciboID, T1.Recibo_ReciboIDRemoto, T1.Recibo_Fecha, T1.Recibo_FechaIngreso, T1.Recibo_Importe, T1.Recibo_Comprobante, T1.Recibo_Notas, T1.Recibo_TipoMovimientoID, T1.Recibo_TransferenciasDepositosEmpId, T1.Recibo_TransferenciasDepositosID, T1.Recibo_SolicitudFondoID, T1.Recibo_Imputado, T1.Recibo_Migrado, T1.Recibo_Conformado, T1.Recibo_Host, T1.Recibo_UsuarioID, T1.Recibo_EstadoID, T1.Recibo_ComercioAdheridoComercioID, T1.Recibo_ComercioAdheridoEmpresaID, T1.Recibo_ReciboIDAnula, T1.Recibo_CobranzaID, T1.Recibo_CreditoID, T1.Recibo_CuotaID)
    FROM (
        SELECT 
            T.EmpresaID AS Recibo_EmpresaID, 
            T.ComercioID AS Recibo_ComercioID, 
            T.ReciboID AS Recibo_ReciboID, 
            T.ReciboIDRemoto AS Recibo_ReciboIDRemoto, 
            T.Fecha AS Recibo_Fecha, 
            T.FechaIngreso AS Recibo_FechaIngreso, 
            T.Importe AS Recibo_Importe, 
            T.Comprobante AS Recibo_Comprobante, 
            T.Notas AS Recibo_Notas, 
            T.TipoMovimientoID AS Recibo_TipoMovimientoID, 
            T.TransferenciasDepositosEmpId AS Recibo_TransferenciasDepositosEmpId, 
            T.TransferenciasDepositosID AS Recibo_TransferenciasDepositosID, 
            T.SolicitudFondoID AS Recibo_SolicitudFondoID, 
            T.Imputado AS Recibo_Imputado, 
            T.Migrado AS Recibo_Migrado, 
            T.Conformado AS Recibo_Conformado, 
            T.Host AS Recibo_Host, 
            T.UsuarioID AS Recibo_UsuarioID, 
            T.EstadoID AS Recibo_EstadoID, 
            T.ComercioAdheridoComercioID AS Recibo_ComercioAdheridoComercioID, 
            T.ComercioAdheridoEmpresaID AS Recibo_ComercioAdheridoEmpresaID, 
            T.ReciboIDAnula AS Recibo_ReciboIDAnula, 
            T.CobranzaID AS Recibo_CobranzaID, 
            T.CreditoID AS Recibo_CreditoID, 
            T.CuotaID AS Recibo_CuotaID, 
            True AS _from0
        FROM CodeFirstDatabase.Recibo AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TiposMovimientos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView168()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TiposMovimientos
        [iComercio.DAL.TipoMovimiento](T1.TipoMovimiento_TipoMovimientoID, T1.TipoMovimiento_Nombre, T1.TipoMovimiento_Descripcion, T1.TipoMovimiento_Cod, T1.TipoMovimiento_ClaseMovimientoID, T1.TipoMovimiento_CodInter, T1.TipoMovimiento_TipoMovIDAnula)
    FROM (
        SELECT 
            T.TipoMovimientoID AS TipoMovimiento_TipoMovimientoID, 
            T.Nombre AS TipoMovimiento_Nombre, 
            T.Descripcion AS TipoMovimiento_Descripcion, 
            T.Cod AS TipoMovimiento_Cod, 
            T.ClaseMovimientoID AS TipoMovimiento_ClaseMovimientoID, 
            T.CodInter AS TipoMovimiento_CodInter, 
            T.TipoMovIDAnula AS TipoMovimiento_TipoMovIDAnula, 
            True AS _from0
        FROM CodeFirstDatabase.TipoMovimiento AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.EstadoTransmisiones.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView169()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EstadoTransmisiones
        [iComercio.DAL.EstadoTransmision](T1.EstadoTransmision_EstadoTransmisionID, T1.EstadoTransmision_Nombre, T1.EstadoTransmision_Descripcion)
    FROM (
        SELECT 
            T.EstadoTransmisionID AS EstadoTransmision_EstadoTransmisionID, 
            T.Nombre AS EstadoTransmision_Nombre, 
            T.Descripcion AS EstadoTransmision_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.EstadoTransmision AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Operaciones.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView170()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Operaciones
        CASE
            WHEN T1._from40 THEN [iComercio.DAL.TransActualizarCap](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from41 THEN [iComercio.DAL.TransActualizarCliente](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from42 THEN [iComercio.DAL.TransActualizarCobranza](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from43 THEN [iComercio.DAL.TransActualizarComprobante](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from44 THEN [iComercio.DAL.TransActualizarConceptoGastos](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from45 THEN [iComercio.DAL.TransActualizarCredito](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from46 THEN [iComercio.DAL.TransActualizarCuota](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from47 THEN [iComercio.DAL.TransActualizarFF](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from48 THEN [iComercio.DAL.TransActualizarPago](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from49 THEN [iComercio.DAL.TransActualizarProveedor](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from50 THEN [iComercio.DAL.TransActualizarProveedorSucursal](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from51 THEN [iComercio.DAL.TransActualizarRefinanciacionCobranza](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from52 THEN [iComercio.DAL.TransActualizarRefinanciacionCuota](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from53 THEN [iComercio.DAL.TransActualizarSolicitudDeFondo](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from54 THEN [iComercio.DAL.TransAgregarCliente](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from55 THEN [iComercio.DAL.TransAgregarCobranza](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from56 THEN [iComercio.DAL.TransAgregarConceptoGastoProveedor](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from57 THEN [iComercio.DAL.TransAgregarConceptoGastos](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from58 THEN [iComercio.DAL.TransAgregarProveedor](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from59 THEN [iComercio.DAL.TransAgregarProveedorSucursal](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from1 THEN [iComercio.DAL.TransAltaArregloCancelacion](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from2 THEN [iComercio.DAL.TransAltaCap](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from3 THEN [iComercio.DAL.TransAltaCobranza](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from4 THEN [iComercio.DAL.TransAltaCobranzas](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from5 THEN [iComercio.DAL.TransAltaComprobante](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from6 THEN [iComercio.DAL.TransAltaCredito](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from7 THEN [iComercio.DAL.TransAltaFF](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from8 THEN [iComercio.DAL.TransAltaGasto](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from9 THEN [iComercio.DAL.TransAltaNotaCD](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from10 THEN [iComercio.DAL.TransAltaPago](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from11 THEN [iComercio.DAL.TransAltaPagoAnticipado](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from12 THEN [iComercio.DAL.TransAltaRecibo](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from13 THEN [iComercio.DAL.TransAltaRefinanciacion](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from14 THEN [iComercio.DAL.TransAltaRefinanciacionCobranza](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from15 THEN [iComercio.DAL.TransAltaRefinanciacionCuota](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from16 THEN [iComercio.DAL.TransAltaTransDep](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from17 THEN [iComercio.DAL.TransArchivo](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from18 THEN [iComercio.DAL.TransBajaCap](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from19 THEN [iComercio.DAL.TransBajaCobranza](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from20 THEN [iComercio.DAL.TransBajaComprobante](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from21 THEN [iComercio.DAL.TransBajaCredito](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from22 THEN [iComercio.DAL.TransBajaFF](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from23 THEN [iComercio.DAL.TransBajaGasto](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from24 THEN [iComercio.DAL.TransBajaNotaCD](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from25 THEN [iComercio.DAL.TransBajaPago](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from26 THEN [iComercio.DAL.TransBajaRecibo](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from27 THEN [iComercio.DAL.TransBajaRefinanciacion](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from28 THEN [iComercio.DAL.TransBajaRefinanciacionCobranza](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from29 THEN [iComercio.DAL.TransConfirmarSolicitudDeFondo](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from30 THEN [iComercio.DAL.TransControlDiario](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from31 THEN [iComercio.DAL.TransEliminarCliente](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from32 THEN [iComercio.DAL.TransEliminarConceptoGastoProveedor](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from33 THEN [iComercio.DAL.TransEliminarConceptoGastos](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from34 THEN [iComercio.DAL.TransEliminarProveedor](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from35 THEN [iComercio.DAL.TransEliminarProveedorSucursal](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from36 THEN [iComercio.DAL.TransEnviarSolicitudDeFondo](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from37 THEN [iComercio.DAL.TransImputacionCC](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            WHEN T1._from38 THEN [iComercio.DAL.TransInfoAct](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
            ELSE [iComercio.DAL.TransPagoAnticipadoNotaCD](T1.Operacion_OperacionID, T1.Operacion_Nombre, T1.Operacion_Descripcion)
        END
    FROM (
        SELECT 
            T.OperacionID AS Operacion_OperacionID, 
            T.Nombre AS Operacion_Nombre, 
            T.Descripcion AS Operacion_Descripcion, 
            True AS _from0, 
            CASE WHEN T.Discriminator = N'TransAltaArregloCancelacion' THEN True ELSE False END AS _from1, 
            CASE WHEN T.Discriminator = N'TransAltaCap' THEN True ELSE False END AS _from2, 
            CASE WHEN T.Discriminator = N'TransAltaCobranza' THEN True ELSE False END AS _from3, 
            CASE WHEN T.Discriminator = N'TransAltaCobranzas' THEN True ELSE False END AS _from4, 
            CASE WHEN T.Discriminator = N'TransAltaComprobante' THEN True ELSE False END AS _from5, 
            CASE WHEN T.Discriminator = N'TransAltaCredito' THEN True ELSE False END AS _from6, 
            CASE WHEN T.Discriminator = N'TransAltaFF' THEN True ELSE False END AS _from7, 
            CASE WHEN T.Discriminator = N'TransAltaGasto' THEN True ELSE False END AS _from8, 
            CASE WHEN T.Discriminator = N'TransAltaNotaCD' THEN True ELSE False END AS _from9, 
            CASE WHEN T.Discriminator = N'TransAltaPago' THEN True ELSE False END AS _from10, 
            CASE WHEN T.Discriminator = N'TransAltaPagoAnticipado' THEN True ELSE False END AS _from11, 
            CASE WHEN T.Discriminator = N'TransAltaRecibo' THEN True ELSE False END AS _from12, 
            CASE WHEN T.Discriminator = N'TransAltaRefinanciacion' THEN True ELSE False END AS _from13, 
            CASE WHEN T.Discriminator = N'TransAltaRefinanciacionCobranza' THEN True ELSE False END AS _from14, 
            CASE WHEN T.Discriminator = N'TransAltaRefinanciacionCuota' THEN True ELSE False END AS _from15, 
            CASE WHEN T.Discriminator = N'TransAltaTransDep' THEN True ELSE False END AS _from16, 
            CASE WHEN T.Discriminator = N'TransArchivo' THEN True ELSE False END AS _from17, 
            CASE WHEN T.Discriminator = N'TransBajaCap' THEN True ELSE False END AS _from18, 
            CASE WHEN T.Discriminator = N'TransBajaCobranza' THEN True ELSE False END AS _from19, 
            CASE WHEN T.Discriminator = N'TransBajaComprobante' THEN True ELSE False END AS _from20, 
            CASE WHEN T.Discriminator = N'TransBajaCredito' THEN True ELSE False END AS _from21, 
            CASE WHEN T.Discriminator = N'TransBajaFF' THEN True ELSE False END AS _from22, 
            CASE WHEN T.Discriminator = N'TransBajaGasto' THEN True ELSE False END AS _from23, 
            CASE WHEN T.Discriminator = N'TransBajaNotaCD' THEN True ELSE False END AS _from24, 
            CASE WHEN T.Discriminator = N'TransBajaPago' THEN True ELSE False END AS _from25, 
            CASE WHEN T.Discriminator = N'TransBajaRecibo' THEN True ELSE False END AS _from26, 
            CASE WHEN T.Discriminator = N'TransBajaRefinanciacion' THEN True ELSE False END AS _from27, 
            CASE WHEN T.Discriminator = N'TransBajaRefinanciacionCobranza' THEN True ELSE False END AS _from28, 
            CASE WHEN T.Discriminator = N'TransConfirmarSolicitudDeFondo' THEN True ELSE False END AS _from29, 
            CASE WHEN T.Discriminator = N'TransControlDiario' THEN True ELSE False END AS _from30, 
            CASE WHEN T.Discriminator = N'TransEliminarCliente' THEN True ELSE False END AS _from31, 
            CASE WHEN T.Discriminator = N'TransEliminarConceptoGastoProveedor' THEN True ELSE False END AS _from32, 
            CASE WHEN T.Discriminator = N'TransEliminarConceptoGastos' THEN True ELSE False END AS _from33, 
            CASE WHEN T.Discriminator = N'TransEliminarProveedor' THEN True ELSE False END AS _from34, 
            CASE WHEN T.Discriminator = N'TransEliminarProveedorSucursal' THEN True ELSE False END AS _from35, 
            CASE WHEN T.Discriminator = N'TransEnviarSolicitudDeFondo' THEN True ELSE False END AS _from36, 
            CASE WHEN T.Discriminator = N'TransImputacionCC' THEN True ELSE False END AS _from37, 
            CASE WHEN T.Discriminator = N'TransInfoAct' THEN True ELSE False END AS _from38, 
            CASE WHEN T.Discriminator = N'TransPagoAnticipadoNotaCD' THEN True ELSE False END AS _from39, 
            CASE WHEN T.Discriminator = N'TransActualizarCap' THEN True ELSE False END AS _from40, 
            CASE WHEN T.Discriminator = N'TransActualizarCliente' THEN True ELSE False END AS _from41, 
            CASE WHEN T.Discriminator = N'TransActualizarCobranza' THEN True ELSE False END AS _from42, 
            CASE WHEN T.Discriminator = N'TransActualizarComprobante' THEN True ELSE False END AS _from43, 
            CASE WHEN T.Discriminator = N'TransActualizarConceptoGastos' THEN True ELSE False END AS _from44, 
            CASE WHEN T.Discriminator = N'TransActualizarCredito' THEN True ELSE False END AS _from45, 
            CASE WHEN T.Discriminator = N'TransActualizarCuota' THEN True ELSE False END AS _from46, 
            CASE WHEN T.Discriminator = N'TransActualizarFF' THEN True ELSE False END AS _from47, 
            CASE WHEN T.Discriminator = N'TransActualizarPago' THEN True ELSE False END AS _from48, 
            CASE WHEN T.Discriminator = N'TransActualizarProveedor' THEN True ELSE False END AS _from49, 
            CASE WHEN T.Discriminator = N'TransActualizarProveedorSucursal' THEN True ELSE False END AS _from50, 
            CASE WHEN T.Discriminator = N'TransActualizarRefinanciacionCobranza' THEN True ELSE False END AS _from51, 
            CASE WHEN T.Discriminator = N'TransActualizarRefinanciacionCuota' THEN True ELSE False END AS _from52, 
            CASE WHEN T.Discriminator = N'TransActualizarSolicitudDeFondo' THEN True ELSE False END AS _from53, 
            CASE WHEN T.Discriminator = N'TransAgregarCliente' THEN True ELSE False END AS _from54, 
            CASE WHEN T.Discriminator = N'TransAgregarCobranza' THEN True ELSE False END AS _from55, 
            CASE WHEN T.Discriminator = N'TransAgregarConceptoGastoProveedor' THEN True ELSE False END AS _from56, 
            CASE WHEN T.Discriminator = N'TransAgregarConceptoGastos' THEN True ELSE False END AS _from57, 
            CASE WHEN T.Discriminator = N'TransAgregarProveedor' THEN True ELSE False END AS _from58, 
            CASE WHEN T.Discriminator = N'TransAgregarProveedorSucursal' THEN True ELSE False END AS _from59
        FROM CodeFirstDatabase.Operacion AS T
        WHERE T.Discriminator IN {N'TransActualizarCap', N'TransActualizarCliente', N'TransActualizarCobranza', N'TransActualizarComprobante', N'TransActualizarConceptoGastos', N'TransActualizarCredito', N'TransActualizarCuota', N'TransActualizarFF', N'TransActualizarPago', N'TransActualizarProveedor', N'TransActualizarProveedorSucursal', N'TransActualizarRefinanciacionCobranza', N'TransActualizarRefinanciacionCuota', N'TransActualizarSolicitudDeFondo', N'TransAgregarCliente', N'TransAgregarCobranza', N'TransAgregarConceptoGastoProveedor', N'TransAgregarConceptoGastos', N'TransAgregarProveedor', N'TransAgregarProveedorSucursal', N'TransAltaArregloCancelacion', N'TransAltaCap', N'TransAltaCobranza', N'TransAltaCobranzas', N'TransAltaComprobante', N'TransAltaCredito', N'TransAltaFF', N'TransAltaGasto', N'TransAltaNotaCD', N'TransAltaPago', N'TransAltaPagoAnticipado', N'TransAltaRecibo', N'TransAltaRefinanciacion', N'TransAltaRefinanciacionCobranza', N'TransAltaRefinanciacionCuota', N'TransAltaTransDep', N'TransArchivo', N'TransBajaCap', N'TransBajaCobranza', N'TransBajaComprobante', N'TransBajaCredito', N'TransBajaFF', N'TransBajaGasto', N'TransBajaNotaCD', N'TransBajaPago', N'TransBajaRecibo', N'TransBajaRefinanciacion', N'TransBajaRefinanciacionCobranza', N'TransConfirmarSolicitudDeFondo', N'TransControlDiario', N'TransEliminarCliente', N'TransEliminarConceptoGastoProveedor', N'TransEliminarConceptoGastos', N'TransEliminarProveedor', N'TransEliminarProveedorSucursal', N'TransEnviarSolicitudDeFondo', N'TransImputacionCC', N'TransInfoAct', N'TransPagoAnticipadoNotaCD'}
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.OrdenesDePago.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView171()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing OrdenesDePago
        [iComercio.DAL.OrdenDePago](T1.OrdenDePago_OrdenDePagoID, T1.OrdenDePago_EmpresaID, T1.OrdenDePago_Fecha, T1.[OrdenDePago.fecha_pago], T1.OrdenDePago_importe, T1.OrdenDePago_EstadoID, T1.OrdenDePago_ConceptoFondosID)
    FROM (
        SELECT 
            T.OrdenDePagoID AS OrdenDePago_OrdenDePagoID, 
            T.EmpresaID AS OrdenDePago_EmpresaID, 
            T.Fecha AS OrdenDePago_Fecha, 
            T.fecha_pago AS [OrdenDePago.fecha_pago], 
            T.importe AS OrdenDePago_importe, 
            T.EstadoID AS OrdenDePago_EstadoID, 
            T.ConceptoFondosID AS OrdenDePago_ConceptoFondosID, 
            True AS _from0
        FROM CodeFirstDatabase.OrdenDePago AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TipoRetencionPlan.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView172()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoRetencionPlan
        [iComercio.DAL.TipoRetencionPlan](T1.TipoRetencionPlan_TipoRetencionPlanID, T1.TipoRetencionPlan_Nombre, T1.TipoRetencionPlan_Descripcion)
    FROM (
        SELECT 
            T.TipoRetencionPlanID AS TipoRetencionPlan_TipoRetencionPlanID, 
            T.Nombre AS TipoRetencionPlan_Nombre, 
            T.Descripcion AS TipoRetencionPlan_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.TipoRetencionPlan AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Transmisiones.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView173()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Transmisiones
        [iComercio.DAL.Transmision](T1.Transmision_TransmisionID, T1.Transmision_OperacionID, T1.Transmision_EstadoTransmisionID, T1.Transmision_EmpresaID, T1.Transmision_ComercioID, T1.Transmision_EntidadID, T1.Transmision_EntidadID2, T1.Transmision_EntidadID3, T1.Transmision_EntidadID4, T1.Transmision_EntidadID5, T1.Transmision_EntidadID6, T1.Transmision_EntidadID7, T1.Transmision_Fecha, T1.Transmision_RutaApi, T1.Transmision_GrupoTransmision, T1.Transmision_CantTransmisiones, T1.Transmision_UltimaTransmision)
    FROM (
        SELECT 
            T.TransmisionID AS Transmision_TransmisionID, 
            T.OperacionID AS Transmision_OperacionID, 
            T.EstadoTransmisionID AS Transmision_EstadoTransmisionID, 
            T.EmpresaID AS Transmision_EmpresaID, 
            T.ComercioID AS Transmision_ComercioID, 
            T.EntidadID AS Transmision_EntidadID, 
            T.EntidadID2 AS Transmision_EntidadID2, 
            T.EntidadID3 AS Transmision_EntidadID3, 
            T.EntidadID4 AS Transmision_EntidadID4, 
            T.EntidadID5 AS Transmision_EntidadID5, 
            T.EntidadID6 AS Transmision_EntidadID6, 
            T.EntidadID7 AS Transmision_EntidadID7, 
            T.Fecha AS Transmision_Fecha, 
            T.RutaApi AS Transmision_RutaApi, 
            T.GrupoTransmision AS Transmision_GrupoTransmision, 
            T.CantTransmisiones AS Transmision_CantTransmisiones, 
            T.UltimaTransmision AS Transmision_UltimaTransmision, 
            True AS _from0
        FROM CodeFirstDatabase.Transmision AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.PlanesTipoes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView174()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PlanesTipoes
        [iComercio.DAL.PlanesTipo](T1.PlanesTipo_PlanesTipoID, T1.PlanesTipo_EmpresaID, T1.PlanesTipo_ComercioID, T1.PlanesTipo_TipoAV, T1.PlanesTipo_PuntoD, T1.PlanesTipo_PuntoH, T1.PlanesTipo_Inter, T1.[PlanesTipo.Inter_Incr], T1.PlanesTipo_Gasto, T1.[PlanesTipo.Gasto_Incr], T1.PlanesTipo_GastoFijo, T1.PlanesTipo_Comis, T1.[PlanesTipo.Comis_Incr], T1.PlanesTipo_MontoMax, T1.PlanesTipo_NroORden, T1.PlanesTipo_Notas, T1.PlanesTipo_Corte, T1.PlanesTipo_TipoRetencionPlanID)
    FROM (
        SELECT 
            T.PlanesTipoID AS PlanesTipo_PlanesTipoID, 
            T.EmpresaID AS PlanesTipo_EmpresaID, 
            T.ComercioID AS PlanesTipo_ComercioID, 
            T.TipoAV AS PlanesTipo_TipoAV, 
            T.PuntoD AS PlanesTipo_PuntoD, 
            T.PuntoH AS PlanesTipo_PuntoH, 
            T.Inter AS PlanesTipo_Inter, 
            T.Inter_Incr AS [PlanesTipo.Inter_Incr], 
            T.Gasto AS PlanesTipo_Gasto, 
            T.Gasto_Incr AS [PlanesTipo.Gasto_Incr], 
            T.GastoFijo AS PlanesTipo_GastoFijo, 
            T.Comis AS PlanesTipo_Comis, 
            T.Comis_Incr AS [PlanesTipo.Comis_Incr], 
            T.MontoMax AS PlanesTipo_MontoMax, 
            T.NroORden AS PlanesTipo_NroORden, 
            T.Notas AS PlanesTipo_Notas, 
            T.Corte AS PlanesTipo_Corte, 
            T.TipoRetencionPlanID AS PlanesTipo_TipoRetencionPlanID, 
            True AS _from0
        FROM CodeFirstDatabase.PlanesTipo AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.PlanesBonifs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView175()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PlanesBonifs
        [iComercio.DAL.PlanesBonif](T1.PlanesBonif_PlanesBonifID, T1.PlanesBonif_PlanesTipoID, T1.PlanesBonif_EmpresaID, T1.PlanesBonif_ComercioID, T1.PlanesBonif_TipoBoni, T1.PlanesBonif_PorBoni, T1.[PlanesBonif.Cuotas_D], T1.[PlanesBonif.Cuotas_H], T1.PlanesBonif_TipoCuota, T1.PlanesBonif_nMora, T1.PlanesBonif_FechaAlta, T1.PlanesBonif_FechaVenci, T1.PlanesBonif_UsuarioID, T1.PlanesBonif_UsuarioPC)
    FROM (
        SELECT 
            T.PlanesBonifID AS PlanesBonif_PlanesBonifID, 
            T.PlanesTipoID AS PlanesBonif_PlanesTipoID, 
            T.EmpresaID AS PlanesBonif_EmpresaID, 
            T.ComercioID AS PlanesBonif_ComercioID, 
            T.TipoBoni AS PlanesBonif_TipoBoni, 
            T.PorBoni AS PlanesBonif_PorBoni, 
            T.Cuotas_D AS [PlanesBonif.Cuotas_D], 
            T.Cuotas_H AS [PlanesBonif.Cuotas_H], 
            T.TipoCuota AS PlanesBonif_TipoCuota, 
            T.nMora AS PlanesBonif_nMora, 
            T.FechaAlta AS PlanesBonif_FechaAlta, 
            T.FechaVenci AS PlanesBonif_FechaVenci, 
            T.UsuarioID AS PlanesBonif_UsuarioID, 
            T.UsuarioPC AS PlanesBonif_UsuarioPC, 
            True AS _from0
        FROM CodeFirstDatabase.PlanesBonif AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.PlanesDetalles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView176()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PlanesDetalles
        [iComercio.DAL.PlanesDetalle](T1.PlanesDetalle_PlanesDetalleID, T1.PlanesDetalle_PlanesTipoID, T1.PlanesDetalle_EmpresaID, T1.PlanesDetalle_ComercioID, T1.PlanesDetalle_TipoCuota, T1.[PlanesDetalle.Cuotas_D], T1.[PlanesDetalle.Cuotas_H], T1.PlanesDetalle_SiCreditos, T1.[PlanesDetalle.nCreditos_D], T1.[PlanesDetalle.nCreditos_H], T1.PlanesDetalle_SiCancel, T1.[PlanesDetalle.nCancel_D], T1.[PlanesDetalle.nCancel_H], T1.PlanesDetalle_SiMora, T1.[PlanesDetalle.nMora_D], T1.[PlanesDetalle.nMora_H], T1.PlanesDetalle_SiValor, T1.[PlanesDetalle.nValor_D], T1.[PlanesDetalle.nValor_H], T1.[PlanesDetalle.Monto_max], T1.PlanesDetalle_FechaAlta, T1.PlanesDetalle_FechaVenci, T1.PlanesDetalle_UsuarioID, T1.PlanesDetalle_UsuarioPC)
    FROM (
        SELECT 
            T.PlanesDetalleID AS PlanesDetalle_PlanesDetalleID, 
            T.PlanesTipoID AS PlanesDetalle_PlanesTipoID, 
            T.EmpresaID AS PlanesDetalle_EmpresaID, 
            T.ComercioID AS PlanesDetalle_ComercioID, 
            T.TipoCuota AS PlanesDetalle_TipoCuota, 
            T.Cuotas_D AS [PlanesDetalle.Cuotas_D], 
            T.Cuotas_H AS [PlanesDetalle.Cuotas_H], 
            T.SiCreditos AS PlanesDetalle_SiCreditos, 
            T.nCreditos_D AS [PlanesDetalle.nCreditos_D], 
            T.nCreditos_H AS [PlanesDetalle.nCreditos_H], 
            T.SiCancel AS PlanesDetalle_SiCancel, 
            T.nCancel_D AS [PlanesDetalle.nCancel_D], 
            T.nCancel_H AS [PlanesDetalle.nCancel_H], 
            T.SiMora AS PlanesDetalle_SiMora, 
            T.nMora_D AS [PlanesDetalle.nMora_D], 
            T.nMora_H AS [PlanesDetalle.nMora_H], 
            T.SiValor AS PlanesDetalle_SiValor, 
            T.nValor_D AS [PlanesDetalle.nValor_D], 
            T.nValor_H AS [PlanesDetalle.nValor_H], 
            T.Monto_max AS [PlanesDetalle.Monto_max], 
            T.FechaAlta AS PlanesDetalle_FechaAlta, 
            T.FechaVenci AS PlanesDetalle_FechaVenci, 
            T.UsuarioID AS PlanesDetalle_UsuarioID, 
            T.UsuarioPC AS PlanesDetalle_UsuarioPC, 
            True AS _from0
        FROM CodeFirstDatabase.PlanesDetalle AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.PlanesVencis.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView177()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PlanesVencis
        [iComercio.DAL.PlanesVenci](T1.PlanesVenci_PlanesVenciID, T1.PlanesVenci_PlanesTipoID, T1.PlanesVenci_CambiaFecha, T1.PlanesVenci_DiasPrimerCuota, T1.PlanesVenci_TipoVencimiento, T1.PlanesVenci_VenciDia, T1.PlanesVenci_VenciCorte, T1.PlanesVenci_Corte1, T1.PlanesVenci_VenDia1, T1.PlanesVenci_Corte2, T1.PlanesVenci_Vendia2, T1.PlanesVenci_Vendia3, T1.PlanesVenci_FechaAlta, T1.PlanesVenci_FechaVenci, T1.PlanesVenci_UsuarioID, T1.PlanesVenci_UsuarioPC)
    FROM (
        SELECT 
            T.PlanesVenciID AS PlanesVenci_PlanesVenciID, 
            T.PlanesTipoID AS PlanesVenci_PlanesTipoID, 
            T.CambiaFecha AS PlanesVenci_CambiaFecha, 
            T.DiasPrimerCuota AS PlanesVenci_DiasPrimerCuota, 
            T.TipoVencimiento AS PlanesVenci_TipoVencimiento, 
            T.VenciDia AS PlanesVenci_VenciDia, 
            T.VenciCorte AS PlanesVenci_VenciCorte, 
            T.Corte1 AS PlanesVenci_Corte1, 
            T.VenDia1 AS PlanesVenci_VenDia1, 
            T.Corte2 AS PlanesVenci_Corte2, 
            T.Vendia2 AS PlanesVenci_Vendia2, 
            T.Vendia3 AS PlanesVenci_Vendia3, 
            T.FechaAlta AS PlanesVenci_FechaAlta, 
            T.FechaVenci AS PlanesVenci_FechaVenci, 
            T.UsuarioID AS PlanesVenci_UsuarioID, 
            T.UsuarioPC AS PlanesVenci_UsuarioPC, 
            True AS _from0
        FROM CodeFirstDatabase.PlanesVenci AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Perfil_Permisos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView178()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Perfil_Permisos
        [iComercio.DAL.Perfil_Permisos](T3.[Perfil_Permisos.Perfil_Permisos_Source], T3.[Perfil_Permisos.Perfil_Permisos_Target])
    FROM (
        SELECT -- Constructing Perfil_Permisos_Source
            CreateRef(ComercioContext.Perfiles, row(T2.[Perfil_Permisos.Perfil_Permisos_Source.PerfilID]), [iComercio.DAL.Perfil]) AS [Perfil_Permisos.Perfil_Permisos_Source], 
            T2.[Perfil_Permisos.Perfil_Permisos_Target]
        FROM (
            SELECT -- Constructing Perfil_Permisos_Target
                T1.[Perfil_Permisos.Perfil_Permisos_Source.PerfilID], 
                CreateRef(ComercioContext.Permisos, row(T1.[Perfil_Permisos.Perfil_Permisos_Target.PermisoID]), [iComercio.DAL.Permiso]) AS [Perfil_Permisos.Perfil_Permisos_Target]
            FROM (
                SELECT 
                    T.PerfilID AS [Perfil_Permisos.Perfil_Permisos_Source.PerfilID], 
                    T.PermisoID AS [Perfil_Permisos.Perfil_Permisos_Target.PermisoID], 
                    True AS _from0
                FROM CodeFirstDatabase.PerfilPermiso AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Usuario_Perfiles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView179()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Usuario_Perfiles
        [iComercio.DAL.Usuario_Perfiles](T3.[Usuario_Perfiles.Usuario_Perfiles_Source], T3.[Usuario_Perfiles.Usuario_Perfiles_Target])
    FROM (
        SELECT -- Constructing Usuario_Perfiles_Source
            CreateRef(ComercioContext.Usuarios, row(T2.[Usuario_Perfiles.Usuario_Perfiles_Source.UsuarioID]), [iComercio.DAL.Usuario]) AS [Usuario_Perfiles.Usuario_Perfiles_Source], 
            T2.[Usuario_Perfiles.Usuario_Perfiles_Target]
        FROM (
            SELECT -- Constructing Usuario_Perfiles_Target
                T1.[Usuario_Perfiles.Usuario_Perfiles_Source.UsuarioID], 
                CreateRef(ComercioContext.Perfiles, row(T1.[Usuario_Perfiles.Usuario_Perfiles_Target.PerfilID]), [iComercio.DAL.Perfil]) AS [Usuario_Perfiles.Usuario_Perfiles_Target]
            FROM (
                SELECT 
                    T.UsuarioID AS [Usuario_Perfiles.Usuario_Perfiles_Source.UsuarioID], 
                    T.PerfilID AS [Usuario_Perfiles.Usuario_Perfiles_Target.PerfilID], 
                    True AS _from0
                FROM CodeFirstDatabase.UsuarioPerfil AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.CuentaCorrienteCorte.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView180()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CuentaCorrienteCorte
        [CodeFirstDatabaseSchema.CuentaCorrienteCorte](T1.CuentaCorrienteCorte_EmpresaID, T1.CuentaCorrienteCorte_ComercioID, T1.CuentaCorrienteCorte_CuentaCorrienteCorteID, T1.CuentaCorrienteCorte_Fecha, T1.CuentaCorrienteCorte_Saldo)
    FROM (
        SELECT 
            T.EmpresaID AS CuentaCorrienteCorte_EmpresaID, 
            T.ComercioID AS CuentaCorrienteCorte_ComercioID, 
            T.CuentaCorrienteCorteID AS CuentaCorrienteCorte_CuentaCorrienteCorteID, 
            T.Fecha AS CuentaCorrienteCorte_Fecha, 
            T.Saldo AS CuentaCorrienteCorte_Saldo, 
            True AS _from0
        FROM ComercioContext.CorteCuentaCorriente AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.CorteCuentaCorriente.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView181()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CorteCuentaCorriente
        [iComercio.DAL.CuentaCorrienteCorte](T1.CuentaCorrienteCorte_EmpresaID, T1.CuentaCorrienteCorte_ComercioID, T1.CuentaCorrienteCorte_CuentaCorrienteCorteID, T1.CuentaCorrienteCorte_Fecha, T1.CuentaCorrienteCorte_Saldo)
    FROM (
        SELECT 
            T.EmpresaID AS CuentaCorrienteCorte_EmpresaID, 
            T.ComercioID AS CuentaCorrienteCorte_ComercioID, 
            T.CuentaCorrienteCorteID AS CuentaCorrienteCorte_CuentaCorrienteCorteID, 
            T.Fecha AS CuentaCorrienteCorte_Fecha, 
            T.Saldo AS CuentaCorrienteCorte_Saldo, 
            True AS _from0
        FROM CodeFirstDatabase.CuentaCorrienteCorte AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Log.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView182()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Log
        [CodeFirstDatabaseSchema.Log](T1.Log_LogID, T1.Log_Fecha, T1.Log_Usuario, T1.Log_Host, T1.Log_Mens, T1.Log_Tipo)
    FROM (
        SELECT 
            T.LogID AS Log_LogID, 
            T.Fecha AS Log_Fecha, 
            T.Usuario AS Log_Usuario, 
            T.Host AS Log_Host, 
            T.Mens AS Log_Mens, 
            T.Tipo AS Log_Tipo, 
            True AS _from0
        FROM ComercioContext.Logs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.Logs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView183()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Logs
        [iComercio.DAL.Log](T1.Log_LogID, T1.Log_Fecha, T1.Log_Usuario, T1.Log_Host, T1.Log_Mens, T1.Log_Tipo)
    FROM (
        SELECT 
            T.LogID AS Log_LogID, 
            T.Fecha AS Log_Fecha, 
            T.Usuario AS Log_Usuario, 
            T.Host AS Log_Host, 
            T.Mens AS Log_Mens, 
            T.Tipo AS Log_Tipo, 
            True AS _from0
        FROM CodeFirstDatabase.Log AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TipoImagen.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView184()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoImagen
        [CodeFirstDatabaseSchema.TipoImagen](T1.TipoImagen_TipoImagenID, T1.TipoImagen_Nombre, T1.TipoImagen_Sufijo, T1.TipoImagen_Orden)
    FROM (
        SELECT 
            T.TipoImagenID AS TipoImagen_TipoImagenID, 
            T.Nombre AS TipoImagen_Nombre, 
            T.Sufijo AS TipoImagen_Sufijo, 
            T.Orden AS TipoImagen_Orden, 
            True AS _from0
        FROM ComercioContext.TipoImagen AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TipoImagen.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView185()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoImagen
        [iComercio.DAL.TipoImagen](T1.TipoImagen_TipoImagenID, T1.TipoImagen_Nombre, T1.TipoImagen_Sufijo, T1.TipoImagen_Orden)
    FROM (
        SELECT 
            T.TipoImagenID AS TipoImagen_TipoImagenID, 
            T.Nombre AS TipoImagen_Nombre, 
            T.Sufijo AS TipoImagen_Sufijo, 
            T.Orden AS TipoImagen_Orden, 
            True AS _from0
        FROM CodeFirstDatabase.TipoImagen AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TipoImpresion.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView186()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoImpresion
        [CodeFirstDatabaseSchema.TipoImpresion](T1.TipoImpresion_TipoImpresionID, T1.TipoImpresion_Nombre, T1.TipoImpresion_Impresora)
    FROM (
        SELECT 
            T.TipoImpresionID AS TipoImpresion_TipoImpresionID, 
            T.Nombre AS TipoImpresion_Nombre, 
            T.Impresora AS TipoImpresion_Impresora, 
            True AS _from0
        FROM ComercioContext.TipoImpresion AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.TipoImpresion.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView187()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TipoImpresion
        [iComercio.DAL.TipoImpresion](T1.TipoImpresion_TipoImpresionID, T1.TipoImpresion_Nombre, T1.TipoImpresion_Impresora)
    FROM (
        SELECT 
            T.TipoImpresionID AS TipoImpresion_TipoImpresionID, 
            T.Nombre AS TipoImpresion_Nombre, 
            T.Impresora AS TipoImpresion_Impresora, 
            True AS _from0
        FROM CodeFirstDatabase.TipoImpresion AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PlanesParam.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView188()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PlanesParam
        [CodeFirstDatabaseSchema.PlanesParam](T1.PlanesParam_PlanesParamId, T1.PlanesParam_Desde, T1.PlanesParam_Hasta, T1.PlanesParam_Valor, T1.PlanesParam_Param1, T1.PlanesParam_Param2, T1.PlanesParam_Orden)
    FROM (
        SELECT 
            T.PlanesParamId AS PlanesParam_PlanesParamId, 
            T.Desde AS PlanesParam_Desde, 
            T.Hasta AS PlanesParam_Hasta, 
            T.Valor AS PlanesParam_Valor, 
            T.Param1 AS PlanesParam_Param1, 
            T.Param2 AS PlanesParam_Param2, 
            T.Orden AS PlanesParam_Orden, 
            True AS _from0
        FROM ComercioContext.PlanesParams AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ComercioContext.PlanesParams.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView189()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PlanesParams
        [iComercio.DAL.PlanesParam](T1.PlanesParam_PlanesParamId, T1.PlanesParam_Desde, T1.PlanesParam_Hasta, T1.PlanesParam_Valor, T1.PlanesParam_Param1, T1.PlanesParam_Param2, T1.PlanesParam_Orden)
    FROM (
        SELECT 
            T.PlanesParamId AS PlanesParam_PlanesParamId, 
            T.Desde AS PlanesParam_Desde, 
            T.Hasta AS PlanesParam_Hasta, 
            T.Valor AS PlanesParam_Valor, 
            T.Param1 AS PlanesParam_Param1, 
            T.Param2 AS PlanesParam_Param2, 
            T.Orden AS PlanesParam_Orden, 
            True AS _from0
        FROM CodeFirstDatabase.PlanesParam AS T
    ) AS T1");
        }
    }
}
